{"version":3,"sources":["constant.ts","utils/react.ts","store/types.ts","store/dm.ts","store/collection.ts","utils/ability.ts","store/character.ts","store/index.ts","utils/entity.ts","utils/spell.ts","components/Spell.tsx","utils/feat.ts","components/Feat.tsx","components/QuickSearch.tsx","components/QuickSearchToggler.tsx","components/NavLink.tsx","components/Navbar.tsx","components/AbilityIcon.tsx","components/AbilityInput.tsx","components/CollectionEntitySelect.tsx","components/Select.tsx","components/Player/CharacterBasic.tsx","components/CollectionEntityPicker.tsx","components/Player/CharacterSpellbook.tsx","pages/PlayerPage.tsx","utils/misc.ts","components/DM/Character.tsx","components/ButtonSwitch.tsx","pages/DMPage.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["ENTITY_COLORS","spell","feat","weapon","createContextNoNullCheck","defaults","context","createContext","c","useContext","Error","useIsSmallerScreen","useMediaQuery","CONTAINER_WIDTH","AbilityType","DEFAULT_CHARACTER_PROPS","initiative","hp","maxHP","perception","rolledInitiative","rolledPerception","DMStore","characters","makeObservable","this","rollAllInitiative","action","rollAllPerception","healAll","sortedCharacters","computed","observable","array","sort","a","b","ac","parseInt","name","push","id","shortid","getNonConflictName","remove","Math","ceil","random","forEach","rollInitiative","rollPerception","existed","filter","startsWith","length","s","JSON","parse","map","Collection","type","data","options","fuse","Fuse","includeScore","threshold","keys","searchFields","find","collections","race","RACE_DATA","SPELL_DATA","FEAT_DATA","class","CLASS_DATA","ABILITY_TYPES","str","dex","con","int","wis","cha","abilityTranslates","getModifierFromScore","score","floor","showModifier","mod","ABILITY_COST","7","8","9","10","11","12","13","14","15","16","17","18","getScoreCost","Character","baseAbility","bonusAbilityType","raceId","classId","spellbookIds","abilityModifier","abilityCost","bonusAbility","setRace","spellbook","generate","set","Set","deep","base","bonus","addBonusScores","ab","ability","mapValues","Object","values","v","reduce","acc","isEmpty","getById","Array","from","t","Boolean","stringify","pick","serializableProps","json","useCurrentCharacter","CurrentCharacterContext","Store","dm","restore","persist","key","limitEach","search","limit","autorun","entries","k","replace","parseCharacters","useStore","StoreContext","entityTypeTranslates","translates","school","level","domain","castingTime","components","range","effect","target","area","aiming","duration","saving","resistance","SpellMeta","size","mt","meta","pl","color","width","spellTranslates","Spell","showName","showMeta","showDescription","className","direction","align","book","toUpperCase","as","fontSize","style","fontWeight","pt","whiteSpace","dangerouslySetInnerHTML","__html","description","featTranslates","requirement","benefit","normal","special","FeatMeta","Feat","showBrief","fontStyle","brief","QuickSearchResultItem","item","el","mb","border","borderColor","p","borderRadius","_hover","boxShadow","transition","QuickSearch","store","useState","searchKey","setSearchKey","searchResult","useMemo","quickSearch","currentType","setCurrentType","isSmallerScreen","resultType","results","useEffect","includes","flexGrow","flexShrink","Search2","placeholder","autoFocus","value","onChange","e","matchWidth","autoSelect","Button","rightIcon","ChevronDown","variant","colorScheme","onClick","r","bgColor","cursor","opacity","overflowY","QuickSearchToggler","children","useDisclosure","isOpen","onClose","onOpen","d","flexDir","NavLink","to","props","match","useRouteMatch","RouterLink","Navbar","bg","borderBottom","py","alignItems","mr","GiAncientSword","h","w","aria-label","icon","icons","GiFist","GiBullseye","GiShield","GiBrain","GiAerialSignal","GiFlyingFlag","AbilityIcon","AbilityNumber","number","text","spacing","textAlign","lineHeight","AbilityInput","max","min","racial","isIncreaseDisabled","fontFamily","isAttached","isDisabled","CollectionEntitySelect","collection","placement","FaCheck","undefined","Select","o","i","CharacterBasic","character","maxW","remainPoints","my","resetBaseAbility","CollectionEntityPicker","inputRef","onPick","items","FaSearch","ref","borderTop","maxH","overflow","picked","background","CharacterSpellbook","initialFocusRef","useRef","showSpell","setShowSpell","add","columns","Delete","confirm","delete","stopPropagation","NAV_LINKS","url","PlayerPage","currentCharacter","showMenuNav","currentMenuNavItem","setCurrentMenuNavItem","location","useLocation","history","useHistory","navLink","pathname","Provider","n","pos","borderRight","SIDEBAR_WIDTH","path","component","stringToColor","hash","charCodeAt","toString","substr","borderBottomColor","borderTopWidth","borderTopColor","borderTopRadius","flexBasis","justify","heal","removeCharacter","ButtonSwitch","DMPage","order","setOrder","wrap","addCharacter","IconButton","App","basename","isLocalhost","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","configure","enforceActions","theme","extendTheme","Container","baseStyle","init","ReactDOM","render","StrictMode","document","getElementById","refreshing","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","waiting","postMessage"],"mappings":"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","file":"static/js/main.22cf1b9f.chunk.js","sourcesContent":["export const CONTAINER_WIDTH = 1024;\n\nexport const ENTITY_COLORS: Record<string, string> = {\n  spell: 'purple.600',\n  feat: 'red.600',\n  weapon: 'orange.600',\n};\n","import { createContext, useContext } from 'react';\nimport { useMediaQuery } from '@chakra-ui/react';\n\nimport { CONTAINER_WIDTH } from '../constant';\n\nexport function createContextNoNullCheck<T>(defaults?: T): [() => T, React.Context<T | undefined>] {\n  const context = createContext<T | undefined>(defaults);\n\n  function use(): T {\n    const c = useContext(context);\n\n    if (typeof c === 'undefined') {\n      throw new Error('useContext must be inside a Provider with a value');\n    }\n\n    return c;\n  }\n\n  return [use, context];\n}\n\nexport function useIsSmallerScreen(): boolean {\n  return useMediaQuery(`(max-width: ${CONTAINER_WIDTH - 1}px)`)[0];\n}\n","export enum AbilityType {\n  str = 'str',\n  dex = 'dex',\n  con = 'con',\n  int = 'int',\n  wis = 'wis',\n  cha = 'cha',\n}\n\nexport interface Abilities {\n  [AbilityType.str]: number;\n  [AbilityType.dex]: number;\n  [AbilityType.con]: number;\n  [AbilityType.int]: number;\n  [AbilityType.wis]: number;\n  [AbilityType.cha]: number;\n}\n\nexport interface Entity {\n  id: string;\n  name: string;\n}\n\nexport interface Race extends Entity {\n  ability: Partial<Abilities>;\n}\n\nexport interface Class extends Entity {\n  hd: number;\n}\n\nexport interface SpellMeta {\n  school?: string;\n  level?: string;\n  castingTime?: string;\n  components?: string;\n  effect?: string;\n  area?: string;\n  target?: string;\n  aiming?: string;\n  duration?: string;\n  saving?: string;\n  resistance?: string;\n}\n\nexport interface Spell extends Entity {\n  meta: SpellMeta;\n  book: string;\n  description: string;\n}\n\nexport interface FeatMeta {\n  requirement?: string;\n  benefit?: string;\n  special?: string;\n  normal?: string;\n}\n\nexport interface Feat extends Entity {\n  meta: FeatMeta;\n  book: string;\n  brief: string;\n  description?: string;\n}\n\nexport type Weapon = Entity;\n","import { observable, IObservableArray, makeObservable, action, computed } from 'mobx';\nimport shortid from 'shortid';\n\nconst DEFAULT_CHARACTER_PROPS = {\n  initiative: '0',\n  hp: '1',\n  maxHP: '10',\n  perception: '0',\n  rolledInitiative: 0,\n  rolledPerception: 0,\n};\n\nexport interface DMCharacter {\n  id: string;\n  name: string;\n  initiative: string;\n  hp: string;\n  maxHP: string;\n  perception: string;\n  rolledInitiative: number;\n  rolledPerception: number;\n}\n\nexport default class DMStore {\n  characters: IObservableArray<DMCharacter>;\n\n  constructor() {\n    makeObservable(this, {\n      rollAllInitiative: action,\n      rollAllPerception: action,\n      healAll: action,\n      sortedCharacters: computed,\n    });\n\n    this.characters = observable.array([]);\n  }\n\n  get sortedCharacters(): Array<DMCharacter> {\n    return [...this.characters].sort((a, b) => {\n      const ac = parseInt(a.initiative) + a.rolledInitiative;\n      const bc = parseInt(b.initiative) + b.rolledInitiative;\n\n      return bc - ac;\n    });\n  }\n\n  addCharacter(name: string): void {\n    this.characters.push({\n      id: shortid(),\n      name: this.getNonConflictName(name),\n      ...DEFAULT_CHARACTER_PROPS,\n    });\n  }\n\n  removeCharacter(c: DMCharacter): void {\n    this.characters.remove(c);\n  }\n\n  rollInitiative(c: DMCharacter): void {\n    c.rolledInitiative = Math.ceil(Math.random() * 20);\n  }\n\n  rollAllInitiative(): void {\n    this.characters.forEach((c) => this.rollInitiative(c));\n  }\n\n  rollPerception(c: DMCharacter): void {\n    c.rolledPerception = Math.ceil(Math.random() * 20);\n  }\n\n  rollAllPerception(): void {\n    this.characters.forEach((c) => this.rollPerception(c));\n  }\n\n  heal(c: DMCharacter): void {\n    c.hp = c.maxHP;\n  }\n  healAll(): void {\n    this.characters.forEach((c) => {\n      c.hp = c.maxHP;\n    });\n  }\n\n  getNonConflictName(name: string): string {\n    const existed = this.characters.filter((c) => c.name.startsWith(name));\n\n    return `${name} ${existed.length + 1}`;\n  }\n\n  static parseCharacters(s: string): Array<DMCharacter> {\n    const json = JSON.parse(s);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return json.map((c: any) => ({\n      ...DEFAULT_CHARACTER_PROPS,\n      ...c,\n    }));\n  }\n}\n","import Fuse from 'fuse.js';\n\nimport RACE_DATA from '../data/races.json';\nimport CLASS_DATA from '../data/classes.json';\nimport SPELL_DATA from '../data/spells.json';\nimport FEAT_DATA from '../data/feats.json';\n\nimport { Entity, Race, Spell, Feat, Class } from './types';\n\nexport type CollectionEntityType = 'race' | 'class' | 'spell' | 'feat' | 'weapon';\n\nexport interface CollectionOptions {\n  searchFields: Array<string>;\n}\n\nexport class Collection<T extends Entity = Entity> {\n  type: CollectionEntityType;\n  data: Array<T>;\n\n  fuse: Fuse<T>;\n\n  constructor(type: CollectionEntityType, data: Array<T>, options: CollectionOptions) {\n    this.type = type;\n    this.data = data;\n\n    this.fuse = new Fuse(data, {\n      includeScore: true,\n      threshold: 0.2,\n\n      keys: options.searchFields,\n    });\n  }\n\n  getById(id: string): T | null {\n    return this.data.find((s) => s.id === id) || null;\n  }\n}\n\nexport const collections = {\n  race: new Collection<Race>('race', RACE_DATA, {\n    searchFields: ['id', 'name'],\n  }),\n  spell: new Collection<Spell>('spell', SPELL_DATA, {\n    searchFields: ['id', 'name'],\n  }),\n  feat: new Collection<Feat>('feat', FEAT_DATA, {\n    searchFields: ['id', 'name'],\n  }),\n  class: new Collection<Class>('class', CLASS_DATA, {\n    searchFields: ['id', 'name'],\n  }),\n};\n","import { mapValues } from 'lodash-es';\n\nimport { Abilities, AbilityType } from '../store/types';\n\nexport const ABILITY_TYPES = [\n  AbilityType.str,\n  AbilityType.dex,\n  AbilityType.con,\n  AbilityType.int,\n  AbilityType.wis,\n  AbilityType.cha,\n];\n\nexport const abilityTranslates = {\n  str: '力量',\n  dex: '敏捷',\n  con: '体质',\n  int: '智力',\n  wis: '感知',\n  cha: '魅力',\n};\n\nexport function addBonusScores(base: Abilities, bonus: Partial<Abilities>): Abilities {\n  return {\n    str: base.str + (bonus.str ?? 0),\n    dex: base.dex + (bonus.dex ?? 0),\n    con: base.con + (bonus.con ?? 0),\n    int: base.int + (bonus.int ?? 0),\n    wis: base.wis + (bonus.wis ?? 0),\n    cha: base.cha + (bonus.cha ?? 0),\n  };\n}\n\nexport function getModifierFromScore(score: number): number {\n  return Math.floor((score - 10) / 2);\n}\n\nexport function getModifiers(ab: Abilities): Abilities {\n  return mapValues(ab, getModifierFromScore);\n}\n\nexport function showModifier(mod: number): string {\n  return `${mod < 0 ? '' : '+'}${mod}`;\n}\n\nexport const ABILITY_COST: Record<number, number> = {\n  7: -4,\n  8: -2,\n  9: -1,\n  10: 0,\n  11: 1,\n  12: 2,\n  13: 3,\n  14: 5,\n  15: 7,\n  16: 10,\n  17: 13,\n  18: 17,\n};\n\nexport const MINIMUM_ABILITY_SCORE = 7;\nexport const MAXIMUM_ABILITY_SCORE = 18;\nexport const ABILITY_POINTS = 25;\n\nexport function getScoreCost(score: number): number {\n  return ABILITY_COST[score] ?? 0;\n}\n\nexport function getTotalScoreCosts(ab: Abilities): number {\n  return Object.values(ab)\n    .map((v) => getScoreCost(v))\n    .reduce((acc, v) => acc + v, 0);\n}\n","import { isEmpty, pick } from 'lodash-es';\nimport { observable, makeObservable, ObservableSet, computed, action } from 'mobx';\nimport shortid from 'shortid';\n\nimport { createContextNoNullCheck } from '../utils/react';\nimport { collections } from './collection';\nimport { Abilities, Spell, Race, AbilityType } from './types';\nimport { getModifiers, getTotalScoreCosts, addBonusScores } from '../utils/ability';\n\ninterface OptionalCharacterParams {\n  id?: string;\n  baseAbility?: Abilities;\n  bonusAbilityType?: AbilityType;\n\n  raceId?: string;\n  classId?: string;\n  spellbookIds?: string[];\n}\n\nexport default class Character {\n  id: string;\n  name: string;\n  baseAbility: Abilities;\n  bonusAbilityType: AbilityType;\n\n  raceId: string;\n  classId: string;\n  spellbookIds: ObservableSet<string>;\n\n  constructor(\n    name: string,\n    {\n      id,\n      baseAbility,\n      bonusAbilityType = AbilityType.str,\n      raceId = 'Human',\n      classId = 'Fighter',\n      spellbookIds,\n    }: OptionalCharacterParams = {}\n  ) {\n    makeObservable(this, {\n      name: observable,\n      baseAbility: observable,\n\n      abilityModifier: computed,\n      abilityCost: computed,\n\n      bonusAbilityType: observable,\n      bonusAbility: computed,\n\n      raceId: observable,\n      race: computed,\n      setRace: action,\n\n      classId: observable,\n\n      spellbook: computed,\n    });\n\n    this.name = name;\n    this.id = id ?? shortid.generate();\n\n    this.baseAbility = baseAbility ?? { str: 10, dex: 10, con: 10, int: 10, wis: 10, cha: 10 };\n    this.bonusAbilityType = bonusAbilityType ?? AbilityType.str;\n\n    this.raceId = raceId;\n    this.classId = classId;\n\n    this.spellbookIds = observable.set(new Set(spellbookIds), { deep: false });\n  }\n\n  get ability(): Abilities {\n    return addBonusScores(this.baseAbility, this.bonusAbility);\n  }\n  get abilityModifier(): Abilities {\n    return getModifiers(this.ability);\n  }\n  get abilityCost(): number {\n    return getTotalScoreCosts(this.baseAbility);\n  }\n  get bonusAbility(): Partial<Abilities> {\n    if (isEmpty(this.race.ability)) {\n      return { [this.bonusAbilityType]: 2 };\n    }\n\n    return this.race.ability;\n  }\n  resetBaseAbility(): void {\n    this.baseAbility = { str: 10, dex: 10, con: 10, int: 10, wis: 10, cha: 10 };\n  }\n\n  get race(): Race {\n    return (\n      collections.race.getById(this.raceId) || {\n        id: 'unknown',\n        name: '未知',\n        ability: {},\n      }\n    );\n  }\n\n  setRace(raceId: string): void {\n    this.raceId = raceId;\n    this.bonusAbilityType = AbilityType.str;\n  }\n\n  get spellbook(): Array<Spell> {\n    return Array.from(this.spellbookIds)\n      .map((id) => collections.spell.getById(id))\n      .filter((t): t is Spell => Boolean(t));\n  }\n\n  static serializableProps = [\n    'raceId',\n    'classId',\n    'baseAbility',\n    'bonusAbilityType',\n    'spellbookIds',\n  ];\n\n  static stringify(c: Character): string {\n    return JSON.stringify({\n      id: c.id,\n      name: c.name,\n      spellbook: Array.from(c.spellbook).map((s) => s.id),\n      ...pick(c, Character.serializableProps),\n    });\n  }\n\n  static parse(s: string): Character {\n    const json = JSON.parse(s);\n    const character = new Character(json.name, json);\n\n    return character;\n  }\n}\n\nexport const [useCurrentCharacter, CurrentCharacterContext] = createContextNoNullCheck<Character>();\n","import Fuse from 'fuse.js';\nimport { observable, IObservableArray, autorun } from 'mobx';\nimport { set, entries } from 'idb-keyval';\n\nimport { createContextNoNullCheck } from '../utils/react';\n\nimport { Entity } from './types';\nimport DMStore from './dm';\nimport { collections, Collection, CollectionEntityType } from './collection';\nimport Character from './character';\n\nexport class Store {\n  dm: DMStore;\n\n  collections: typeof collections; // for components\n\n  characters: IObservableArray<Character>;\n\n  constructor() {\n    this.dm = new DMStore();\n\n    this.collections = collections;\n\n    this.characters = observable.array([], { deep: false });\n  }\n\n  async init(): Promise<void> {\n    await this.restore();\n    this.persist();\n  }\n\n  quickSearch(\n    key: string,\n    limitEach = 20\n  ): Array<[CollectionEntityType, Fuse.FuseResult<Entity>[]]> {\n    return ([collections.spell, collections.feat] as Array<Collection<Entity>>).map((c) => [\n      c.type,\n      c.fuse.search(key, { limit: limitEach }),\n    ]);\n  }\n\n  persist(): void {\n    autorun(() => {\n      this.characters.forEach((c) => {\n        set(`character:${c.id}`, Character.stringify(c));\n      });\n\n      set('dm:characters', JSON.stringify(this.dm.characters));\n    });\n  }\n\n  async restore(): Promise<void> {\n    const persisted = await entries();\n\n    persisted.forEach(([k, v]) => {\n      if (typeof k === 'string') {\n        if (k.startsWith('character')) {\n          this.characters.push(Character.parse(v));\n        }\n\n        if (k === 'dm:characters') {\n          this.dm.characters.replace(DMStore.parseCharacters(v));\n        }\n      }\n    });\n\n    if (this.characters.length < 1) {\n      this.characters.push(new Character('Default'));\n    }\n  }\n}\n\nexport const [useStore, StoreContext] = createContextNoNullCheck<Store>();\n","export const entityTypeTranslates = {\n  race: '种族',\n  class: '职业',\n  spell: '法术',\n  feat: '专长',\n  weapon: '武器',\n};\n","export const translates = {\n  school: '学派',\n  level: '环位',\n  domain: '领域',\n  castingTime: '施法时间',\n  components: '成分',\n  range: '距离',\n  effect: '效果',\n  target: '目标',\n  area: '区域',\n  aiming: '目标, 区域或区域',\n  duration: '持续时间',\n  saving: '豁免',\n  resistance: '法术抗力',\n};\n","import './Spell.scss';\n\nimport { Box, Heading, Badge, Text, Stack, Table, Tbody, Tr, Td } from '@chakra-ui/react';\n\nimport { ENTITY_COLORS } from '../constant';\nimport { Spell as SpellType, SpellMeta as SpellMetaType } from '../store/types';\nimport { translates as spellTranslates } from '../utils/spell';\n\ninterface Props {\n  spell: SpellType;\n  showName?: boolean;\n  showMeta?: boolean;\n  showDescription?: boolean;\n}\n\nexport function SpellMeta({ spell }: Props): JSX.Element {\n  return (\n    <Table size=\"sm\" mt=\"2\">\n      <Tbody>\n        {(Object.keys(spell.meta) as Array<keyof SpellMetaType>).map((k) => (\n          <Tr key={k}>\n            <Td pl=\"0\" color=\"blue.500\" width=\"8em\">\n              {spellTranslates[k]}\n            </Td>\n            <Td>{spell.meta[k]}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n}\n\nexport default function Spell({\n  spell,\n  showName = true,\n  showMeta = true,\n  showDescription = true,\n}: Props): JSX.Element {\n  return (\n    <Box className=\"spell\">\n      {showName ? (\n        <Stack direction=\"row\" align=\"center\">\n          <Badge>{spell.book.toUpperCase()}</Badge>\n          <Heading as=\"h4\" fontSize=\"lg\" color={ENTITY_COLORS.spell}>\n            {spell.name} <small style={{ fontWeight: 'normal' }}>({spell.id})</small>\n          </Heading>\n        </Stack>\n      ) : null}\n\n      {showMeta ? <SpellMeta spell={spell} /> : null}\n\n      {showDescription ? (\n        <Text\n          pt=\"1\"\n          whiteSpace=\"pre-wrap\"\n          dangerouslySetInnerHTML={{ __html: spell.description }}\n          className=\"spell-description\"\n        />\n      ) : null}\n    </Box>\n  );\n}\n","export const featTranslates = {\n  requirement: '先决条件',\n  benefit: '专长效果',\n  normal: '通常状况',\n  special: '特殊说明',\n};\n","import './Feat.scss';\n\nimport { Box, HStack, Badge, Heading, Table, Tbody, Tr, Td, Text } from '@chakra-ui/react';\n\nimport { ENTITY_COLORS } from '../constant';\nimport { Feat as FeatType, FeatMeta as FeatMetaType } from '../store/types';\nimport { featTranslates } from '../utils/feat';\n\ninterface Props {\n  feat: FeatType;\n  showName?: boolean;\n  showBrief?: boolean;\n  showMeta?: boolean;\n  showDescription?: boolean;\n}\n\nfunction FeatMeta({ feat }: { feat: FeatType }) {\n  return (\n    <Table size=\"sm\" mt=\"2\">\n      <Tbody>\n        {(Object.keys(feat.meta) as Array<keyof FeatMetaType>).map((k) => (\n          <Tr key={k}>\n            <Td pl=\"0\" color=\"blue.500\" width=\"8em\">\n              {featTranslates[k]}\n            </Td>\n            <Td>{feat.meta[k]}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n}\n\nexport default function Feat({\n  feat,\n  showName = true,\n  showBrief = true,\n  showMeta = true,\n  showDescription = true,\n}: Props): JSX.Element {\n  return (\n    <Box className=\"feat\">\n      {showName ? (\n        <HStack direction=\"row\" align=\"center\">\n          <Badge>{feat.book.toUpperCase()}</Badge>\n          <Heading as=\"h4\" fontSize=\"lg\" color={ENTITY_COLORS.feat}>\n            {feat.name} <small style={{ fontWeight: 'normal' }}>({feat.id})</small>\n          </Heading>\n        </HStack>\n      ) : null}\n\n      {showBrief ? (\n        <Text mt=\"2\" fontStyle=\"italic\">\n          {feat.brief}\n        </Text>\n      ) : null}\n\n      {showMeta ? <FeatMeta feat={feat} /> : null}\n\n      {showDescription && feat.description ? (\n        <Text\n          pt=\"1\"\n          whiteSpace=\"pre-wrap\"\n          dangerouslySetInnerHTML={{ __html: feat.description }}\n          className=\"feat-description\"\n        />\n      ) : null}\n    </Box>\n  );\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport {\n  Box,\n  InputGroup,\n  Input,\n  InputLeftElement,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Button,\n  Tag,\n  HStack,\n} from '@chakra-ui/react';\nimport { Search2Icon, ChevronDownIcon } from '@chakra-ui/icons';\n\nimport { ENTITY_COLORS } from '../constant';\nimport { useStore } from '../store';\nimport { CollectionEntityType } from '../store/collection';\nimport { Entity, Spell as SpellType, Feat as FeatType } from '../store/types';\nimport { useIsSmallerScreen } from '../utils/react';\nimport { entityTypeTranslates } from '../utils/entity';\nimport Spell from './Spell';\nimport Feat from './Feat';\n\nfunction QuickSearchResultItem({ item, type }: { item: Entity; type: CollectionEntityType }) {\n  let el = null;\n\n  switch (type) {\n    case 'spell':\n      el = <Spell spell={item as SpellType} />;\n      break;\n    case 'feat':\n      el = <Feat feat={item as FeatType} />;\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <Box\n      mb=\"2\"\n      border=\"1px\"\n      borderColor=\"gray.200\"\n      p=\"2\"\n      borderRadius=\"md\"\n      _hover={{\n        borderColor: 'gray.300',\n        boxShadow: 'base',\n      }}\n      transition=\"all .2s ease-in-out\"\n    >\n      {el}\n    </Box>\n  );\n}\n\nexport default function QuickSearch(): JSX.Element {\n  const store = useStore();\n  const [searchKey, setSearchKey] = useState('');\n  const searchResult = useMemo(() => store.quickSearch(searchKey), [searchKey]);\n  const [currentType, setCurrentType] = useState(() => searchResult?.[0]?.[0]);\n  const isSmallerScreen = useIsSmallerScreen();\n  const [resultType, results] = searchResult.find(([t]) => currentType === t) || [];\n\n  useEffect(() => {\n    const hasResult = searchResult.map(([t]) => t);\n\n    if (!hasResult.includes(currentType)) {\n      setCurrentType(searchResult?.[0]?.[0]);\n    }\n  }, [currentType, searchResult]);\n\n  return (\n    <>\n      <Box flexGrow={0} flexShrink={0} mb=\"2\">\n        <InputGroup>\n          <InputLeftElement>\n            <Search2Icon color=\"gray.400\" />\n          </InputLeftElement>\n          <Input\n            placeholder=\"计划是搜一切\"\n            autoFocus\n            value={searchKey}\n            onChange={(e) => {\n              setSearchKey(e.target.value);\n            }}\n          />\n        </InputGroup>\n        {results && results?.length > 0 ? (\n          isSmallerScreen ? (\n            <Menu matchWidth autoSelect={false}>\n              <MenuButton\n                mt=\"2\"\n                as={Button}\n                rightIcon={<ChevronDownIcon />}\n                variant=\"outline\"\n                width=\"100%\"\n                colorScheme=\"blackAlpha\"\n              >\n                {entityTypeTranslates[currentType]}\n              </MenuButton>\n              <MenuList>\n                {searchResult.map(([type, r]) =>\n                  r.length > 0 ? (\n                    <MenuItem\n                      key={type}\n                      onClick={() => {\n                        setCurrentType(type);\n                      }}\n                    >\n                      {entityTypeTranslates[type]}\n                    </MenuItem>\n                  ) : null\n                )}\n              </MenuList>\n            </Menu>\n          ) : (\n            <HStack pt=\"2\">\n              {searchResult.map(([type, r]) =>\n                r.length > 0 ? (\n                  <Tag\n                    key={type}\n                    onClick={() => setCurrentType(type)}\n                    bgColor={ENTITY_COLORS[type]}\n                    color=\"white\"\n                    cursor=\"pointer\"\n                    size=\"lg\"\n                    opacity={type === currentType ? 1 : 0.6}\n                  >\n                    {entityTypeTranslates[type]}({r.length})\n                  </Tag>\n                ) : null\n              )}\n            </HStack>\n          )\n        ) : null}\n      </Box>\n      {results && resultType && results?.length > 0 ? (\n        <Box flexGrow={1} overflowY=\"auto\" key={resultType}>\n          {results.map(({ item }) => (\n            <QuickSearchResultItem key={item.id} type={resultType} item={item} />\n          ))}\n        </Box>\n      ) : null}\n    </>\n  );\n}\n","import {\n  Drawer,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerBody,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nimport QuickSearch from './QuickSearch';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nexport default function QuickSearchToggler({ children }: Props): JSX.Element {\n  const { isOpen, onClose, onOpen } = useDisclosure();\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Drawer isOpen={isOpen} onClose={onClose} size=\"lg\">\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerHeader>搜一切</DrawerHeader>\n            <DrawerBody d=\"flex\" flexDir=\"column\">\n              <QuickSearch />\n            </DrawerBody>\n            <DrawerCloseButton />\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  );\n}\n","import { Link, LinkProps } from '@chakra-ui/react';\nimport { Link as RouterLink, LinkProps as RouterLinkProps, useRouteMatch } from 'react-router-dom';\n\ninterface Props\n  extends LinkProps,\n    Pick<RouterLinkProps, 'to' | 'component' | 'innerRef' | 'replace'> {\n  to: string;\n}\n\nexport default function NavLink({ to, ...props }: Props): JSX.Element {\n  const match = useRouteMatch(to);\n\n  return <Link as={RouterLink} color={match ? 'teal.400' : 'black'} to={to} {...props} />;\n}\n","import { Box, Container, Heading, Flex, Spacer, IconButton, HStack, Icon } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\nimport { GiAncientSword } from 'react-icons/gi';\n\nimport QuickSearchToggler from './QuickSearchToggler';\nimport NavLink from './NavLink';\n\nexport default function Navbar(): JSX.Element {\n  return (\n    <Box bg=\"white\" borderBottom=\"1px\" borderColor=\"gray.300\" py={3}>\n      <Container>\n        <Flex alignItems=\"center\">\n          <HStack mr=\"8\" color=\"gray.700\">\n            <Icon as={GiAncientSword} h=\"28px\" w=\"28px\" />\n            <Heading as=\"h1\" fontSize=\"large\">\n              PFWB\n            </Heading>\n          </HStack>\n          <HStack>\n            <NavLink to=\"/player\">PC</NavLink>\n            <NavLink to=\"/dm\">DM</NavLink>\n          </HStack>\n          <Spacer />\n          <QuickSearchToggler>\n            <IconButton aria-label=\"Quick Search\" size=\"sm\" icon={<Search2Icon />} />\n          </QuickSearchToggler>\n        </Flex>\n      </Container>\n    </Box>\n  );\n}\n","import { Box, Icon } from '@chakra-ui/react';\nimport {\n  GiFist,\n  GiBullseye,\n  GiShield,\n  GiBrain,\n  GiAerialSignal,\n  GiFlyingFlag,\n} from 'react-icons/gi';\n\nimport { AbilityType } from '../store/types';\n\nconst icons = {\n  str: { icon: GiFist, color: 'orange.500' },\n  dex: { icon: GiBullseye, color: 'green.500' },\n  con: { icon: GiShield, color: 'red.500' },\n  int: { icon: GiBrain, color: 'yellow.500' },\n  wis: { icon: GiAerialSignal, color: 'cyan.500' },\n  cha: { icon: GiFlyingFlag, color: 'pink.500' },\n};\n\nexport default function AbilityIcon({ ability }: { ability: AbilityType }): JSX.Element {\n  const { icon, color } = icons[ability];\n\n  return (\n    <Box bgColor={color} p=\"1\" borderRadius=\"md\">\n      <Icon as={icon} color=\"white\" w={8} h={8} />\n    </Box>\n  );\n}\n","import { HStack, VStack, Spacer, IconButton, Text, ButtonGroup } from '@chakra-ui/react';\nimport { FaPlus, FaMinus } from 'react-icons/fa';\n\nimport { AbilityType } from '../store/types';\nimport {\n  getModifierFromScore,\n  showModifier,\n  MAXIMUM_ABILITY_SCORE,\n  MINIMUM_ABILITY_SCORE,\n} from '../utils/ability';\n\nimport AbilityIcon from './AbilityIcon';\n\ninterface Props {\n  ability: AbilityType;\n  score: number;\n  onChange: (s: number) => void;\n  max?: number;\n  min?: number;\n  isIncreaseDisabled?: boolean;\n  racial?: number;\n}\n\nfunction AbilityNumber({ number, text }: { number: string | number; text: string }) {\n  return (\n    <VStack spacing=\"0\">\n      <Text fontSize=\"large\" textAlign=\"center\" lineHeight=\"1\">\n        {number}\n      </Text>\n      <Text fontSize=\"xs\" color=\"gray.500\" lineHeight=\"1\">\n        {text}\n      </Text>\n    </VStack>\n  );\n}\n\nexport default function AbilityInput({\n  ability,\n  score,\n  onChange,\n  max = MAXIMUM_ABILITY_SCORE,\n  min = MINIMUM_ABILITY_SCORE,\n  racial = 0,\n  isIncreaseDisabled = false,\n}: Props): JSX.Element {\n  return (\n    <HStack w=\"full\">\n      <AbilityIcon ability={ability} />\n      <Text fontSize=\"lg\" fontFamily=\"mono\">\n        {ability.toUpperCase()}\n      </Text>\n      <Spacer />\n      <AbilityNumber number={showModifier(getModifierFromScore(score + racial))} text=\"mod\" />\n      <AbilityNumber number={showModifier(racial)} text=\"racial\" />\n      <AbilityNumber number={score + racial} text=\"score\" />\n\n      <ButtonGroup isAttached>\n        <IconButton\n          aria-label=\"Decrease Ability\"\n          icon={<FaMinus />}\n          onClick={() => onChange(score - 1)}\n          size=\"sm\"\n          isDisabled={score <= min}\n        />\n        <IconButton\n          aria-label=\"Increase Ability\"\n          icon={<FaPlus />}\n          onClick={() => onChange(score + 1)}\n          size=\"sm\"\n          isDisabled={score >= max || isIncreaseDisabled}\n        />\n      </ButtonGroup>\n    </HStack>\n  );\n}\n","import { Button, Menu, MenuButton, MenuItem, MenuList, Icon } from '@chakra-ui/react';\nimport { FaCheck } from 'react-icons/fa';\n\nimport { Collection } from '../store/collection';\n\ninterface Props {\n  collection: Collection;\n  onChange: (v: string) => void;\n  value: string | null;\n  placeholder?: string;\n}\n\nexport default function CollectionEntitySelect({\n  collection,\n  onChange,\n  value,\n  placeholder = 'Select',\n}: Props): JSX.Element {\n  return (\n    <Menu placement=\"bottom-start\">\n      <MenuButton as={Button}>\n        {(value ? collection.getById(value)?.name : '') || placeholder}\n      </MenuButton>\n      <MenuList>\n        {collection.data.map((e) => (\n          <MenuItem\n            key={e.id}\n            onClick={() => {\n              onChange(e.id);\n            }}\n            icon={e.id === value ? <Icon as={FaCheck} /> : undefined}\n          >\n            {e.name}\n          </MenuItem>\n        ))}\n      </MenuList>\n    </Menu>\n  );\n}\n","import { Button, Menu, MenuButton, MenuItem, MenuList, Icon } from '@chakra-ui/react';\nimport { FaCheck } from 'react-icons/fa';\n\ninterface Props<T = string> {\n  options: Array<{ text: string; value: T; key?: string }>;\n  onChange: (v: T) => void;\n  value: T | null;\n  placeholder?: string;\n}\n\nexport default function Select<T>({\n  options,\n  value,\n  onChange,\n  placeholder = 'Select',\n}: Props<T>): JSX.Element {\n  return (\n    <Menu placement=\"bottom-start\">\n      <MenuButton as={Button}>\n        {(value ? options.find(({ value: v }) => v === value)?.text : '') || placeholder}\n      </MenuButton>\n      <MenuList>\n        {options.map((o, i) => (\n          <MenuItem\n            key={o.key ?? i}\n            onClick={() => {\n              onChange(o.value);\n            }}\n            icon={o.value === value ? <Icon as={FaCheck} /> : undefined}\n          >\n            {o.text}\n          </MenuItem>\n        ))}\n      </MenuList>\n    </Menu>\n  );\n}\n","import { isEmpty } from 'lodash-es';\nimport { Observer } from 'mobx-react-lite';\nimport { Button, Box, VStack, Text, HStack, Spacer, Divider } from '@chakra-ui/react';\n\nimport { useStore } from '../../store';\nimport { useCurrentCharacter } from '../../store/character';\nimport {\n  ABILITY_TYPES,\n  getScoreCost,\n  ABILITY_POINTS,\n  abilityTranslates,\n} from '../../utils/ability';\n\nimport AbilityInput from '../AbilityInput';\nimport CollectionEntitySelect from '../CollectionEntitySelect';\nimport Select from '../Select';\n\nexport default function CharacterBasic(): JSX.Element {\n  const store = useStore();\n  const character = useCurrentCharacter();\n\n  return (\n    <Box maxW=\"sm\">\n      <Observer>\n        {() => (\n          <VStack w=\"full\">\n            <HStack w=\"full\" spacing=\"0\">\n              <Text fontSize=\"lg\">种族</Text>\n              <Spacer />\n              <CollectionEntitySelect\n                collection={store.collections.race}\n                value={character.raceId}\n                onChange={(id) => {\n                  character.raceId = id;\n                }}\n              />\n            </HStack>\n            <Divider />\n            {isEmpty(character.race.ability) ? (\n              <>\n                <HStack w=\"full\" spacing=\"0\">\n                  <Text fontSize=\"lg\">能力奖励</Text>\n                  <Spacer />\n                  <Select\n                    options={ABILITY_TYPES.map((t) => ({\n                      text: abilityTranslates[t],\n                      value: t,\n                      key: t,\n                    }))}\n                    value={character.bonusAbilityType}\n                    onChange={(v) => {\n                      character.bonusAbilityType = v;\n                    }}\n                  />\n                </HStack>\n                <Divider />\n              </>\n            ) : null}\n            <HStack w=\"full\" spacing=\"0\">\n              <Text fontSize=\"lg\">职业</Text>\n              <Spacer />\n              <CollectionEntitySelect\n                collection={store.collections.class}\n                value={character.classId}\n                onChange={(id) => {\n                  character.classId = id;\n                }}\n              />\n            </HStack>\n            <Divider />\n          </VStack>\n        )}\n      </Observer>\n      <Observer>\n        {() => {\n          const remainPoints = ABILITY_POINTS - character.abilityCost;\n\n          return (\n            <>\n              <HStack my=\"2\">\n                <Text fontSize=\"lg\">点数: {remainPoints} / 25</Text>\n                <Button size=\"xs\" onClick={() => character.resetBaseAbility()}>\n                  重置\n                </Button>\n              </HStack>\n              <VStack alignItems=\"start\">\n                {ABILITY_TYPES.map((ab) => {\n                  const score = character.baseAbility[ab];\n\n                  return (\n                    <AbilityInput\n                      key={ab}\n                      ability={ab}\n                      score={score}\n                      racial={character.bonusAbility[ab]}\n                      onChange={(v) => {\n                        character.baseAbility[ab] = v;\n                      }}\n                      isIncreaseDisabled={\n                        character.abilityCost >= ABILITY_POINTS ||\n                        getScoreCost(score + 1) - getScoreCost(score) > remainPoints\n                      }\n                    />\n                  );\n                })}\n              </VStack>\n            </>\n          );\n        }}\n      </Observer>\n    </Box>\n  );\n}\n","import { useMemo, useState, MutableRefObject } from 'react';\nimport { Box, InputGroup, Input, InputLeftElement, Icon, Text, HStack } from '@chakra-ui/react';\nimport { FaSearch, FaCheck } from 'react-icons/fa';\n\nimport { Collection } from '../store/collection';\n\ninterface Props {\n  collection: Collection;\n  onPick: (id: string) => void;\n  items: Array<string>;\n  inputRef?: MutableRefObject<HTMLInputElement | null>;\n}\n\nexport default function CollectionEntityPicker({\n  collection,\n  inputRef,\n  onPick,\n  items,\n}: Props): JSX.Element {\n  const [searchKey, setSearchKey] = useState('');\n  const searchResult = useMemo(() => {\n    return collection?.fuse.search(searchKey) || [];\n  }, [searchKey]);\n\n  return (\n    <Box>\n      <InputGroup>\n        <InputLeftElement>\n          <Icon as={FaSearch} color=\"gray.400\" />\n        </InputLeftElement>\n        <Input\n          ref={inputRef}\n          placeholder=\"Search\"\n          autoFocus\n          value={searchKey}\n          onChange={(e) => {\n            setSearchKey(e.target.value);\n          }}\n        />\n      </InputGroup>\n      {searchResult.length > 0 ? (\n        <Box borderTop=\"1px\" borderColor=\"gray.100\" mt=\"2\" maxH={300} overflow=\"auto\">\n          {searchResult.map(({ item }) => {\n            const picked = items.includes(item.id);\n\n            return (\n              <HStack\n                key={item.id}\n                onClick={() => {\n                  if (!picked) onPick(item.id);\n                }}\n                p=\"2\"\n                borderBottom=\"1px\"\n                borderColor=\"gray.200\"\n                _hover={{\n                  background: 'gray.100',\n                }}\n                color={picked ? 'gray.400' : 'black'}\n                cursor={picked ? 'not-allowed' : 'pointer'}\n              >\n                {picked ? <Icon as={FaCheck} /> : null}\n                <Text>\n                  {item.name} ({item.id})\n                </Text>\n              </HStack>\n            );\n          })}\n        </Box>\n      ) : null}\n    </Box>\n  );\n}\n","import {\n  Button,\n  Flex,\n  Spacer,\n  Divider,\n  SimpleGrid,\n  PopoverTrigger,\n  Popover,\n  PopoverContent,\n  PopoverBody,\n  PopoverArrow,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerBody,\n} from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { useRef, useState } from 'react';\nimport { Observer } from 'mobx-react-lite';\n\nimport CollectionEntityPicker from '../CollectionEntityPicker';\n\nimport { useStore } from '../../store';\nimport { Spell as SpellType } from '../../store/types';\nimport { useCurrentCharacter } from '../../store/character';\nimport { useIsSmallerScreen } from '../../utils/react';\n\nimport Spell from '../Spell';\n\nexport default function CharacterSpellbook(): JSX.Element {\n  const store = useStore();\n  const initialFocusRef = useRef<HTMLInputElement>(null);\n  const character = useCurrentCharacter();\n  const [showSpell, setShowSpell] = useState<SpellType | null>();\n  const isSmallerScreen = useIsSmallerScreen();\n\n  return (\n    <>\n      <Popover initialFocusRef={initialFocusRef} placement=\"bottom-start\">\n        <PopoverTrigger>\n          <Button size=\"sm\">添加法术</Button>\n        </PopoverTrigger>\n        <PopoverContent>\n          <PopoverBody>\n            <PopoverArrow />\n            <Observer>\n              {() => (\n                <CollectionEntityPicker\n                  collection={store.collections.spell}\n                  inputRef={initialFocusRef}\n                  onPick={(id) => {\n                    character.spellbookIds.add(id);\n                  }}\n                  items={Array.from(character.spellbookIds)}\n                />\n              )}\n            </Observer>\n          </PopoverBody>\n        </PopoverContent>\n      </Popover>\n      <Divider my=\"2\" />\n      <Observer>\n        {() => (\n          <SimpleGrid columns={isSmallerScreen ? 1 : 3} spacing=\"2\">\n            {Array.from(character.spellbook).map((spell) => (\n              <Flex\n                key={spell.id}\n                cursor=\"pointer\"\n                transition=\"box-shadow 0.2s ease-in-out\"\n                _hover={{ boxShadow: 'base' }}\n                border=\"1px\"\n                borderColor=\"gray.200\"\n                p=\"2\"\n                borderRadius=\"md\"\n                onClick={() => setShowSpell(spell)}\n                align=\"center\"\n              >\n                <Spell spell={spell} showMeta={false} showDescription={false} />\n                <Spacer />\n                <DeleteIcon\n                  color=\"red.500\"\n                  transition=\"color 0.2s ease-in-out\"\n                  _hover={{ color: 'red.600' }}\n                  onClick={(e) => {\n                    if (confirm('Are you sure?')) {\n                      character.spellbookIds.delete(spell.id);\n                    }\n                    e.stopPropagation();\n                  }}\n                />\n              </Flex>\n            ))}\n          </SimpleGrid>\n        )}\n      </Observer>\n\n      <Drawer\n        isOpen={Boolean(showSpell)}\n        onClose={() => {\n          setShowSpell(null);\n        }}\n        size=\"lg\"\n      >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerBody>{showSpell ? <Spell spell={showSpell} /> : null}</DrawerBody>\n            <DrawerCloseButton />\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport {\n  Box,\n  Container,\n  Button,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Divider,\n} from '@chakra-ui/react';\nimport { ChevronDownIcon } from '@chakra-ui/icons';\nimport { Route, useLocation, Switch, Redirect, useHistory } from 'react-router-dom';\n\nimport { useIsSmallerScreen } from '../utils/react';\nimport { CurrentCharacterContext } from '../store/character';\nimport { useStore } from '../store';\n\nimport NavLink from '../components/NavLink';\nimport CharacterBasic from '../components/Player/CharacterBasic';\nimport CharacterSpellbook from '../components/Player/CharacterSpellbook';\n\nconst SIDEBAR_WIDTH = 140;\n\nconst NAV_LINKS = [\n  { text: '基本', url: '/player/basic' },\n  { text: '法术', url: '/player/spellbook' },\n];\n\nexport default function PlayerPage(): JSX.Element {\n  const store = useStore();\n  const [currentCharacter] = useState(() => store.characters[0]);\n  const showMenuNav = useIsSmallerScreen();\n  const [currentMenuNavItem, setCurrentMenuNavItem] = useState(NAV_LINKS[0]);\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    const navLink = NAV_LINKS.find(({ url }) => url === location.pathname);\n\n    if (navLink) {\n      setCurrentMenuNavItem(navLink);\n    }\n  }, [location]);\n\n  return (\n    <CurrentCharacterContext.Provider value={currentCharacter}>\n      <Container>\n        {showMenuNav ? (\n          <>\n            <Menu matchWidth autoSelect={false}>\n              <MenuButton\n                as={Button}\n                rightIcon={<ChevronDownIcon />}\n                variant=\"outline\"\n                width=\"100%\"\n                colorScheme=\"blackAlpha\"\n              >\n                {currentMenuNavItem.text}\n              </MenuButton>\n              <MenuList>\n                {NAV_LINKS.map((n) => (\n                  <MenuItem\n                    key={n.url}\n                    onClick={() => {\n                      history.push(n.url);\n                    }}\n                  >\n                    <NavLink to={n.url} fontSize=\"large\">\n                      {n.text}\n                    </NavLink>\n                  </MenuItem>\n                ))}\n              </MenuList>\n            </Menu>\n            <Divider my=\"2\" />\n          </>\n        ) : (\n          <Box pos=\"fixed\" width={SIDEBAR_WIDTH} borderRight=\"1px\" borderColor=\"gray.400\">\n            {NAV_LINKS.map((n) => (\n              <Box key={n.url}>\n                <NavLink to={n.url} fontSize=\"large\">\n                  {n.text}\n                </NavLink>\n              </Box>\n            ))}\n          </Box>\n        )}\n        <Box pl={showMenuNav ? 0 : SIDEBAR_WIDTH + 20}>\n          <Switch>\n            <Route path=\"/player/basic\" component={CharacterBasic} />\n            <Route path=\"/player/spellbook\" component={CharacterSpellbook} />\n\n            <Redirect to=\"/player/basic\" />\n          </Switch>\n        </Box>\n      </Container>\n    </CurrentCharacterContext.Provider>\n  );\n}\n","export function stringToColor(str: string): string {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 3) - hash);\n  }\n\n  let color = '#';\n  for (let i = 0; i < 3; i++) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += ('00' + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}\n","import { Observer } from 'mobx-react-lite';\nimport { VStack, HStack, Input, Box, Text, Button } from '@chakra-ui/react';\n\nimport { useStore } from '../../store';\nimport { DMCharacter } from '../../store/dm';\nimport { stringToColor } from '../../utils/misc';\n\ninterface Props {\n  character: DMCharacter;\n}\n\nexport default function Character({ character: c }: Props): JSX.Element {\n  const { dm } = useStore();\n\n  return (\n    <Observer>\n      {() => (\n        <VStack\n          border=\"1px\"\n          borderColor=\"gray.200\"\n          borderRadius=\"md\"\n          spacing={0}\n          opacity={parseInt(c.hp) <= 0 ? 0.6 : 1}\n        >\n          <HStack\n            borderBottom=\"1px\"\n            borderBottomColor=\"gray.200\"\n            borderTopWidth=\"6px\"\n            borderTopColor={stringToColor(c.name)}\n            borderTopRadius=\"md\"\n            p=\"2\"\n            w=\"100%\"\n          >\n            <Box flexBasis=\"50%\">\n              <Text fontSize=\"xx-small\" color=\"gray.400\">\n                姓名\n              </Text>\n              <Input\n                value={c.name}\n                onChange={(e) => {\n                  c.name = e.target.value;\n                }}\n                variant=\"unstyled\"\n                fontSize=\"lg\"\n                fontWeight=\"bold\"\n              />\n            </Box>\n            <Box>\n              <Text fontSize=\"sm\">\n                先攻: {parseInt(c.initiative) + c.rolledInitiative}({c.initiative} +{' '}\n                {c.rolledInitiative})\n              </Text>\n              <Text fontSize=\"sm\">\n                察觉: {parseInt(c.perception) + c.rolledPerception}({c.perception} +{' '}\n                {c.rolledPerception})\n              </Text>\n            </Box>\n          </HStack>\n\n          <HStack spacing={0} borderBottom=\"1px\" borderColor=\"gray.200\">\n            <Box p=\"2\" borderRight=\"1px\" borderColor=\"gray.200\">\n              <Text fontSize=\"xx-small\" color=\"gray.400\">\n                HP\n              </Text>\n              <Input\n                value={c.hp}\n                onChange={(e) => {\n                  c.hp = e.target.value;\n                }}\n                variant=\"unstyled\"\n                type=\"number\"\n              />\n            </Box>\n            <Box p=\"2\">\n              <Text fontSize=\"xx-small\" color=\"gray.400\">\n                Max HP\n              </Text>\n              <Input\n                value={c.maxHP}\n                onChange={(e) => {\n                  c.maxHP = e.target.value;\n                }}\n                variant=\"unstyled\"\n                type=\"number\"\n              />\n            </Box>\n          </HStack>\n          <HStack spacing={0} borderBottom=\"1px\" borderColor=\"gray.200\">\n            <Box p=\"2\" borderRight=\"1px\" borderColor=\"gray.200\">\n              <Text fontSize=\"xx-small\" color=\"gray.400\">\n                先攻加值\n              </Text>\n              <Input\n                value={c.initiative}\n                onChange={(e) => {\n                  c.initiative = e.target.value;\n                }}\n                variant=\"unstyled\"\n                type=\"number\"\n              />\n            </Box>\n            <Box p=\"2\">\n              <Text fontSize=\"xx-small\" color=\"gray.400\">\n                察觉加值\n              </Text>\n              <Input\n                value={c.perception}\n                onChange={(e) => {\n                  c.perception = e.target.value;\n                }}\n                variant=\"unstyled\"\n                type=\"number\"\n              />\n            </Box>\n          </HStack>\n          <HStack p=\"2\" justify=\"flex-start\" align=\"center\" w=\"full\">\n            <Button size=\"xs\" onClick={() => dm.rollInitiative(c)}>\n              投先攻\n            </Button>\n            <Button size=\"xs\" onClick={() => dm.rollPerception(c)}>\n              投察觉\n            </Button>\n            <Button size=\"xs\" onClick={() => dm.heal(c)}>\n              恢复\n            </Button>\n            <Button\n              colorScheme=\"red\"\n              size=\"xs\"\n              onClick={() => {\n                if (confirm('确定移除此人物?')) {\n                  dm.removeCharacter(c);\n                }\n              }}\n            >\n              删除\n            </Button>\n          </HStack>\n        </VStack>\n      )}\n    </Observer>\n  );\n}\n","import { Button, ButtonGroup } from '@chakra-ui/react';\n\ninterface Props<T> {\n  options: Array<{ text: string; value: T; key?: string }>;\n  value: T;\n  onChange: (v: T) => void;\n}\n\nexport default function ButtonSwitch<T = string>({\n  options,\n  value,\n  onChange,\n}: Props<T>): JSX.Element {\n  return (\n    <ButtonGroup isAttached>\n      {options.map(({ text, value: v, key }, i) => (\n        <Button\n          key={key ?? i}\n          onClick={() => onChange(v)}\n          colorScheme={value === v ? 'teal' : 'gray'}\n        >\n          {text}\n        </Button>\n      ))}\n    </ButtonGroup>\n  );\n}\n","import { useState } from 'react';\nimport { Observer } from 'mobx-react-lite';\nimport {\n  Button,\n  ButtonGroup,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Container,\n  SimpleGrid,\n  HStack,\n  Spacer,\n} from '@chakra-ui/react';\nimport { FaChevronDown } from 'react-icons/fa';\n\nimport { useStore } from '../store';\nimport { useIsSmallerScreen } from '../utils/react';\n\nimport DMCharacter from '../components/DM/Character';\nimport ButtonSwitch from '../components/ButtonSwitch';\n\nexport default function DMPage(): JSX.Element {\n  const { dm } = useStore();\n  const [order, setOrder] = useState('normal');\n  const isSmallerScreen = useIsSmallerScreen();\n\n  return (\n    <Container>\n      <HStack w=\"full\" wrap=\"wrap\" spacing={[0, 2]}>\n        <Button\n          mb={[2, 0]}\n          mr={[2, 0]}\n          onClick={() => {\n            dm.addCharacter('无名氏');\n          }}\n        >\n          添加人物\n        </Button>\n        <Button\n          mb={[2, 0]}\n          onClick={() => {\n            dm.addCharacter('敌人');\n          }}\n        >\n          添加敌人\n        </Button>\n        <Spacer />\n        <ButtonGroup isAttached mb={[2, 0]}>\n          <Button onClick={() => dm.rollAllInitiative()}>全员投先攻</Button>\n          <Menu placement=\"bottom-end\">\n            <MenuButton as={IconButton} icon={<FaChevronDown />} aria-label=\"More Action\" />\n            <MenuList>\n              <MenuItem onClick={() => dm.rollAllPerception()}>全员投察觉</MenuItem>\n              <MenuItem onClick={() => dm.healAll()}>全员恢复</MenuItem>\n            </MenuList>\n          </Menu>\n        </ButtonGroup>\n        <ButtonSwitch\n          options={[\n            { text: '创建顺序', value: 'normal' },\n            { text: '先攻顺序', value: 'initiative' },\n          ]}\n          value={order}\n          onChange={(v) => setOrder(v)}\n        />\n      </HStack>\n\n      <Observer>\n        {() => (\n          <SimpleGrid py=\"2\" spacing=\"2\" columns={isSmallerScreen ? 1 : 3}>\n            {(order === 'initiative' ? dm.sortedCharacters : dm.characters).map((c) => (\n              <DMCharacter key={c.id} character={c} />\n            ))}\n          </SimpleGrid>\n        )}\n      </Observer>\n    </Container>\n  );\n}\n","import { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { Box } from '@chakra-ui/react';\n\nimport Navbar from './components/Navbar';\nimport PlayerPage from './pages/PlayerPage';\nimport DMPage from './pages/DMPage';\n\nfunction App(): JSX.Element {\n  return (\n    <Router basename={process.env.NODE_ENV === 'development' ? '/' : '/pathfinder-workbench'}>\n      <Box>\n        <Navbar />\n\n        <Box pt=\"4\">\n          <Switch>\n            <Route path=\"/player\" component={PlayerPage} />\n            <Route path=\"/dm\" component={DMPage} />\n\n            <Redirect to=\"/player\" />\n          </Switch>\n        </Box>\n      </Box>\n    </Router>\n  );\n}\n\nexport default App;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react';\nimport { configure } from 'mobx';\n\nimport { CONTAINER_WIDTH } from './constant';\nimport { StoreContext, Store } from './store';\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconfigure({ enforceActions: 'never' });\n\nconst theme = extendTheme({\n  components: {\n    Container: {\n      baseStyle: {\n        maxW: CONTAINER_WIDTH,\n      },\n    },\n  },\n});\n\nconst store = new Store();\n\nasync function init() {\n  await store.init();\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <ChakraProvider theme={theme}>\n        <StoreContext.Provider value={store}>\n          <App />\n        </StoreContext.Provider>\n      </ChakraProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\ninit();\n\nlet refreshing = false;\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({\n  onUpdate: (registration) => {\n    if (confirm('New version found, update?')) {\n      navigator.serviceWorker.addEventListener('controllerchange', () => {\n        if (refreshing) {\n          return;\n        }\n\n        refreshing = true;\n        window.location.reload();\n      });\n\n      registration.waiting?.postMessage({ type: 'SKIP_WAITING' });\n    }\n  },\n});\n"],"sourceRoot":""}