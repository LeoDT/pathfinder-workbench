{"version":3,"sources":["utils/react.ts","store/collection.ts","store/character.ts","store/index.ts","utils/spell.ts","components/Spell.tsx","components/QuickSearch.tsx","components/QuickSearchToggler.tsx","components/NavLink.tsx","components/Navbar.tsx","components/CollectionEntityPicker.tsx","components/PlayerSpellBook.tsx","pages/PlayerPage.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["createContextNoNullCheck","defaults","context","createContext","c","useContext","Error","Collection","type","data","options","fuse","this","Fuse","includeScore","threshold","keys","searchFields","id","find","s","Character","name","spellbook","shortid","generate","observable","set","Set","deep","JSON","stringify","Array","from","map","spellCollection","json","parse","character","spellId","spell","getById","add","useCurrentCharacter","CurrentCharacterContext","Store","collections","characters","SPELL_DATA","array","a","restore","persist","key","limitEach","result","weapon","forEach","search","limit","autorun","entries","k","v","startsWith","push","length","useStore","StoreContext","translates","school","level","domain","castingTime","components","range","effect","target","area","aiming","duration","saving","resistance","SpellMeta","size","mt","Object","meta","pl","color","width","spellTranslates","Spell","showName","showMeta","showDescription","className","direction","align","book","toUpperCase","as","fontSize","style","fontWeight","pt","whiteSpace","dangerouslySetInnerHTML","__html","description","QuickSearch","store","useState","searchKey","setSearchKey","searchResult","useMemo","quickSearch","flexGrow","flexShrink","mb","Search2","placeholder","autoFocus","value","onChange","e","overflowY","item","border","borderColor","p","borderRadius","QuickSearchToggler","children","useDisclosure","isOpen","onClose","onOpen","onClick","d","flexDir","NavLink","to","theme","useTheme","activeStyle","colors","teal","Navbar","bg","borderBottom","py","alignItems","mr","aria-label","icon","CollectionEntityPicker","collectionEntityType","inputRef","onPick","collection","ref","borderTop","maxH","overflow","cursor","_hover","background","PlayerSpellBook","initialFocusRef","useRef","showSpell","setShowSpell","placement","m","columns","spacing","transition","boxShadow","Delete","confirm","delete","stopPropagation","Boolean","PlayerPage","currentCharacter","Provider","pos","borderRight","SIDEBAR_WIDTH","path","component","App","basename","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configure","enforceActions","extendTheme","Container","baseStyle","maxW","init","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"gSAEO,SAASA,EAA4BC,GAC1C,IAAMC,EAAUC,wBAA6BF,GAY7C,MAAO,CAVP,WACE,IAAMG,EAAIC,qBAAWH,GAErB,GAAiB,qBAANE,EACT,MAAM,IAAIE,MAAM,qDAGlB,OAAOF,GAGIF,G,aCLFK,EAAb,WAME,WAAYC,EAA4BC,EAAgBC,GAA6B,yBALrFF,UAKoF,OAJpFC,UAIoF,OAFpFE,UAEoF,EAClFC,KAAKJ,KAAOA,EACZI,KAAKH,KAAOA,EAEZG,KAAKD,KAAO,IAAIE,IAAKJ,EAAM,CACzBK,cAAc,EACdC,UAAW,GAEXC,KAAMN,EAAQO,eAdpB,2CAkBE,SAAQC,GACN,OAAON,KAAKH,KAAKU,MAAK,SAACC,GAAD,OAAOA,EAAEF,KAAOA,MAAO,SAnBjD,K,yBCHqBG,E,WAKnB,WAAYC,EAAcJ,GAAc,yBAJxCA,QAIuC,OAHvCI,UAGuC,OAFvCC,eAEuC,EACrCX,KAAKU,KAAOA,EACZV,KAAKM,GAAL,OAAUA,QAAV,IAAUA,IAAMM,IAAQC,WACxBb,KAAKW,UAAYG,IAAWC,IAAI,IAAIC,IAAO,CAAEC,MAAM,I,kDAGrD,SAAiBzB,GACf,OAAO0B,KAAKC,UAAU,CACpBb,GAAId,EAAEc,GACNI,KAAMlB,EAAEkB,KACRC,UAAWS,MAAMC,KAAK7B,EAAEmB,WAAWW,KAAI,SAACd,GAAD,OAAOA,EAAEF,U,mBAIpD,SAAaE,EAAWe,GACtB,IADqE,EAC/DC,EAAON,KAAKO,MAAMjB,GAClBkB,EAAY,IAAIjB,EAAUe,EAAKd,KAAMc,EAAKlB,IAFqB,cAI/CkB,EAAKb,WAJ0C,IAIrE,2BAAsC,CAAC,IAA5BgB,EAA2B,QAC9BC,EAAQL,EAAgBM,QAAQF,GAElCC,GACFF,EAAUf,UAAUmB,IAAIF,IARyC,8BAYrE,OAAOF,M,OAImDtC,I,mBAAhD2C,E,KAAqBC,E,KC/BtBC,EAAb,WAKE,aAAe,yBAJfC,iBAIc,OAFdC,gBAEc,EACZnC,KAAKkC,YAAc,CACjB,IAAIvC,EAAkB,QAASyC,EAAY,CACzC/B,aAAc,CAAC,KAAM,WAIzBL,KAAKmC,WAAarB,IAAWuB,MAAM,GAAI,CAAEpB,MAAM,IAZnD,+EAeE,sBAAAqB,EAAA,sEACQtC,KAAKuC,UADb,OAEEvC,KAAKwC,UAFP,gDAfF,+EAoBE,SACEC,GAE0D,IAD1DC,EACyD,uDAD7C,GAENC,EAAkE,CACtEf,MAAO,GACPgB,OAAQ,IAOV,OAJA5C,KAAKkC,YAAYW,SAAQ,SAACrD,GACxBmD,EAAOnD,EAAEI,MAAQJ,EAAEO,KAAK+C,OAAOL,EAAK,CAAEM,MAAOL,OAGxCC,IAjCX,qBAoCE,WAAiB,IAAD,OACdK,aAAQ,WACN,EAAKb,WAAWU,SAAQ,SAACrD,GACvBuB,YAAI,aAAD,OAAcvB,EAAEc,IAAMG,EAAUU,UAAU3B,YAvCrD,4DA4CE,iCAAA8C,EAAA,sEAC0BW,cAD1B,cAGYJ,SAAQ,YAAa,IAAD,mBAAVK,EAAU,KAAPC,EAAO,KACX,kBAAND,GAAkBA,EAAEE,WAAW,cACxC,EAAKjB,WAAWkB,KAAK5C,EAAUgB,MAAM0B,EAAG,EAAKjB,YAAY,QAIzDlC,KAAKmC,WAAWmB,OAAS,GAC3BtD,KAAKmC,WAAWkB,KAAK,IAAI5C,EAAU,YAVvC,gDA5CF,6D,EA2DwCrB,I,mBAA1BmE,E,KAAUC,E,sLCtEXC,EAAa,CACxBC,OAAQ,eACRC,MAAO,eACPC,OAAQ,eACRC,YAAa,2BACbC,WAAY,eACZC,MAAO,eACPC,OAAQ,eACRC,OAAQ,eACRC,KAAM,eACNC,OAAQ,+CACRC,SAAU,2BACVC,OAAQ,eACRC,WAAY,4B,QCCP,SAASC,GAAT,GAAmD,IAA9B3C,EAA6B,EAA7BA,MAC1B,OACE,eAAC,IAAD,CAAO4C,KAAK,KAAKC,GAAG,IAApB,SACE,eAAC,IAAD,UACIC,OAAOtE,KAAKwB,EAAM+C,MAAqCrD,KAAI,SAAC4B,GAAD,OAC3D,gBAAC,IAAD,WACE,eAAC,IAAD,CAAI0B,GAAG,IAAIC,MAAM,WAAWC,MAAM,MAAlC,SACGC,EAAgB7B,KAEnB,eAAC,IAAD,UAAKtB,EAAM+C,KAAKzB,OAJTA,UAYJ,SAAS8B,GAAT,GAKS,IAJtBpD,EAIqB,EAJrBA,MAIqB,IAHrBqD,gBAGqB,aAFrBC,gBAEqB,aADrBC,uBACqB,SACrB,OACE,gBAAC,IAAD,CAAKC,UAAU,QAAf,UACGH,EACC,gBAAC,IAAD,CAAOI,UAAU,MAAMC,MAAM,SAA7B,UACE,eAAC,IAAD,UAAQ1D,EAAM2D,KAAKC,gBACnB,gBAAC,IAAD,CAASC,GAAG,KAAKC,SAAS,KAAKb,MAAM,aAArC,UACGjD,EAAMlB,KADT,IACe,yBAAOiF,MAAO,CAAEC,WAAY,UAA5B,cAA0ChE,EAAMtB,GAAhD,aAGf,KAEH4E,EAAW,eAACX,GAAD,CAAW3C,MAAOA,IAAY,KAEzCuD,EACC,eAAC,IAAD,CACEU,GAAG,IACHC,WAAW,WACXC,wBAAyB,CAAEC,OAAQpE,EAAMqE,aACzCb,UAAU,sBAEV,QCjDK,SAASc,KACtB,IAAMC,EAAQ5C,IADmC,EAEf6C,mBAAS,IAFM,mBAE1CC,EAF0C,KAE/BC,EAF+B,KAG3CC,EAAeC,mBAAQ,kBAAML,EAAMM,YAAYJ,KAAY,CAACA,IAElE,OACE,uCACE,eAAC,IAAD,CAAKK,SAAU,EAAGC,WAAY,EAAGC,GAAG,IAApC,SACE,gBAAC,IAAD,WACE,eAAC,IAAD,UACE,eAACC,EAAA,EAAD,CAAahC,MAAM,eAErB,eAAC,IAAD,CACEiC,YAAY,kBACZC,WAAS,EACTC,MAAOX,EACPY,SAAU,SAACC,GACTZ,EAAaY,EAAEjD,OAAO+C,eAK9B,eAAC,IAAD,CAAKN,SAAU,EAAGS,UAAU,OAA5B,SACGZ,EAAa3E,MAAMN,KAAI,gBAAG8F,EAAH,EAAGA,KAAH,OACtB,eAAC,IAAD,CAAmBR,GAAG,IAAIS,OAAO,MAAMC,YAAY,WAAWC,EAAE,IAAIC,aAAa,KAAjF,SACE,eAAC,GAAD,CAAO5F,MAAOwF,KADNA,EAAK9G,YChBV,SAASmH,GAAT,GAA+D,IAAjCC,EAAgC,EAAhCA,SAAgC,EACvCC,cAA5BC,EADmE,EACnEA,OAAQC,EAD2D,EAC3DA,QAASC,EADkD,EAClDA,OAEzB,OACE,uCACE,uBAAMC,QAASD,EAAf,SAAwBJ,IAExB,eAAC,IAAD,CAAQE,OAAQA,EAAQC,QAASA,EAASrD,KAAK,KAA/C,SACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,2BACA,eAAC,IAAD,CAAYwD,EAAE,OAAOC,QAAQ,SAA7B,SACE,eAAC/B,GAAD,MAEF,eAAC,IAAD,c,aCtBG,SAASgC,GAAT,GAAwD,IAArCC,EAAoC,EAApCA,GAAIT,EAAgC,EAAhCA,SAC9BU,EAAQC,eAEd,OACE,eAAC,IAAD,CAAeF,GAAIA,EAAIG,YAAa,CAAEzD,MAAOuD,EAAMG,OAAOC,KAAK,MAA/D,SACGd,ICPQ,SAASe,KACtB,OACE,eAAC,IAAD,CAAKC,GAAG,QAAQC,aAAa,MAAMrB,YAAY,WAAWsB,GAAI,EAA9D,SACE,eAAC,IAAD,UACE,gBAAC,IAAD,CAAMC,WAAW,SAAjB,UACE,eAAC,IAAD,CAASpD,GAAG,KAAKC,SAAS,UAAUoD,GAAG,IAAvC,kCAGA,eAACZ,GAAD,CAASC,GAAG,UAAZ,oBACA,eAAC,IAAD,IACA,eAACV,GAAD,UACE,eAAC,IAAD,CAAYsB,aAAW,eAAevE,KAAK,KAAKwE,KAAM,eAACnC,EAAA,EAAD,e,gECHnD,SAASoC,GAAT,GAIS,IAHtBC,EAGqB,EAHrBA,qBACAC,EAEqB,EAFrBA,SACAC,EACqB,EADrBA,OAEMjD,EAAQ5C,IADO,EAEa6C,mBAAS,IAFtB,mBAEdC,EAFc,KAEHC,EAFG,KAGfC,EAAeC,mBAAQ,WAC3B,IAAM6C,EAAalD,EAAMjE,YAAY3B,MAAK,SAACf,GAAD,OAAOA,EAAEI,OAASsJ,KAE5D,OAAiB,OAAVG,QAAU,IAAVA,OAAA,EAAAA,EAAYtJ,KAAK+C,OAAOuD,KAAc,KAC5C,CAACA,IAEJ,OACE,gBAAC,IAAD,WACE,gBAAC,IAAD,WACE,eAAC,IAAD,UACE,eAACQ,EAAA,EAAD,CAAahC,MAAM,eAErB,eAAC,IAAD,CACEyE,IAAKH,EACLrC,YAAY,SACZC,WAAS,EACTC,MAAOX,EACPY,SAAU,SAACC,GACTZ,EAAaY,EAAEjD,OAAO+C,aAI3BT,EAAajD,OAAS,EACrB,eAAC,IAAD,CAAKiG,UAAU,MAAMjC,YAAY,WAAW7C,GAAG,IAAI+E,KAAM,IAAKC,SAAS,OAAvE,SACGlD,EAAajF,KAAI,gBAAG8F,EAAH,EAAGA,KAAH,OAChB,gBAAC,IAAD,CAEEW,QAAS,kBAAMqB,EAAOhC,IACtBG,EAAE,IACFoB,aAAa,MACbrB,YAAY,WACZoC,OAAO,UACPC,OAAQ,CACNC,WAAY,YARhB,UAWGxC,EAAK1G,KAXR,KAWgB0G,EAAK9G,GAXrB,MACO8G,EAAK9G,SAcd,QClCK,SAASuJ,KACtB,IAAMC,EAAkBC,iBAAyB,MAC3CrI,EAAYK,IAFmC,EAGnBqE,qBAHmB,mBAG9C4D,EAH8C,KAGnCC,EAHmC,KAKrD,OACE,uCACE,gBAAC,KAAD,CAASH,gBAAiBA,EAAiBI,UAAU,eAArD,UACE,eAAC,KAAD,UACE,eAAC,KAAD,CAAQ1F,KAAK,KAAb,yBAEF,eAAC,KAAD,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,IACA,eAACyE,GAAD,CACEC,qBAAqB,QACrBC,SAAUW,EACVV,OAAQ,SAAChC,GACP1F,EAAUf,UAAUmB,IAAIsF,cAMlC,eAAC,KAAD,CAAS+C,EAAE,MACX,eAAC,KAAD,UACG,kBACC,eAAC,KAAD,CAAYC,QAAS,EAAGC,QAAQ,IAAhC,SACGjJ,MAAMC,KAAKK,EAAUf,WAAWW,KAAI,SAACM,GAAD,OACnC,gBAAC,IAAD,CAEE8H,OAAO,UACPY,WAAW,8BACXX,OAAQ,CAAEY,UAAW,QACrBlD,OAAO,MACPC,YAAY,WACZC,EAAE,IACFC,aAAa,KACbO,QAAS,kBAAMkC,EAAarI,IAC5B0D,MAAM,SAVR,UAYE,eAAC,GAAD,CAAO1D,MAAOA,EAAOsD,UAAU,EAAOC,iBAAiB,IACvD,eAAC,IAAD,IACA,eAACqF,GAAA,EAAD,CACE3F,MAAM,UACNyF,WAAW,yBACXX,OAAQ,CAAE9E,MAAO,WACjBkD,QAAS,SAACb,GACJuD,QAAQ,kBACV/I,EAAUf,UAAU+J,OAAO9I,GAE7BsF,EAAEyD,uBArBD/I,EAAMtB,YA8BrB,eAAC,IAAD,CACEsH,OAAQgD,QAAQZ,GAChBnC,QAAS,WACPoC,EAAa,OAEfzF,KAAK,KALP,SAOE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,UAAawF,EAAY,eAAC,GAAD,CAAOpI,MAAOoI,IAAgB,OACvD,eAAC,IAAD,cCtFG,SAASa,KACtB,IAAM1E,EAAQ5C,IADkC,EAErB6C,oBAAS,kBAAMD,EAAMhE,WAAW,MAApD2I,EAFyC,oBAIhD,OACE,eAAC9I,EAAwB+I,SAAzB,CAAkC/D,MAAO8D,EAAzC,SACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAKE,IAAI,QAAQlG,MATH,IASyBmG,YAAY,MAAM3D,YAAY,WAArE,SACE,eAAC,IAAD,UACE,eAACY,GAAD,CAASC,GAAG,oBAAZ,4BAGJ,eAAC,IAAD,CAAKvD,GAAIsG,IAAT,SACE,eAAC,IAAD,CAAOC,KAAK,oBAAoBC,UAAWvB,YCJtCwB,OAdf,WACE,OACE,eAAC,IAAD,CAAQC,SAAyD,wBAAjE,SACE,gBAAC,IAAD,WACE,eAAC7C,GAAD,IAEA,eAAC,IAAD,CAAK5C,GAAG,IAAR,SACE,eAAC,IAAD,CAAOsF,KAAK,UAAUC,UAAWP,aCDrCU,GAAcX,QACW,cAA7BY,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,GAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCjGjE,IAYeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCEdO,YAAU,CAAEC,eAAgB,UAE5B,IAAMrF,GAAQsF,YAAY,CACxB5J,WAAY,CACV6J,UAAW,CACTC,UAAW,CACTC,KAAM,cAMR1H,GAAQ,IAAIlE,E,8CAElB,sBAAAK,EAAA,sEACQ6D,GAAM2H,OADd,OAGEC,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAgB7F,MAAOA,GAAvB,SACE,eAAC5E,EAAauH,SAAd,CAAuB/D,MAAOb,GAA9B,SACE,eAAC,GAAD,UAIN+H,SAASC,eAAe,SAX5B,4C,2DAeAL,GFfO,SAAkBhC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqC,IAAIC,wBAAwB7C,OAAOC,SAAS6C,MACpDC,SAAW/C,OAAOC,SAAS8C,OAIvC,OAGF/C,OAAOgD,iBAAiB,QAAQ,WAC9B,IAAM3C,EAAK,UAAMwC,wBAAN,sBAEP9C,KAgEV,SAAiCM,EAAeC,GAE9C2C,MAAM5C,EAAO,CACX6C,QAAS,CAAE,iBAAkB,YAE5BxC,MAAK,SAACyC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChD,UAAUC,cAAcgD,MAAM9C,MAAK,SAACC,GAClCA,EAAa8C,aAAa/C,MAAK,WAC7BV,OAAOC,SAASyD,eAKpBtD,GAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVwC,CAAwBtD,EAAOC,GAI/BC,UAAUC,cAAcgD,MAAM9C,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,GAAgBC,EAAOC,OER/BsD,GAKApC,M","file":"static/js/main.60ba5940.chunk.js","sourcesContent":["import { createContext, useContext } from 'react';\n\nexport function createContextNoNullCheck<T>(defaults?: T): [() => T, React.Context<T | undefined>] {\n  const context = createContext<T | undefined>(defaults);\n\n  function use(): T {\n    const c = useContext(context);\n\n    if (typeof c === 'undefined') {\n      throw new Error('useContext must be inside a Provider with a value');\n    }\n\n    return c;\n  }\n\n  return [use, context];\n}\n","import Fuse from 'fuse.js';\n\nimport { Entity } from './types';\n\nexport type CollectionEntityType = 'spell' | 'weapon';\n\nexport interface CollectionOptions {\n  searchFields: Array<string>;\n}\n\nexport class Collection<T extends Entity = Entity> {\n  type: CollectionEntityType;\n  data: Array<T>;\n\n  fuse: Fuse<T>;\n\n  constructor(type: CollectionEntityType, data: Array<T>, options: CollectionOptions) {\n    this.type = type;\n    this.data = data;\n\n    this.fuse = new Fuse(data, {\n      includeScore: true,\n      threshold: 0.2,\n\n      keys: options.searchFields,\n    });\n  }\n\n  getById(id: string): T | null {\n    return this.data.find((s) => s.id === id) || null;\n  }\n}\n","import { observable, ObservableSet } from 'mobx';\nimport shortid from 'shortid';\n\nimport { createContextNoNullCheck } from '../utils/react';\nimport { Collection } from './collection';\nimport { Spell } from './types';\n\nexport default class Character {\n  id: string;\n  name: string;\n  spellbook: ObservableSet<Spell>;\n\n  constructor(name: string, id?: string) {\n    this.name = name;\n    this.id = id ?? shortid.generate();\n    this.spellbook = observable.set(new Set(), { deep: false });\n  }\n\n  static stringify(c: Character): string {\n    return JSON.stringify({\n      id: c.id,\n      name: c.name,\n      spellbook: Array.from(c.spellbook).map((s) => s.id),\n    });\n  }\n\n  static parse(s: string, spellCollection: Collection<Spell>): Character {\n    const json = JSON.parse(s);\n    const character = new Character(json.name, json.id);\n\n    for (const spellId of json.spellbook) {\n      const spell = spellCollection.getById(spellId);\n\n      if (spell) {\n        character.spellbook.add(spell);\n      }\n    }\n\n    return character;\n  }\n}\n\nexport const [useCurrentCharacter, CurrentCharacterContext] = createContextNoNullCheck<Character>();\n","import Fuse from 'fuse.js';\nimport { observable, IObservableArray, autorun } from 'mobx';\nimport { set, entries } from 'idb-keyval';\n\nimport SPELL_DATA from '../data/spells.json';\nimport { createContextNoNullCheck } from '../utils/react';\n\nimport { Entity, Spell } from './types';\nimport { Collection, CollectionEntityType } from './collection';\nimport Character from './character';\n\nexport class Store {\n  collections: Array<Collection>;\n\n  characters: IObservableArray<Character>;\n\n  constructor() {\n    this.collections = [\n      new Collection<Spell>('spell', SPELL_DATA, {\n        searchFields: ['id', 'name'],\n      }),\n    ];\n\n    this.characters = observable.array([], { deep: false });\n  }\n\n  async init(): Promise<void> {\n    await this.restore();\n    this.persist();\n  }\n\n  quickSearch(\n    key: string,\n    limitEach = 20\n  ): Record<CollectionEntityType, Fuse.FuseResult<Entity>[]> {\n    const result: Record<CollectionEntityType, Fuse.FuseResult<Entity>[]> = {\n      spell: [],\n      weapon: [],\n    };\n\n    this.collections.forEach((c) => {\n      result[c.type] = c.fuse.search(key, { limit: limitEach });\n    });\n\n    return result;\n  }\n\n  persist(): void {\n    autorun(() => {\n      this.characters.forEach((c) => {\n        set(`character:${c.id}`, Character.stringify(c));\n      });\n    });\n  }\n\n  async restore(): Promise<void> {\n    const persisted = await entries();\n\n    persisted.forEach(([k, v]) => {\n      if (typeof k === 'string' && k.startsWith('character')) {\n        this.characters.push(Character.parse(v, this.collections[0] as Collection<Spell>));\n      }\n    });\n\n    if (this.characters.length < 1) {\n      this.characters.push(new Character('Default'));\n    }\n  }\n}\n\nexport const [useStore, StoreContext] = createContextNoNullCheck<Store>();\n","export const translates = {\n  school: '学派',\n  level: '环位',\n  domain: '领域',\n  castingTime: '施法时间',\n  components: '成分',\n  range: '距离',\n  effect: '效果',\n  target: '目标',\n  area: '区域',\n  aiming: '目标, 区域或区域',\n  duration: '持续时间',\n  saving: '豁免',\n  resistance: '法术抗力',\n};\n","import './Spell.scss';\n\nimport { Box, Heading, Badge, Text, Stack, Table, Tbody, Tr, Td } from '@chakra-ui/react';\n\nimport { Spell as SpellType, SpellMeta as SpellMetaType } from '../store/types';\nimport { translates as spellTranslates } from '../utils/spell';\n\ninterface Props {\n  spell: SpellType;\n  showName?: boolean;\n  showMeta?: boolean;\n  showDescription?: boolean;\n}\n\nexport function SpellMeta({ spell }: Props): JSX.Element {\n  return (\n    <Table size=\"sm\" mt=\"2\">\n      <Tbody>\n        {(Object.keys(spell.meta) as Array<keyof SpellMetaType>).map((k) => (\n          <Tr key={k}>\n            <Td pl=\"0\" color=\"blue.500\" width=\"8em\">\n              {spellTranslates[k]}\n            </Td>\n            <Td>{spell.meta[k]}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n}\n\nexport default function Spell({\n  spell,\n  showName = true,\n  showMeta = true,\n  showDescription = true,\n}: Props): JSX.Element {\n  return (\n    <Box className=\"spell\">\n      {showName ? (\n        <Stack direction=\"row\" align=\"center\">\n          <Badge>{spell.book.toUpperCase()}</Badge>\n          <Heading as=\"h4\" fontSize=\"lg\" color=\"purple.600\">\n            {spell.name} <small style={{ fontWeight: 'normal' }}>({spell.id})</small>\n          </Heading>\n        </Stack>\n      ) : null}\n\n      {showMeta ? <SpellMeta spell={spell} /> : null}\n\n      {showDescription ? (\n        <Text\n          pt=\"1\"\n          whiteSpace=\"pre-wrap\"\n          dangerouslySetInnerHTML={{ __html: spell.description }}\n          className=\"spell-description\"\n        />\n      ) : null}\n    </Box>\n  );\n}\n","import { useMemo, useState } from 'react';\nimport { Box, InputGroup, Input, InputLeftElement } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\n\nimport { useStore } from '../store';\nimport { Spell as SpellType } from '../store/types';\nimport Spell from './Spell';\n\nexport default function QuickSearch(): JSX.Element {\n  const store = useStore();\n  const [searchKey, setSearchKey] = useState('');\n  const searchResult = useMemo(() => store.quickSearch(searchKey), [searchKey]);\n\n  return (\n    <>\n      <Box flexGrow={0} flexShrink={0} mb=\"2\">\n        <InputGroup>\n          <InputLeftElement>\n            <Search2Icon color=\"gray.400\" />\n          </InputLeftElement>\n          <Input\n            placeholder=\"Search Anything\"\n            autoFocus\n            value={searchKey}\n            onChange={(e) => {\n              setSearchKey(e.target.value);\n            }}\n          />\n        </InputGroup>\n      </Box>\n      <Box flexGrow={1} overflowY=\"auto\">\n        {searchResult.spell.map(({ item }) => (\n          <Box key={item.id} mb=\"2\" border=\"1px\" borderColor=\"gray.200\" p=\"2\" borderRadius=\"md\">\n            <Spell spell={item as SpellType} />\n          </Box>\n        ))}\n      </Box>\n    </>\n  );\n}\n","import {\n  Drawer,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerBody,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nimport QuickSearch from './QuickSearch';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nexport default function QuickSearchToggler({ children }: Props): JSX.Element {\n  const { isOpen, onClose, onOpen } = useDisclosure();\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Drawer isOpen={isOpen} onClose={onClose} size=\"lg\">\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerHeader>Quick Search</DrawerHeader>\n            <DrawerBody d=\"flex\" flexDir=\"column\">\n              <QuickSearch />\n            </DrawerBody>\n            <DrawerCloseButton />\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  );\n}\n","import { useTheme } from '@chakra-ui/react';\nimport { NavLink as RouterNavLink } from 'react-router-dom';\n\ninterface Props {\n  to: string;\n  children: JSX.Element | string;\n}\n\nexport default function NavLink({ to, children }: Props): JSX.Element {\n  const theme = useTheme();\n\n  return (\n    <RouterNavLink to={to} activeStyle={{ color: theme.colors.teal[400] }}>\n      {children}\n    </RouterNavLink>\n  );\n}\n","import { Box, Heading, Container, Flex, Spacer, IconButton } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\n\nimport QuickSearchToggler from './QuickSearchToggler';\nimport NavLink from './NavLink';\n\nexport default function Navbar(): JSX.Element {\n  return (\n    <Box bg=\"white\" borderBottom=\"1px\" borderColor=\"gray.300\" py={3}>\n      <Container>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h1\" fontSize=\"initial\" mr=\"8\">\n            Pathfinder Workbench\n          </Heading>\n          <NavLink to=\"/player\">Player</NavLink>\n          <Spacer />\n          <QuickSearchToggler>\n            <IconButton aria-label=\"Quick Search\" size=\"sm\" icon={<Search2Icon />} />\n          </QuickSearchToggler>\n        </Flex>\n      </Container>\n    </Box>\n  );\n}\n","import { useMemo, useState, MutableRefObject } from 'react';\nimport { Box, InputGroup, Input, InputLeftElement } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\n\nimport { useStore } from '../store';\nimport { CollectionEntityType } from '../store/collection';\nimport { Entity } from '../store/types';\n\ninterface Props {\n  collectionEntityType: CollectionEntityType;\n  onPick: (entity: Entity) => void;\n  inputRef?: MutableRefObject<HTMLInputElement | null>;\n}\n\nexport default function CollectionEntityPicker({\n  collectionEntityType,\n  inputRef,\n  onPick,\n}: Props): JSX.Element {\n  const store = useStore();\n  const [searchKey, setSearchKey] = useState('');\n  const searchResult = useMemo(() => {\n    const collection = store.collections.find((c) => c.type === collectionEntityType);\n\n    return collection?.fuse.search(searchKey) || [];\n  }, [searchKey]);\n\n  return (\n    <Box>\n      <InputGroup>\n        <InputLeftElement>\n          <Search2Icon color=\"gray.400\" />\n        </InputLeftElement>\n        <Input\n          ref={inputRef}\n          placeholder=\"Search\"\n          autoFocus\n          value={searchKey}\n          onChange={(e) => {\n            setSearchKey(e.target.value);\n          }}\n        />\n      </InputGroup>\n      {searchResult.length > 0 ? (\n        <Box borderTop=\"1px\" borderColor=\"gray.100\" mt=\"2\" maxH={300} overflow=\"auto\">\n          {searchResult.map(({ item }) => (\n            <Box\n              key={item.id}\n              onClick={() => onPick(item)}\n              p=\"2\"\n              borderBottom=\"1px\"\n              borderColor=\"gray.200\"\n              cursor=\"pointer\"\n              _hover={{\n                background: 'gray.100',\n              }}\n            >\n              {item.name} ({item.id})\n            </Box>\n          ))}\n        </Box>\n      ) : null}\n    </Box>\n  );\n}\n","import {\n  Button,\n  Flex,\n  Spacer,\n  Divider,\n  SimpleGrid,\n  PopoverTrigger,\n  Popover,\n  PopoverContent,\n  PopoverBody,\n  PopoverArrow,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerBody,\n} from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { useRef, useState } from 'react';\nimport { Observer } from 'mobx-react-lite';\n\nimport CollectionEntityPicker from './CollectionEntityPicker';\n\nimport { Spell as SpellType } from '../store/types';\nimport { useCurrentCharacter } from '../store/character';\nimport Spell from './Spell';\n\nexport default function PlayerSpellBook(): JSX.Element {\n  const initialFocusRef = useRef<HTMLInputElement>(null);\n  const character = useCurrentCharacter();\n  const [showSpell, setShowSpell] = useState<SpellType | null>();\n\n  return (\n    <>\n      <Popover initialFocusRef={initialFocusRef} placement=\"bottom-start\">\n        <PopoverTrigger>\n          <Button size=\"sm\">Add Spell</Button>\n        </PopoverTrigger>\n        <PopoverContent>\n          <PopoverBody>\n            <PopoverArrow />\n            <CollectionEntityPicker\n              collectionEntityType=\"spell\"\n              inputRef={initialFocusRef}\n              onPick={(item) => {\n                character.spellbook.add(item as SpellType);\n              }}\n            />\n          </PopoverBody>\n        </PopoverContent>\n      </Popover>\n      <Divider m=\"2\" />\n      <Observer>\n        {() => (\n          <SimpleGrid columns={3} spacing=\"2\">\n            {Array.from(character.spellbook).map((spell) => (\n              <Flex\n                key={spell.id}\n                cursor=\"pointer\"\n                transition=\"box-shadow 0.2s ease-in-out\"\n                _hover={{ boxShadow: 'base' }}\n                border=\"1px\"\n                borderColor=\"gray.200\"\n                p=\"2\"\n                borderRadius=\"md\"\n                onClick={() => setShowSpell(spell)}\n                align=\"center\"\n              >\n                <Spell spell={spell} showMeta={false} showDescription={false} />\n                <Spacer />\n                <DeleteIcon\n                  color=\"red.500\"\n                  transition=\"color 0.2s ease-in-out\"\n                  _hover={{ color: 'red.600' }}\n                  onClick={(e) => {\n                    if (confirm('Are you sure?')) {\n                      character.spellbook.delete(spell);\n                    }\n                    e.stopPropagation();\n                  }}\n                />\n              </Flex>\n            ))}\n          </SimpleGrid>\n        )}\n      </Observer>\n\n      <Drawer\n        isOpen={Boolean(showSpell)}\n        onClose={() => {\n          setShowSpell(null);\n        }}\n        size=\"lg\"\n      >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerBody>{showSpell ? <Spell spell={showSpell} /> : null}</DrawerBody>\n            <DrawerCloseButton />\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  );\n}\n","import { Box, Container } from '@chakra-ui/react';\nimport { Route } from 'react-router-dom';\n\nimport { CurrentCharacterContext } from '../store/character';\nimport NavLink from '../components/NavLink';\nimport PlayerSpellBook from '../components/PlayerSpellBook';\nimport { useState } from 'react';\nimport { useStore } from '../store';\n\nconst SIDEBAR_WIDTH = 140;\n\nexport default function PlayerPage(): JSX.Element {\n  const store = useStore();\n  const [currentCharacter] = useState(() => store.characters[0]);\n\n  return (\n    <CurrentCharacterContext.Provider value={currentCharacter}>\n      <Container>\n        <Box pos=\"fixed\" width={SIDEBAR_WIDTH} borderRight=\"1px\" borderColor=\"gray.400\">\n          <Box>\n            <NavLink to=\"/player/spellBook\">Spell Book</NavLink>\n          </Box>\n        </Box>\n        <Box pl={SIDEBAR_WIDTH + 20}>\n          <Route path=\"/player/spellbook\" component={PlayerSpellBook} />\n        </Box>\n      </Container>\n    </CurrentCharacterContext.Provider>\n  );\n}\n","import { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Box } from '@chakra-ui/react';\n\nimport Navbar from './components/Navbar';\nimport PlayerPage from './pages/PlayerPage';\n\nfunction App(): JSX.Element {\n  return (\n    <Router basename={process.env.NODE_ENV === 'development' ? '/' : '/pathfinder-workbench'}>\n      <Box>\n        <Navbar />\n\n        <Box pt=\"4\">\n          <Route path=\"/player\" component={PlayerPage} />\n        </Box>\n      </Box>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react';\nimport { configure } from 'mobx';\n\nimport { StoreContext, Store } from './store';\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nconfigure({ enforceActions: 'never' });\n\nconst theme = extendTheme({\n  components: {\n    Container: {\n      baseStyle: {\n        maxW: '1024px',\n      },\n    },\n  },\n});\n\nconst store = new Store();\n\nasync function init() {\n  await store.init();\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <ChakraProvider theme={theme}>\n        <StoreContext.Provider value={store}>\n          <App />\n        </StoreContext.Provider>\n      </ChakraProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\ninit();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}