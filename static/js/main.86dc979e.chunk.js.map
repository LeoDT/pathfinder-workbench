{"version":3,"sources":["constant.ts","utils/react.ts","store/types.ts","store/dm.ts","store/collection.ts","utils/ability.ts","store/character.ts","store/index.ts","utils/entity.ts","utils/spell.ts","components/Spell.tsx","utils/feat.ts","components/Feat.tsx","components/QuickSearch.tsx","components/QuickSearchToggler.tsx","components/NavLink.tsx","components/Navbar.tsx","components/AbilityIcon.tsx","components/AbilityInput.tsx","components/CollectionEntitySelect.tsx","components/Select.tsx","components/Player/CharacterBasic.tsx","components/CollectionEntityPicker.tsx","components/Player/CharacterSpellbook.tsx","pages/PlayerPage.tsx","utils/misc.ts","components/DM/Character.tsx","components/ButtonSwitch.tsx","pages/DMPage.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["ENTITY_COLORS","spell","feat","weapon","createContextNoNullCheck","defaults","context","createContext","c","useContext","Error","useIsSmallerScreen","useMediaQuery","CONTAINER_WIDTH","AbilityType","DMStore","characters","makeObservable","this","rollAllInitiative","action","healAll","sortedCharacters","computed","observable","array","sort","a","b","ac","parseInt","initiative","rolledInitiative","name","push","id","shortid","getNonConflictName","hp","maxHP","remove","Math","ceil","random","forEach","rollInitiative","existed","filter","startsWith","length","Collection","type","data","options","fuse","Fuse","includeScore","threshold","keys","searchFields","find","s","collections","race","RACE_DATA","SPELL_DATA","FEAT_DATA","class","CLASS_DATA","ABILITY_TYPES","str","dex","con","int","wis","cha","abilityTranslates","getModifierFromScore","score","floor","showModifier","mod","ABILITY_COST","7","8","9","10","11","12","13","14","15","16","17","18","getScoreCost","Character","baseAbility","bonusAbilityType","raceId","classId","spellbookIds","abilityModifier","abilityCost","bonusAbility","setRace","spellbook","generate","set","Set","deep","base","bonus","addBonusScores","ab","ability","mapValues","Object","values","map","v","reduce","acc","isEmpty","getById","Array","from","t","Boolean","JSON","stringify","pick","serializableProps","json","parse","useCurrentCharacter","CurrentCharacterContext","Store","dm","restore","persist","key","limitEach","search","limit","autorun","entries","k","replace","useStore","StoreContext","entityTypeTranslates","translates","school","level","domain","castingTime","components","range","effect","target","area","aiming","duration","saving","resistance","SpellMeta","size","mt","meta","pl","color","width","spellTranslates","Spell","showName","showMeta","showDescription","className","direction","align","book","toUpperCase","as","fontSize","style","fontWeight","pt","whiteSpace","dangerouslySetInnerHTML","__html","description","featTranslates","requirement","benefit","normal","special","FeatMeta","Feat","showBrief","fontStyle","brief","QuickSearchResultItem","item","el","mb","border","borderColor","p","borderRadius","_hover","boxShadow","transition","QuickSearch","store","useState","searchKey","setSearchKey","searchResult","useMemo","quickSearch","currentType","setCurrentType","isSmallerScreen","resultType","results","flexGrow","flexShrink","Search2","placeholder","autoFocus","value","onChange","e","matchWidth","autoSelect","Button","rightIcon","ChevronDown","variant","colorScheme","onClick","r","bgColor","cursor","opacity","overflowY","QuickSearchToggler","children","useDisclosure","isOpen","onClose","onOpen","d","flexDir","NavLink","to","props","match","useRouteMatch","RouterLink","Navbar","bg","borderBottom","py","alignItems","mr","aria-label","icon","icons","GiFist","GiBullseye","GiShield","GiBrain","GiAerialSignal","GiFlyingFlag","AbilityIcon","w","h","AbilityNumber","number","text","spacing","textAlign","lineHeight","AbilityInput","max","min","racial","isIncreaseDisabled","fontFamily","isAttached","isDisabled","CollectionEntitySelect","collection","placement","FaCheck","undefined","Select","o","i","CharacterBasic","character","maxW","remainPoints","my","resetBaseAbility","CollectionEntityPicker","inputRef","onPick","ref","borderTop","maxH","overflow","background","CharacterSpellbook","initialFocusRef","useRef","showSpell","setShowSpell","add","columns","Delete","confirm","delete","stopPropagation","NAV_LINKS","url","PlayerPage","currentCharacter","showMenuNav","currentMenuNavItem","setCurrentMenuNavItem","location","useLocation","history","useHistory","useEffect","navLink","pathname","Provider","n","pos","borderRight","SIDEBAR_WIDTH","path","component","stringToColor","hash","charCodeAt","toString","substr","top","justify","heal","removeCharacter","ButtonSwitch","DMPage","order","setOrder","addCharacter","App","basename","isLocalhost","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configure","enforceActions","theme","extendTheme","Container","baseStyle","init","ReactDOM","render","StrictMode","document","getElementById","refreshing","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","waiting","postMessage"],"mappings":"ot49GAEaA,EAAwC,CACnDC,MAAO,aACPC,KAAM,UACNC,OAAQ,c,yCCAH,SAASC,EAA4BC,GAC1C,IAAMC,EAAUC,wBAA6BF,GAY7C,MAAO,CAVP,WACE,IAAMG,EAAIC,qBAAWH,GAErB,GAAiB,qBAANE,EACT,MAAM,IAAIE,MAAM,qDAGlB,OAAOF,GAGIF,GAGR,SAASK,IACd,OAAOC,YAAc,eAAD,OAAgBC,KAAhB,QAA0C,G,ICtBpDC,E,yBCYSC,E,WAGnB,aAAe,yBAFfC,gBAEc,EACZC,YAAeC,KAAM,CACnBC,kBAAmBC,IACnBC,QAASD,IACTE,iBAAkBC,MAGpBL,KAAKF,WAAaQ,IAAWC,MAAM,I,kDAGrC,WACE,OAAO,YAAIP,KAAKF,YAAYU,MAAK,SAACC,EAAGC,GACnC,IAAMC,EAAKC,SAASH,EAAEI,YAAcJ,EAAEK,iBAGtC,OAFWF,SAASF,EAAEG,YAAcH,EAAEI,iBAE1BH,O,0BAIhB,SAAaI,GACXf,KAAKF,WAAWkB,KAAK,CACnBC,GAAIC,MACJH,KAAMf,KAAKmB,mBAAmBJ,GAC9BF,WAAY,IACZO,GAAI,IACJC,MAAO,KACPP,iBAAkB,M,6BAItB,SAAgBxB,GACdU,KAAKF,WAAWwB,OAAOhC,K,4BAGzB,SAAeA,GACbA,EAAEwB,iBAAmBS,KAAKC,KAAqB,GAAhBD,KAAKE,Y,+BAGtC,WAA2B,IAAD,OACxBzB,KAAKF,WAAW4B,SAAQ,SAACpC,GAAD,OAAO,EAAKqC,eAAerC,Q,kBAGrD,SAAKA,GACHA,EAAE8B,GAAK9B,EAAE+B,Q,qBAEX,WACErB,KAAKF,WAAW4B,SAAQ,SAACpC,GACvBA,EAAE8B,GAAK9B,EAAE+B,W,gCAIb,SAAmBN,GACjB,IAAMa,EAAU5B,KAAKF,WAAW+B,QAAO,SAACvC,GAAD,OAAOA,EAAEyB,KAAKe,WAAWf,MAEhE,MAAM,GAAN,OAAUA,EAAV,YAAkBa,EAAQG,OAAS,O,kDCtD1BC,EAAb,WAME,WAAYC,EAA4BC,EAAgBC,GAA6B,yBALrFF,UAKoF,OAJpFC,UAIoF,OAFpFE,UAEoF,EAClFpC,KAAKiC,KAAOA,EACZjC,KAAKkC,KAAOA,EAEZlC,KAAKoC,KAAO,IAAIC,IAAKH,EAAM,CACzBI,cAAc,EACdC,UAAW,GAEXC,KAAML,EAAQM,eAdpB,2CAkBE,SAAQxB,GACN,OAAOjB,KAAKkC,KAAKQ,MAAK,SAACC,GAAD,OAAOA,EAAE1B,KAAOA,MAAO,SAnBjD,KAuBa2B,EAAc,CACzBC,KAAM,IAAIb,EAAiB,OAAQc,EAAW,CAC5CL,aAAc,CAAC,KAAM,UAEvB1D,MAAO,IAAIiD,EAAkB,QAASe,EAAY,CAChDN,aAAc,CAAC,KAAM,UAEvBzD,KAAM,IAAIgD,EAAiB,OAAQgB,EAAW,CAC5CP,aAAc,CAAC,KAAM,UAEvBQ,MAAO,IAAIjB,EAAkB,QAASkB,EAAY,CAChDT,aAAc,CAAC,KAAM,W,4CFjDb7C,K,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,WAAAA,M,kBGICuD,EAAgB,CAC3BvD,EAAYwD,IACZxD,EAAYyD,IACZzD,EAAY0D,IACZ1D,EAAY2D,IACZ3D,EAAY4D,IACZ5D,EAAY6D,KAGDC,EAAoB,CAC/BN,IAAK,eACLC,IAAK,eACLC,IAAK,eACLC,IAAK,eACLC,IAAK,eACLC,IAAK,gBAcA,SAASE,EAAqBC,GACnC,OAAOrC,KAAKsC,OAAOD,EAAQ,IAAM,GAO5B,SAASE,EAAaC,GAC3B,MAAM,GAAN,OAAUA,EAAM,EAAI,GAAK,KAAzB,OAA+BA,GAG1B,IAAMC,EAAuC,CAClDC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GACJC,GAAI,GACJC,GAAI,IAOC,SAASC,EAAajB,GAAwB,IAAD,EAClD,iBAAOI,EAAaJ,UAApB,QAA8B,E,IC9CXkB,E,WAUnB,WACE/D,GASC,IAAD,yDAD6B,GAN3BE,EAOF,EAPEA,GACA8D,EAMF,EANEA,YAMF,IALEC,wBAKF,MALqBpF,EAAYwD,IAKjC,MAJE6B,cAIF,MAJW,QAIX,MAHEC,eAGF,MAHY,UAGZ,EAFEC,EAEF,EAFEA,aAEF,yBAnBFlE,QAmBE,OAlBFF,UAkBE,OAjBFgE,iBAiBE,OAhBFC,sBAgBE,OAdFC,YAcE,OAbFC,aAaE,OAZFC,kBAYE,EACApF,YAAeC,KAAM,CACnBe,KAAMT,IACNyE,YAAazE,IAEb8E,gBAAiB/E,IACjBgF,YAAahF,IAEb2E,iBAAkB1E,IAClBgF,aAAcjF,IAEd4E,OAAQ3E,IACRuC,KAAMxC,IACNkF,QAASrF,IAETgF,QAAS5E,IAETkF,UAAWnF,MAGbL,KAAKe,KAAOA,EACZf,KAAKiB,GAAL,OAAUA,QAAV,IAAUA,IAAMC,IAAQuE,WAExBzF,KAAK+E,YAAL,OAAmBA,QAAnB,IAAmBA,IAAe,CAAE3B,IAAK,GAAIC,IAAK,GAAIC,IAAK,GAAIC,IAAK,GAAIC,IAAK,GAAIC,IAAK,IACtFzD,KAAKgF,iBAAL,OAAwBA,QAAxB,IAAwBA,IAAoBpF,EAAYwD,IAExDpD,KAAKiF,OAASA,EACdjF,KAAKkF,QAAUA,EAEflF,KAAKmF,aAAe7E,IAAWoF,IAAI,IAAIC,IAAIR,GAAe,CAAES,MAAM,I,yCAGpE,WACE,ODlDG,SAAwBC,EAAiBC,GAAuC,IAAD,YACpF,MAAO,CACL1C,IAAKyC,EAAKzC,KAAL,UAAY0C,EAAM1C,WAAlB,QAAyB,GAC9BC,IAAKwC,EAAKxC,KAAL,UAAYyC,EAAMzC,WAAlB,QAAyB,GAC9BC,IAAKuC,EAAKvC,KAAL,UAAYwC,EAAMxC,WAAlB,QAAyB,GAC9BC,IAAKsC,EAAKtC,KAAL,UAAYuC,EAAMvC,WAAlB,QAAyB,GAC9BC,IAAKqC,EAAKrC,KAAL,UAAYsC,EAAMtC,WAAlB,QAAyB,GAC9BC,IAAKoC,EAAKpC,KAAL,UAAYqC,EAAMrC,WAAlB,QAAyB,IC2CvBsC,CAAe/F,KAAK+E,YAAa/E,KAAKsF,gB,2BAE/C,WACE,ODtCyBU,ECsCLhG,KAAKiG,QDrCpBC,YAAUF,EAAIrC,GADhB,IAAsBqC,I,uBCwC3B,WACE,ODV+BA,ECULhG,KAAK+E,YDT1BoB,OAAOC,OAAOJ,GAClBK,KAAI,SAACC,GAAD,OAAOzB,EAAayB,MACxBC,QAAO,SAACC,EAAKF,GAAN,OAAYE,EAAMF,IAAG,GAH1B,IAA4BN,I,wBCYjC,WACE,OAAIS,YAAQzG,KAAK6C,KAAKoD,SACb,eAAGjG,KAAKgF,iBAAmB,GAG7BhF,KAAK6C,KAAKoD,U,8BAEnB,WACEjG,KAAK+E,YAAc,CAAE3B,IAAK,GAAIC,IAAK,GAAIC,IAAK,GAAIC,IAAK,GAAIC,IAAK,GAAIC,IAAK,M,gBAGzE,WACE,OACEb,EAAYC,KAAK6D,QAAQ1G,KAAKiF,SAAW,CACvChE,GAAI,UACJF,KAAM,eACNkF,QAAS,M,qBAKf,SAAQhB,GACNjF,KAAKiF,OAASA,EACdjF,KAAKgF,iBAAmBpF,EAAYwD,M,qBAGtC,WACE,OAAOuD,MAAMC,KAAK5G,KAAKmF,cACpBkB,KAAI,SAACpF,GAAD,OAAQ2B,EAAY7D,MAAM2H,QAAQzF,MACtCY,QAAO,SAACgF,GAAD,OAAmBC,QAAQD,S,wBAWvC,SAAiBvH,GACf,OAAOyH,KAAKC,UAAL,aACL/F,GAAI3B,EAAE2B,GACNF,KAAMzB,EAAEyB,KACRyE,UAAWmB,MAAMC,KAAKtH,EAAEkG,WAAWa,KAAI,SAAC1D,GAAD,OAAOA,EAAE1B,OAC7CgG,YAAK3H,EAAGwF,EAAUoC,uB,mBAIzB,SAAavE,GACX,IAAMwE,EAAOJ,KAAKK,MAAMzE,GAGxB,OAFkB,IAAImC,EAAUqC,EAAKpG,KAAMoG,O,KAhH1BrC,EA6FZoC,kBAAoB,CACzB,SACA,UACA,cACA,mBACA,gB,MAoB0DhI,I,mBAAhDmI,E,KAAqBC,E,KC9HtBC,EAAb,WAOE,aAAe,yBANfC,QAMc,OAJd5E,iBAIc,OAFd9C,gBAEc,EACZE,KAAKwH,GAAK,IAAI3H,EAEdG,KAAK4C,YAAcA,EAEnB5C,KAAKF,WAAaQ,IAAWC,MAAM,GAAI,CAAEqF,MAAM,IAZnD,+EAeE,sBAAAnF,EAAA,sEACQT,KAAKyH,UADb,OAEEzH,KAAK0H,UAFP,gDAfF,+EAoBE,SACEC,GAE2D,IAD3DC,EAC0D,uDAD9C,GAEZ,MAAQ,CAAChF,EAAY7D,MAAO6D,EAAY5D,MAAoCqH,KAAI,SAAC/G,GAAD,MAAO,CACrFA,EAAE2C,KACF3C,EAAE8C,KAAKyF,OAAOF,EAAK,CAAEG,MAAOF,UA1BlC,qBA8BE,WAAiB,IAAD,OACdG,aAAQ,WACN,EAAKjI,WAAW4B,SAAQ,SAACpC,GACvBoG,YAAI,aAAD,OAAcpG,EAAE2B,IAAM6D,EAAUkC,UAAU1H,OAG/CoG,YAAI,gBAAiBqB,KAAKC,UAAU,EAAKQ,GAAG1H,kBApClD,4DAwCE,iCAAAW,EAAA,sEAC0BuH,cAD1B,cAGYtG,SAAQ,YAAa,IAAD,mBAAVuG,EAAU,KAAP3B,EAAO,KACX,kBAAN2B,IACLA,EAAEnG,WAAW,cACf,EAAKhC,WAAWkB,KAAK8D,EAAUsC,MAAMd,IAG7B,kBAAN2B,GACF,EAAKT,GAAG1H,WAAWoI,QAAQnB,KAAKK,MAAMd,QAKxCtG,KAAKF,WAAWiC,OAAS,GAC3B/B,KAAKF,WAAWkB,KAAK,IAAI8D,EAAU,YAhBvC,gDAxCF,6D,EA6DwC5F,I,mBAA1BiJ,E,KAAUC,E,mNCxEXC,GAAuB,CAClCxF,KAAM,eACNI,MAAO,eACPlE,MAAO,eACPC,KAAM,eACNC,OAAQ,gB,uCCLGqJ,GAAa,CACxBC,OAAQ,eACRC,MAAO,eACPC,OAAQ,eACRC,YAAa,2BACbC,WAAY,eACZC,MAAO,eACPC,OAAQ,eACRC,OAAQ,eACRC,KAAM,eACNC,OAAQ,+CACRC,SAAU,2BACVC,OAAQ,eACRC,WAAY,4B,QCEP,SAASC,GAAT,GAAmD,IAA9BrK,EAA6B,EAA7BA,MAC1B,OACE,eAAC,KAAD,CAAOsK,KAAK,KAAKC,GAAG,IAApB,SACE,eAAC,KAAD,UACInD,OAAO3D,KAAKzD,EAAMwK,MAAqClD,KAAI,SAAC4B,GAAD,OAC3D,gBAAC,KAAD,WACE,eAAC,KAAD,CAAIuB,GAAG,IAAIC,MAAM,WAAWC,MAAM,MAAlC,SACGC,GAAgB1B,KAEnB,eAAC,KAAD,UAAKlJ,EAAMwK,KAAKtB,OAJTA,UAYJ,SAAS2B,GAAT,GAKS,IAJtB7K,EAIqB,EAJrBA,MAIqB,IAHrB8K,gBAGqB,aAFrBC,gBAEqB,aADrBC,uBACqB,SACrB,OACE,gBAAC,KAAD,CAAKC,UAAU,QAAf,UACGH,EACC,gBAAC,KAAD,CAAOI,UAAU,MAAMC,MAAM,SAA7B,UACE,eAAC,KAAD,UAAQnL,EAAMoL,KAAKC,gBACnB,gBAAC,KAAD,CAASC,GAAG,KAAKC,SAAS,KAAKb,MAAO3K,EAAcC,MAApD,UACGA,EAAMgC,KADT,IACe,yBAAOwJ,MAAO,CAAEC,WAAY,UAA5B,cAA0CzL,EAAMkC,GAAhD,aAGf,KAEH6I,EAAW,eAACV,GAAD,CAAWrK,MAAOA,IAAY,KAEzCgL,EACC,eAAC,KAAD,CACEU,GAAG,IACHC,WAAW,WACXC,wBAAyB,CAAEC,OAAQ7L,EAAM8L,aACzCb,UAAU,sBAEV,Q,WC1DGc,GAAiB,CAC5BC,YAAa,2BACbC,QAAS,2BACTC,OAAQ,2BACRC,QAAS,4BCYX,SAASC,GAAT,GAAiD,IAA7BnM,EAA4B,EAA5BA,KAClB,OACE,eAAC,KAAD,CAAOqK,KAAK,KAAKC,GAAG,IAApB,SACE,eAAC,KAAD,UACInD,OAAO3D,KAAKxD,EAAKuK,MAAoClD,KAAI,SAAC4B,GAAD,OACzD,gBAAC,KAAD,WACE,eAAC,KAAD,CAAIuB,GAAG,IAAIC,MAAM,WAAWC,MAAM,MAAlC,SACGoB,GAAe7C,KAElB,eAAC,KAAD,UAAKjJ,EAAKuK,KAAKtB,OAJRA,UAYJ,SAASmD,GAAT,GAMS,IALtBpM,EAKqB,EALrBA,KAKqB,IAJrB6K,gBAIqB,aAHrBwB,iBAGqB,aAFrBvB,gBAEqB,aADrBC,uBACqB,SACrB,OACE,gBAAC,KAAD,CAAKC,UAAU,OAAf,UACGH,EACC,gBAAC,KAAD,CAAQI,UAAU,MAAMC,MAAM,SAA9B,UACE,eAAC,KAAD,UAAQlL,EAAKmL,KAAKC,gBAClB,gBAAC,KAAD,CAASC,GAAG,KAAKC,SAAS,KAAKb,MAAO3K,EAAcE,KAApD,UACGA,EAAK+B,KADR,IACc,yBAAOwJ,MAAO,CAAEC,WAAY,UAA5B,cAA0CxL,EAAKiC,GAA/C,aAGd,KAEHoK,EACC,eAAC,KAAD,CAAM/B,GAAG,IAAIgC,UAAU,SAAvB,SACGtM,EAAKuM,QAEN,KAEHzB,EAAW,eAACqB,GAAD,CAAUnM,KAAMA,IAAW,KAEtC+K,GAAmB/K,EAAK6L,YACvB,eAAC,KAAD,CACEJ,GAAG,IACHC,WAAW,WACXC,wBAAyB,CAAEC,OAAQ5L,EAAK6L,aACxCb,UAAU,qBAEV,QCzCV,SAASwB,GAAT,GAA8F,IAA7DC,EAA4D,EAA5DA,KAC3BC,EAAK,KAET,OAH2F,EAAtDzJ,MAInC,IAAK,QACHyJ,EAAK,eAAC,GAAD,CAAO3M,MAAO0M,IACnB,MACF,IAAK,OACHC,EAAK,eAAC,GAAD,CAAM1M,KAAMyM,IAMrB,OACE,eAAC,KAAD,CACEE,GAAG,IACHC,OAAO,MACPC,YAAY,WACZC,EAAE,IACFC,aAAa,KACbC,OAAQ,CACNH,YAAa,WACbI,UAAW,QAEbC,WAAW,sBAVb,SAYGR,IAKQ,SAASS,KACtB,IAAMC,EAAQjE,IADmC,EAEfkE,mBAAS,IAFM,mBAE1CC,EAF0C,KAE/BC,EAF+B,KAG3CC,EAAeC,mBAAQ,kBAAML,EAAMM,YAAYJ,KAAY,CAACA,IAHjB,EAIXD,oBAAS,+BAAMG,QAAN,IAAMA,GAAN,UAAMA,EAAe,UAArB,aAAM,EAAoB,MAJxB,mBAI1CG,EAJ0C,KAI7BC,EAJ6B,KAK3CC,EAAkBpN,IALyB,EAMnB+M,EAAa9J,MAAK,gBAAEmE,EAAF,2BAAS8F,IAAgB9F,MAAM,GAN9B,mBAM1CiG,EAN0C,KAM9BC,EAN8B,KAQjD,OACE,uCACE,gBAAC,KAAD,CAAKC,SAAU,EAAGC,WAAY,EAAGtB,GAAG,IAApC,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,UACE,eAACuB,GAAA,EAAD,CAAazD,MAAM,eAErB,eAAC,KAAD,CACE0D,YAAY,kBACZC,WAAS,EACTC,MAAOf,EACPgB,SAAU,SAACC,GACThB,EAAagB,EAAEzE,OAAOuE,aAI3BN,IAAkB,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAAShL,QAAS,EAC5B8K,EACE,gBAAC,KAAD,CAAMW,YAAU,EAACC,YAAY,EAA7B,UACE,eAAC,KAAD,CACEnE,GAAG,IACHe,GAAIqD,KACJC,UAAW,eAACC,GAAA,EAAD,IACXC,QAAQ,UACRnE,MAAM,OACNoE,YAAY,aANd,SAQGzF,GAAqBsE,KAExB,eAAC,KAAD,UACGH,EAAanG,KAAI,mCAAEpE,EAAF,iBACdF,OAAS,EACT,eAAC,KAAD,CAEEgM,QAAS,WACPnB,EAAe3K,IAHnB,SAMGoG,GAAqBpG,IALjBA,GAOL,aAKV,eAAC,KAAD,CAAQwI,GAAG,IAAX,SACG+B,EAAanG,KAAI,mCAAEpE,EAAF,KAAQ+L,EAAR,YAChBA,EAAEjM,OAAS,EACT,gBAAC,KAAD,CAEEgM,QAAS,kBAAMnB,EAAe3K,IAC9BgM,QAASnP,EAAcmD,GACvBwH,MAAM,QACNyE,OAAO,UACP7E,KAAK,KACL8E,QAASlM,IAAS0K,EAAc,EAAI,GAPtC,UASGtE,GAAqBpG,GATxB,IASgC+L,EAAEjM,OATlC,MACOE,GAUL,UAIR,QAEL8K,GAAWD,IAAqB,OAAPC,QAAO,IAAPA,OAAA,EAAAA,EAAShL,QAAS,EAC1C,eAAC,KAAD,CAAKiL,SAAU,EAAGoB,UAAU,OAA5B,SACGrB,EAAQ1G,KAAI,gBAAGoF,EAAH,EAAGA,KAAH,OACX,eAACD,GAAD,CAAqCvJ,KAAM6K,EAAYrB,KAAMA,GAAjCA,EAAKxK,QAFG6L,GAKtC,QCxHK,SAASuB,GAAT,GAA+D,IAAjCC,EAAgC,EAAhCA,SAAgC,EACvCC,eAA5BC,EADmE,EACnEA,OAAQC,EAD2D,EAC3DA,QAASC,EADkD,EAClDA,OAEzB,OACE,uCACE,uBAAMX,QAASW,EAAf,SAAwBJ,IAExB,eAAC,KAAD,CAAQE,OAAQA,EAAQC,QAASA,EAASpF,KAAK,KAA/C,SACE,eAAC,KAAD,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,2BACA,eAAC,KAAD,CAAYsF,EAAE,OAAOC,QAAQ,SAA7B,SACE,eAACzC,GAAD,MAEF,eAAC,KAAD,c,wBCrBG,SAAS0C,GAAT,GAAwD,IAArCC,EAAoC,EAApCA,GAAOC,EAA6B,uBAC9DC,EAAQC,aAAcH,GAE5B,OAAO,eAAC,KAAD,aAAMzE,GAAI6E,KAAYzF,MAAOuF,EAAQ,WAAa,QAASF,GAAIA,GAAQC,ICLjE,SAASI,KACtB,OACE,eAAC,KAAD,CAAKC,GAAG,QAAQC,aAAa,MAAMxD,YAAY,WAAWyD,GAAI,EAA9D,SACE,eAAC,KAAD,UACE,gBAAC,KAAD,CAAMC,WAAW,SAAjB,UACE,gBAAC,KAAD,CAAQC,GAAG,IAAI/F,MAAM,WAArB,UACE,eAAC,KAAD,CAAgBJ,KAAM,KACtB,eAAC,KAAD,CAASgB,GAAG,KAAKC,SAAS,QAA1B,qBAIF,gBAAC,KAAD,WACE,eAACuE,GAAD,CAASC,GAAG,UAAZ,oBACA,eAACD,GAAD,CAASC,GAAG,MAAZ,mBAEF,eAAC,KAAD,IACA,eAACT,GAAD,UACE,eAAC,KAAD,CAAYoB,aAAW,eAAepG,KAAK,KAAKqG,KAAM,eAACxC,GAAA,EAAD,e,mDCZ5DyC,GAAQ,CACZvM,IAAK,CAAEsM,KAAME,KAAQnG,MAAO,cAC5BpG,IAAK,CAAEqM,KAAMG,KAAYpG,MAAO,aAChCnG,IAAK,CAAEoM,KAAMI,KAAUrG,MAAO,WAC9BlG,IAAK,CAAEmM,KAAMK,KAAStG,MAAO,cAC7BjG,IAAK,CAAEkM,KAAMM,KAAgBvG,MAAO,YACpChG,IAAK,CAAEiM,KAAMO,KAAcxG,MAAO,aAGrB,SAASyG,GAAT,GAA0E,IAAnDjK,EAAkD,EAAlDA,QAAkD,EAC9D0J,GAAM1J,GAAtByJ,EAD8E,EAC9EA,KAAMjG,EADwE,EACxEA,MAEd,OACE,eAAC,KAAD,CAAKwE,QAASxE,EAAOqC,EAAE,IAAIC,aAAa,KAAxC,SACE,eAAC,KAAD,CAAM1B,GAAIqF,EAAMjG,MAAM,QAAQ0G,EAAG,EAAGC,EAAG,MCH7C,SAASC,GAAT,GAAqF,IAA5DC,EAA2D,EAA3DA,OAAQC,EAAmD,EAAnDA,KAC/B,OACE,gBAAC,KAAD,CAAQC,QAAQ,IAAhB,UACE,eAAC,KAAD,CAAMlG,SAAS,QAAQmG,UAAU,SAASC,WAAW,IAArD,SACGJ,IAEH,eAAC,KAAD,CAAMhG,SAAS,KAAKb,MAAM,WAAWiH,WAAW,IAAhD,SACGH,OAMM,SAASI,GAAT,GAQS,IAPtB1K,EAOqB,EAPrBA,QACArC,EAMqB,EANrBA,MACA0J,EAKqB,EALrBA,SAKqB,IAJrBsD,WAIqB,MbiBc,GajBd,MAHrBC,WAGqB,MbgBc,EahBd,MAFrBC,cAEqB,MAFZ,EAEY,MADrBC,0BACqB,SACrB,OACE,gBAAC,KAAD,CAAQZ,EAAE,OAAV,UACE,eAACD,GAAD,CAAajK,QAASA,IACtB,eAAC,KAAD,CAAMqE,SAAS,KAAK0G,WAAW,OAA/B,SACG/K,EAAQmE,gBAEX,eAAC,KAAD,IACA,eAACiG,GAAD,CAAeC,OAAQxM,EAAaH,EAAqBC,EAAQkN,IAAUP,KAAK,QAChF,eAACF,GAAD,CAAeC,OAAQxM,EAAagN,GAASP,KAAK,WAClD,eAACF,GAAD,CAAeC,OAAQ1M,EAAQkN,EAAQP,KAAK,UAE5C,gBAAC,KAAD,CAAaU,YAAU,EAAvB,UACE,eAAC,KAAD,CACExB,aAAW,mBACXC,KAAM,eAAC,KAAD,IACN3B,QAAS,kBAAMT,EAAS1J,EAAQ,IAChCyF,KAAK,KACL6H,WAAYtN,GAASiN,IAEvB,eAAC,KAAD,CACEpB,aAAW,mBACXC,KAAM,eAAC,KAAD,IACN3B,QAAS,kBAAMT,EAAS1J,EAAQ,IAChCyF,KAAK,KACL6H,WAAYtN,GAASgN,GAAOG,UCzDvB,SAASI,GAAT,GAKS,IAAD,EAJrBC,EAIqB,EAJrBA,WACA9D,EAGqB,EAHrBA,SACAD,EAEqB,EAFrBA,MAEqB,IADrBF,mBACqB,MADP,SACO,EACrB,OACE,gBAAC,KAAD,CAAMkE,UAAU,eAAhB,UACE,eAAC,KAAD,CAAYhH,GAAIqD,KAAhB,UACIL,EAAK,UAAG+D,EAAW1K,QAAQ2G,UAAtB,aAAG,EAA2BtM,KAAO,KAAOoM,IAErD,eAAC,KAAD,UACGiE,EAAWlP,KAAKmE,KAAI,SAACkH,GAAD,OACnB,eAAC,KAAD,CAEEQ,QAAS,WACPT,EAASC,EAAEtM,KAEbyO,KAAMnC,EAAEtM,KAAOoM,EAAQ,eAAC,KAAD,CAAMhD,GAAIiH,YAAcC,EALjD,SAOGhE,EAAExM,MANEwM,EAAEtM,YChBJ,SAASuQ,GAAT,GAKY,IAAD,EAJxBrP,EAIwB,EAJxBA,QACAkL,EAGwB,EAHxBA,MACAC,EAEwB,EAFxBA,SAEwB,IADxBH,mBACwB,MADV,SACU,EACxB,OACE,gBAAC,KAAD,CAAMkE,UAAU,eAAhB,UACE,eAAC,KAAD,CAAYhH,GAAIqD,KAAhB,UACIL,EAAK,UAAGlL,EAAQO,MAAK,qBAAG2K,QAAqBA,YAAxC,aAAG,EAA6CkD,KAAO,KAAOpD,IAEvE,eAAC,KAAD,UACGhL,EAAQkE,KAAI,SAACoL,EAAGC,GAAJ,aACX,eAAC,KAAD,CAEE3D,QAAS,WACPT,EAASmE,EAAEpE,QAEbqC,KAAM+B,EAAEpE,QAAUA,EAAQ,eAAC,KAAD,CAAMhD,GAAIiH,YAAcC,EALpD,SAOGE,EAAElB,MAPL,UACOkB,EAAE9J,WADT,QACgB+J,WCPX,SAASC,KACtB,IAAMvF,EAAQjE,IACRyJ,EAAYvK,IAElB,OACE,gBAAC,KAAD,CAAKwK,KAAK,KAAV,UACE,eAAC,KAAD,UACG,kBACC,gBAAC,KAAD,CAAQ1B,EAAE,OAAV,UACE,gBAAC,KAAD,CAAQA,EAAE,OAAOK,QAAQ,IAAzB,UACE,eAAC,KAAD,CAAMlG,SAAS,KAAf,0BACA,eAAC,KAAD,IACA,eAAC6G,GAAD,CACEC,WAAYhF,EAAMxJ,YAAYC,KAC9BwK,MAAOuE,EAAU3M,OACjBqI,SAAU,SAACrM,GACT2Q,EAAU3M,OAAShE,QAIzB,eAAC,KAAD,IACCwF,YAAQmL,EAAU/O,KAAKoD,SACtB,uCACE,gBAAC,KAAD,CAAQkK,EAAE,OAAOK,QAAQ,IAAzB,UACE,eAAC,KAAD,CAAMlG,SAAS,KAAf,sCACA,eAAC,KAAD,IACA,eAACkH,GAAD,CACErP,QAASgB,EAAckD,KAAI,SAACQ,GAAD,MAAQ,CACjC0J,KAAM7M,EAAkBmD,GACxBwG,MAAOxG,EACPc,IAAKd,MAEPwG,MAAOuE,EAAU5M,iBACjBsI,SAAU,SAAChH,GACTsL,EAAU5M,iBAAmBsB,QAInC,eAAC,KAAD,OAEA,KACJ,gBAAC,KAAD,CAAQ6J,EAAE,OAAOK,QAAQ,IAAzB,UACE,eAAC,KAAD,CAAMlG,SAAS,KAAf,0BACA,eAAC,KAAD,IACA,eAAC6G,GAAD,CACEC,WAAYhF,EAAMxJ,YAAYK,MAC9BoK,MAAOuE,EAAU1M,QACjBoI,SAAU,SAACrM,GACT2Q,EAAU1M,QAAUjE,QAI1B,eAAC,KAAD,UAIN,eAAC,KAAD,UACG,WACC,IAAM6Q,EhBbc,GgBakBF,EAAUvM,YAEhD,OACE,uCACE,gBAAC,KAAD,CAAQ0M,GAAG,IAAX,UACE,gBAAC,KAAD,CAAMzH,SAAS,KAAf,2BAAyBwH,EAAzB,WACA,eAAC,KAAD,CAAQzI,KAAK,KAAK0E,QAAS,kBAAM6D,EAAUI,oBAA3C,6BAIF,eAAC,KAAD,CAAQzC,WAAW,QAAnB,SACGpM,EAAckD,KAAI,SAACL,GAClB,IAAMpC,EAAQgO,EAAU7M,YAAYiB,GAEpC,OACE,eAAC2K,GAAD,CAEE1K,QAASD,EACTpC,MAAOA,EACPkN,OAAQc,EAAUtM,aAAaU,GAC/BsH,SAAU,SAAChH,GACTsL,EAAU7M,YAAYiB,GAAMM,GAE9ByK,mBACEa,EAAUvM,ahBrCJ,IgBsCNR,EAAajB,EAAQ,GAAKiB,EAAajB,GAASkO,GAT7C9L,iB,kCC9EZ,SAASiM,GAAT,GAIS,IAHtBb,EAGqB,EAHrBA,WACAc,EAEqB,EAFrBA,SACAC,EACqB,EADrBA,OACqB,EACa9F,mBAAS,IADtB,mBACdC,EADc,KACHC,EADG,KAEfC,EAAeC,mBAAQ,WAC3B,OAAiB,OAAV2E,QAAU,IAAVA,OAAA,EAAAA,EAAYhP,KAAKyF,OAAOyE,KAAc,KAC5C,CAACA,IAEJ,OACE,gBAAC,KAAD,WACE,gBAAC,KAAD,WACE,eAAC,KAAD,UACE,eAACY,GAAA,EAAD,CAAazD,MAAM,eAErB,eAAC,KAAD,CACE2I,IAAKF,EACL/E,YAAY,SACZC,WAAS,EACTC,MAAOf,EACPgB,SAAU,SAACC,GACThB,EAAagB,EAAEzE,OAAOuE,aAI3Bb,EAAazK,OAAS,EACrB,eAAC,KAAD,CAAKsQ,UAAU,MAAMxG,YAAY,WAAWvC,GAAG,IAAIgJ,KAAM,IAAKC,SAAS,OAAvE,SACG/F,EAAanG,KAAI,gBAAGoF,EAAH,EAAGA,KAAH,OAChB,gBAAC,KAAD,CAEEsC,QAAS,kBAAMoE,EAAO1G,IACtBK,EAAE,IACFuD,aAAa,MACbxD,YAAY,WACZqC,OAAO,UACPlC,OAAQ,CACNwG,WAAY,YARhB,UAWG/G,EAAK1K,KAXR,KAWgB0K,EAAKxK,GAXrB,MACOwK,EAAKxK,SAcd,QC3BK,SAASwR,KACtB,IAAMrG,EAAQjE,IACRuK,EAAkBC,iBAAyB,MAC3Cf,EAAYvK,IAHsC,EAItBgF,qBAJsB,mBAIjDuG,EAJiD,KAItCC,EAJsC,KAKlDhG,EAAkBpN,IAExB,OACE,uCACE,gBAAC,KAAD,CAASiT,gBAAiBA,EAAiBrB,UAAU,eAArD,UACE,eAAC,KAAD,UACE,eAAC,KAAD,CAAQhI,KAAK,KAAb,yBAEF,eAAC,KAAD,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,IACA,eAAC4I,GAAD,CACEb,WAAYhF,EAAMxJ,YAAY7D,MAC9BmT,SAAUQ,EACVP,OAAQ,SAAC1G,GACPmG,EAAUzM,aAAa2N,IAAIrH,EAAKxK,eAM1C,eAAC,KAAD,CAAS8Q,GAAG,MACZ,eAAC,KAAD,UACG,kBACC,eAAC,KAAD,CAAYgB,QAASlG,EAAkB,EAAI,EAAG2D,QAAQ,IAAtD,SACG7J,MAAMC,KAAKgL,EAAUpM,WAAWa,KAAI,SAACtH,GAAD,OACnC,gBAAC,KAAD,CAEEmP,OAAO,UACPhC,WAAW,8BACXF,OAAQ,CAAEC,UAAW,QACrBL,OAAO,MACPC,YAAY,WACZC,EAAE,IACFC,aAAa,KACbgC,QAAS,kBAAM8E,EAAa9T,IAC5BmL,MAAM,SAVR,UAYE,eAAC,GAAD,CAAOnL,MAAOA,EAAO+K,UAAU,EAAOC,iBAAiB,IACvD,eAAC,KAAD,IACA,eAACiJ,GAAA,EAAD,CACEvJ,MAAM,UACNyC,WAAW,yBACXF,OAAQ,CAAEvC,MAAO,WACjBsE,QAAS,SAACR,GACJ0F,QAAQ,kBACVrB,EAAUzM,aAAa+N,OAAOnU,EAAMkC,IAEtCsM,EAAE4F,uBArBDpU,EAAMkC,YA8BrB,eAAC,KAAD,CACEuN,OAAQ1H,QAAQ8L,GAChBnE,QAAS,WACPoE,EAAa,OAEfxJ,KAAK,KALP,SAOE,eAAC,KAAD,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,UAAauJ,EAAY,eAAC,GAAD,CAAO7T,MAAO6T,IAAgB,OACvD,eAAC,KAAD,cChFZ,IAEMQ,GAAY,CAChB,CAAE7C,KAAM,eAAM8C,IAAK,iBACnB,CAAE9C,KAAM,eAAM8C,IAAK,sBAGN,SAASC,KACtB,IAAMlH,EAAQjE,IADkC,EAErBkE,oBAAS,kBAAMD,EAAMtM,WAAW,MAApDyT,EAFyC,oBAG1CC,EAAc/T,IAH4B,EAII4M,mBAAS+G,GAAU,IAJvB,mBAIzCK,EAJyC,KAIrBC,EAJqB,KAK1CC,EAAWC,eACXC,EAAUC,eAUhB,OARAC,qBAAU,WACR,IAAMC,EAAUZ,GAAU1Q,MAAK,qBAAG2Q,MAAkBM,EAASM,YAEzDD,GACFN,EAAsBM,KAEvB,CAACL,IAGF,eAACrM,EAAwB4M,SAAzB,CAAkC7G,MAAOkG,EAAzC,SACE,gBAAC,KAAD,WACGC,EACC,uCACE,gBAAC,KAAD,CAAMhG,YAAU,EAACC,YAAY,EAA7B,UACE,eAAC,KAAD,CACEpD,GAAIqD,KACJC,UAAW,eAACC,GAAA,EAAD,IACXC,QAAQ,UACRnE,MAAM,OACNoE,YAAY,aALd,SAOG2F,EAAmBlD,OAEtB,eAAC,KAAD,UACG6C,GAAU/M,KAAI,SAAC8N,GAAD,OACb,eAAC,KAAD,CAEEpG,QAAS,WACP8F,EAAQ7S,KAAKmT,EAAEd,MAHnB,SAME,eAACxE,GAAD,CAASC,GAAIqF,EAAEd,IAAK/I,SAAS,QAA7B,SACG6J,EAAE5D,QANA4D,EAAEd,aAYf,eAAC,KAAD,CAAStB,GAAG,SAGd,eAAC,KAAD,CAAKqC,IAAI,QAAQ1K,MAxDL,IAwD2B2K,YAAY,MAAMxI,YAAY,WAArE,SACGuH,GAAU/M,KAAI,SAAC8N,GAAD,OACb,eAAC,KAAD,UACE,eAACtF,GAAD,CAASC,GAAIqF,EAAEd,IAAK/I,SAAS,QAA7B,SACG6J,EAAE5D,QAFG4D,EAAEd,UAQlB,eAAC,KAAD,CAAK7J,GAAIgK,EAAc,EAAIc,IAA3B,SACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAOC,KAAK,gBAAgBC,UAAW7C,KACvC,eAAC,KAAD,CAAO4C,KAAK,oBAAoBC,UAAW/B,KAE3C,eAAC,KAAD,CAAU3D,GAAG,4BC7FlB,SAAS2F,GAAcrR,GAE5B,IADA,IAAIsR,EAAO,EACFhD,EAAI,EAAGA,EAAItO,EAAIrB,OAAQ2P,IAC9BgD,EAAOtR,EAAIuR,WAAWjD,KAAOgD,GAAQ,GAAKA,GAI5C,IADA,IAAIjL,EAAQ,IACHiI,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1BjI,IAAU,MADKiL,GAAa,EAAJhD,EAAU,KACXkD,SAAS,KAAKC,QAAQ,GAG/C,OAAOpL,ECSM,SAAS3E,GAAT,GAA0D,IAA1BxF,EAAyB,EAApCsS,UAC1BpK,EAAOW,IAAPX,GAER,OACE,eAAC,KAAD,UACG,kBACC,gBAAC,KAAD,CACEoE,OAAO,MACPC,YAAY,WACZE,aAAa,KACbyE,QAAS,EACTrC,QAASvN,SAAStB,EAAE8B,KAAO,EAAI,GAAM,EALvC,UAOE,gBAAC,KAAD,CAAKiO,aAAa,MAAMxD,YAAY,WAAWC,EAAE,IAAIqE,EAAE,OAAvD,UACE,eAAC,KAAD,CAAM7F,SAAS,WAAWb,MAAM,WAAhC,0BAGA,gBAAC,KAAD,WACE,eAAC,KAAD,CACE4D,MAAO/N,EAAEyB,KACTuM,SAAU,SAACC,GACTjO,EAAEyB,KAAOwM,EAAEzE,OAAOuE,OAEpBQ,QAAQ,WACRvD,SAAS,KACTE,WAAW,SAEb,eAAC,KAAD,CAAmB2F,EAAE,IAAIC,EAAE,IAAInC,QAASwG,GAAcnV,EAAEyB,MAAO+T,IAAI,cAIvE,gBAAC,KAAD,CAAQtE,QAAS,EAAGnB,aAAa,MAAMxD,YAAY,WAAnD,UACE,gBAAC,KAAD,CAAKC,EAAE,IAAIuI,YAAY,MAAMxI,YAAY,WAAzC,UACE,eAAC,KAAD,CAAMvB,SAAS,WAAWb,MAAM,WAAhC,sCAGA,eAAC,KAAD,CACE4D,MAAO/N,EAAEuB,WACTyM,SAAU,SAACC,GACTjO,EAAEuB,WAAa0M,EAAEzE,OAAOuE,OAE1BQ,QAAQ,WACR5L,KAAK,cAGT,gBAAC,KAAD,CAAK6J,EAAE,IAAIuI,YAAY,MAAMxI,YAAY,WAAzC,UACE,eAAC,KAAD,CAAMvB,SAAS,WAAWb,MAAM,WAAhC,gBAGA,eAAC,KAAD,CACE4D,MAAO/N,EAAE8B,GACTkM,SAAU,SAACC,GACTjO,EAAE8B,GAAKmM,EAAEzE,OAAOuE,OAElBQ,QAAQ,WACR5L,KAAK,cAGT,gBAAC,KAAD,CAAK6J,EAAE,IAAP,UACE,eAAC,KAAD,CAAMxB,SAAS,WAAWb,MAAM,WAAhC,oBAGA,eAAC,KAAD,CACE4D,MAAO/N,EAAE+B,MACTiM,SAAU,SAACC,GACTjO,EAAE+B,MAAQkM,EAAEzE,OAAOuE,OAErBQ,QAAQ,WACR5L,KAAK,iBAIX,gBAAC,KAAD,CAAQ6J,EAAE,IAAIiJ,QAAQ,aAAa7K,MAAM,SAASiG,EAAE,OAApD,UACE,gBAAC,KAAD,CAAM7F,SAAS,KAAf,2BACO1J,SAAStB,EAAEuB,YAAcvB,EAAEwB,iBADlC,IACqDxB,EAAEuB,WADvD,KACqE,IAClEvB,EAAEwB,iBAFL,OAIA,eAAC,KAAD,IACA,eAAC,KAAD,CAAQuI,KAAK,KAAK0E,QAAS,kBAAMvG,EAAG7F,eAAerC,IAAnD,gCAGA,eAAC,KAAD,CAAQ+J,KAAK,KAAK0E,QAAS,kBAAMvG,EAAGwN,KAAK1V,IAAzC,0BAGA,eAAC,KAAD,CACEwO,YAAY,MACZzE,KAAK,KACL0E,QAAS,WACHkF,QAAQ,gDACVzL,EAAGyN,gBAAgB3V,IALzB,mCCjGG,SAAS4V,GAAT,GAIY,IAHzB/S,EAGwB,EAHxBA,QACAkL,EAEwB,EAFxBA,MACAC,EACwB,EADxBA,SAEA,OACE,eAAC,KAAD,CAAa2D,YAAU,EAAvB,SACG9O,EAAQkE,KAAI,WAA0BqL,GAA1B,IAAGnB,EAAH,EAAGA,KAAajK,EAAhB,EAAS+G,MAAU1F,EAAnB,EAAmBA,IAAnB,OACX,eAAC,KAAD,CAEEoG,QAAS,kBAAMT,EAAShH,IACxBwH,YAAaT,IAAU/G,EAAI,OAAS,OAHtC,SAKGiK,GALH,OACO5I,QADP,IACOA,IAAO+J,QCPP,SAASyD,KAAuB,IACrC3N,EAAOW,IAAPX,GADoC,EAElB6E,mBAAS,UAFS,mBAErC+I,EAFqC,KAE9BC,EAF8B,KAGtCxI,EAAkBpN,IAExB,OACE,gBAAC,KAAD,WACE,gBAAC,KAAD,CAAQ0Q,EAAE,OAAV,UACE,eAAC,KAAD,CACEpC,QAAS,WACPvG,EAAG8N,aAAa,uBAFpB,sCAOA,eAAC,KAAD,CACEvH,QAAS,WACPvG,EAAG8N,aAAa,iBAFpB,sCAOA,eAAC,KAAD,IACA,eAAC,KAAD,CAAQvH,QAAS,kBAAMvG,EAAGvH,qBAA1B,4CACA,eAAC,KAAD,CAAQ8N,QAAS,kBAAMvG,EAAGrH,WAA1B,sCACA,eAAC+U,GAAD,CACE/S,QAAS,CACP,CAAEoO,KAAM,2BAAQlD,MAAO,UACvB,CAAEkD,KAAM,2BAAQlD,MAAO,eAEzBA,MAAO+H,EACP9H,SAAU,SAAChH,GAAD,OAAO+O,EAAS/O,SAI9B,eAAC,KAAD,UACG,kBACC,eAAC,KAAD,CAAYgJ,GAAG,IAAIkB,QAAQ,IAAIuC,QAASlG,EAAkB,EAAI,EAA9D,UACc,eAAVuI,EAAyB5N,EAAGpH,iBAAmBoH,EAAG1H,YAAYuG,KAAI,SAAC/G,GAAD,OAClE,eAAC,GAAD,CAAwBsS,UAAWtS,GAAjBA,EAAE2B,eCvBnBsU,OAnBf,WACE,OACE,eAAC,KAAD,CAAQC,SAAyD,wBAAjE,SACE,gBAAC,KAAD,WACE,eAACrG,GAAD,IAEA,eAAC,KAAD,CAAK1E,GAAG,IAAR,SACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAO8J,KAAK,UAAUC,UAAWlB,KACjC,eAAC,KAAD,CAAOiB,KAAK,MAAMC,UAAWW,KAE7B,eAAC,KAAD,CAAUrG,GAAG,uBCJnB2G,GAAc3O,QACW,cAA7B4O,OAAO/B,SAASgC,UAEe,UAA7BD,OAAO/B,SAASgC,UAEhBD,OAAO/B,SAASgC,SAAS3G,MAAM,2DA0CnC,SAAS4G,GAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCnGjE,IAYeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCGdO,YAAU,CAAEC,eAAgB,UAE5B,IAAMC,GAAQC,YAAY,CACxBhP,WAAY,CACViP,UAAW,CACTC,UAAW,CACThG,KhClBuB,UgCwBzBzF,GAAQ,IAAI7E,E,8CAElB,sBAAA9G,EAAA,sEACQ2L,GAAM0L,OADd,OAGEC,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAgBP,MAAOA,GAAvB,SACE,eAACtP,EAAa8L,SAAd,CAAuB7G,MAAOjB,GAA9B,SACE,eAAC,GAAD,UAIN8L,SAASC,eAAe,SAX5B,4C,2DAeAL,GAEA,IAAIM,IAAa,GFhBV,SAAkBtC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsC,IAAIC,wBAAwB5C,OAAO/B,SAAS4E,MACpDC,SAAW9C,OAAO/B,SAAS6E,OAIvC,OAGF9C,OAAO+C,iBAAiB,QAAQ,WAC9B,IAAM5C,EAAK,UAAMyC,wBAAN,sBAEP7C,KAgEV,SAAiCI,EAAeC,GAE9C4C,MAAM7C,EAAO,CACX8C,QAAS,CAAE,iBAAkB,YAE5BzC,MAAK,SAAC0C,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjD,UAAUC,cAAciD,MAAM/C,MAAK,SAACC,GAClCA,EAAa+C,aAAahD,MAAK,WAC7BR,OAAO/B,SAASwF,eAKpBvD,GAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVyC,CAAwBvD,EAAOC,GAI/BC,UAAUC,cAAciD,MAAM/C,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,GAAgBC,EAAOC,OER/BuD,CAAmC,CACjCzC,SAAU,SAACT,GACmC,IAAD,EAAvClD,QAAQ,gCACV8C,UAAUC,cAAcyC,iBAAiB,oBAAoB,WACvDL,KAIJA,IAAa,EACb1C,OAAO/B,SAASwF,aAGlB,UAAAhD,EAAamD,eAAb,SAAsBC,YAAY,CAAEtX,KAAM,qBAQhD+U,O","file":"static/js/main.86dc979e.chunk.js","sourcesContent":["export const CONTAINER_WIDTH = 1024;\n\nexport const ENTITY_COLORS: Record<string, string> = {\n  spell: 'purple.600',\n  feat: 'red.600',\n  weapon: 'orange.600',\n};\n","import { createContext, useContext } from 'react';\nimport { useMediaQuery } from '@chakra-ui/react';\n\nimport { CONTAINER_WIDTH } from '../constant';\n\nexport function createContextNoNullCheck<T>(defaults?: T): [() => T, React.Context<T | undefined>] {\n  const context = createContext<T | undefined>(defaults);\n\n  function use(): T {\n    const c = useContext(context);\n\n    if (typeof c === 'undefined') {\n      throw new Error('useContext must be inside a Provider with a value');\n    }\n\n    return c;\n  }\n\n  return [use, context];\n}\n\nexport function useIsSmallerScreen(): boolean {\n  return useMediaQuery(`(max-width: ${CONTAINER_WIDTH - 1}px)`)[0];\n}\n","export enum AbilityType {\n  str = 'str',\n  dex = 'dex',\n  con = 'con',\n  int = 'int',\n  wis = 'wis',\n  cha = 'cha',\n}\n\nexport interface Abilities {\n  [AbilityType.str]: number;\n  [AbilityType.dex]: number;\n  [AbilityType.con]: number;\n  [AbilityType.int]: number;\n  [AbilityType.wis]: number;\n  [AbilityType.cha]: number;\n}\n\nexport interface Entity {\n  id: string;\n  name: string;\n}\n\nexport interface Race extends Entity {\n  ability: Partial<Abilities>;\n}\n\nexport interface Class extends Entity {\n  hd: number;\n}\n\nexport interface SpellMeta {\n  school?: string;\n  level?: string;\n  castingTime?: string;\n  components?: string;\n  effect?: string;\n  area?: string;\n  target?: string;\n  aiming?: string;\n  duration?: string;\n  saving?: string;\n  resistance?: string;\n}\n\nexport interface Spell extends Entity {\n  meta: SpellMeta;\n  book: string;\n  description: string;\n}\n\nexport interface FeatMeta {\n  requirement?: string;\n  benefit?: string;\n  special?: string;\n  normal?: string;\n}\n\nexport interface Feat extends Entity {\n  meta: FeatMeta;\n  book: string;\n  brief: string;\n  description?: string;\n}\n\nexport type Weapon = Entity;\n","import { observable, IObservableArray, makeObservable, action, computed } from 'mobx';\nimport shortid from 'shortid';\n\nexport interface DMCharacter {\n  id: string;\n  name: string;\n  initiative: string;\n  hp: string;\n  maxHP: string;\n  rolledInitiative: number;\n}\n\nexport default class DMStore {\n  characters: IObservableArray<DMCharacter>;\n\n  constructor() {\n    makeObservable(this, {\n      rollAllInitiative: action,\n      healAll: action,\n      sortedCharacters: computed,\n    });\n\n    this.characters = observable.array([]);\n  }\n\n  get sortedCharacters(): Array<DMCharacter> {\n    return [...this.characters].sort((a, b) => {\n      const ac = parseInt(a.initiative) + a.rolledInitiative;\n      const bc = parseInt(b.initiative) + b.rolledInitiative;\n\n      return bc - ac;\n    });\n  }\n\n  addCharacter(name: string): void {\n    this.characters.push({\n      id: shortid(),\n      name: this.getNonConflictName(name),\n      initiative: '0',\n      hp: '1',\n      maxHP: '10',\n      rolledInitiative: 0,\n    });\n  }\n\n  removeCharacter(c: DMCharacter): void {\n    this.characters.remove(c);\n  }\n\n  rollInitiative(c: DMCharacter): void {\n    c.rolledInitiative = Math.ceil(Math.random() * 20);\n  }\n\n  rollAllInitiative(): void {\n    this.characters.forEach((c) => this.rollInitiative(c));\n  }\n\n  heal(c: DMCharacter): void {\n    c.hp = c.maxHP;\n  }\n  healAll(): void {\n    this.characters.forEach((c) => {\n      c.hp = c.maxHP;\n    });\n  }\n\n  getNonConflictName(name: string): string {\n    const existed = this.characters.filter((c) => c.name.startsWith(name));\n\n    return `${name} ${existed.length + 1}`;\n  }\n}\n","import Fuse from 'fuse.js';\n\nimport RACE_DATA from '../data/races.json';\nimport CLASS_DATA from '../data/classes.json';\nimport SPELL_DATA from '../data/spells.json';\nimport FEAT_DATA from '../data/feats.json';\n\nimport { Entity, Race, Spell, Feat, Class } from './types';\n\nexport type CollectionEntityType = 'race' | 'class' | 'spell' | 'feat' | 'weapon';\n\nexport interface CollectionOptions {\n  searchFields: Array<string>;\n}\n\nexport class Collection<T extends Entity = Entity> {\n  type: CollectionEntityType;\n  data: Array<T>;\n\n  fuse: Fuse<T>;\n\n  constructor(type: CollectionEntityType, data: Array<T>, options: CollectionOptions) {\n    this.type = type;\n    this.data = data;\n\n    this.fuse = new Fuse(data, {\n      includeScore: true,\n      threshold: 0.2,\n\n      keys: options.searchFields,\n    });\n  }\n\n  getById(id: string): T | null {\n    return this.data.find((s) => s.id === id) || null;\n  }\n}\n\nexport const collections = {\n  race: new Collection<Race>('race', RACE_DATA, {\n    searchFields: ['id', 'name'],\n  }),\n  spell: new Collection<Spell>('spell', SPELL_DATA, {\n    searchFields: ['id', 'name'],\n  }),\n  feat: new Collection<Feat>('feat', FEAT_DATA, {\n    searchFields: ['id', 'name'],\n  }),\n  class: new Collection<Class>('class', CLASS_DATA, {\n    searchFields: ['id', 'name'],\n  }),\n};\n","import { mapValues } from 'lodash-es';\n\nimport { Abilities, AbilityType } from '../store/types';\n\nexport const ABILITY_TYPES = [\n  AbilityType.str,\n  AbilityType.dex,\n  AbilityType.con,\n  AbilityType.int,\n  AbilityType.wis,\n  AbilityType.cha,\n];\n\nexport const abilityTranslates = {\n  str: '力量',\n  dex: '敏捷',\n  con: '体质',\n  int: '智力',\n  wis: '感知',\n  cha: '魅力',\n};\n\nexport function addBonusScores(base: Abilities, bonus: Partial<Abilities>): Abilities {\n  return {\n    str: base.str + (bonus.str ?? 0),\n    dex: base.dex + (bonus.dex ?? 0),\n    con: base.con + (bonus.con ?? 0),\n    int: base.int + (bonus.int ?? 0),\n    wis: base.wis + (bonus.wis ?? 0),\n    cha: base.cha + (bonus.cha ?? 0),\n  };\n}\n\nexport function getModifierFromScore(score: number): number {\n  return Math.floor((score - 10) / 2);\n}\n\nexport function getModifiers(ab: Abilities): Abilities {\n  return mapValues(ab, getModifierFromScore);\n}\n\nexport function showModifier(mod: number): string {\n  return `${mod < 0 ? '' : '+'}${mod}`;\n}\n\nexport const ABILITY_COST: Record<number, number> = {\n  7: -4,\n  8: -2,\n  9: -1,\n  10: 0,\n  11: 1,\n  12: 2,\n  13: 3,\n  14: 5,\n  15: 7,\n  16: 10,\n  17: 13,\n  18: 17,\n};\n\nexport const MINIMUM_ABILITY_SCORE = 7;\nexport const MAXIMUM_ABILITY_SCORE = 18;\nexport const ABILITY_POINTS = 25;\n\nexport function getScoreCost(score: number): number {\n  return ABILITY_COST[score] ?? 0;\n}\n\nexport function getTotalScoreCosts(ab: Abilities): number {\n  return Object.values(ab)\n    .map((v) => getScoreCost(v))\n    .reduce((acc, v) => acc + v, 0);\n}\n","import { isEmpty, pick } from 'lodash-es';\nimport { observable, makeObservable, ObservableSet, computed, action } from 'mobx';\nimport shortid from 'shortid';\n\nimport { createContextNoNullCheck } from '../utils/react';\nimport { collections } from './collection';\nimport { Abilities, Spell, Race, AbilityType } from './types';\nimport { getModifiers, getTotalScoreCosts, addBonusScores } from '../utils/ability';\n\ninterface OptionalCharacterParams {\n  id?: string;\n  baseAbility?: Abilities;\n  bonusAbilityType?: AbilityType;\n\n  raceId?: string;\n  classId?: string;\n  spellbookIds?: string[];\n}\n\nexport default class Character {\n  id: string;\n  name: string;\n  baseAbility: Abilities;\n  bonusAbilityType: AbilityType;\n\n  raceId: string;\n  classId: string;\n  spellbookIds: ObservableSet<string>;\n\n  constructor(\n    name: string,\n    {\n      id,\n      baseAbility,\n      bonusAbilityType = AbilityType.str,\n      raceId = 'Human',\n      classId = 'Fighter',\n      spellbookIds,\n    }: OptionalCharacterParams = {}\n  ) {\n    makeObservable(this, {\n      name: observable,\n      baseAbility: observable,\n\n      abilityModifier: computed,\n      abilityCost: computed,\n\n      bonusAbilityType: observable,\n      bonusAbility: computed,\n\n      raceId: observable,\n      race: computed,\n      setRace: action,\n\n      classId: observable,\n\n      spellbook: computed,\n    });\n\n    this.name = name;\n    this.id = id ?? shortid.generate();\n\n    this.baseAbility = baseAbility ?? { str: 10, dex: 10, con: 10, int: 10, wis: 10, cha: 10 };\n    this.bonusAbilityType = bonusAbilityType ?? AbilityType.str;\n\n    this.raceId = raceId;\n    this.classId = classId;\n\n    this.spellbookIds = observable.set(new Set(spellbookIds), { deep: false });\n  }\n\n  get ability(): Abilities {\n    return addBonusScores(this.baseAbility, this.bonusAbility);\n  }\n  get abilityModifier(): Abilities {\n    return getModifiers(this.ability);\n  }\n  get abilityCost(): number {\n    return getTotalScoreCosts(this.baseAbility);\n  }\n  get bonusAbility(): Partial<Abilities> {\n    if (isEmpty(this.race.ability)) {\n      return { [this.bonusAbilityType]: 2 };\n    }\n\n    return this.race.ability;\n  }\n  resetBaseAbility(): void {\n    this.baseAbility = { str: 10, dex: 10, con: 10, int: 10, wis: 10, cha: 10 };\n  }\n\n  get race(): Race {\n    return (\n      collections.race.getById(this.raceId) || {\n        id: 'unknown',\n        name: '未知',\n        ability: {},\n      }\n    );\n  }\n\n  setRace(raceId: string): void {\n    this.raceId = raceId;\n    this.bonusAbilityType = AbilityType.str;\n  }\n\n  get spellbook(): Array<Spell> {\n    return Array.from(this.spellbookIds)\n      .map((id) => collections.spell.getById(id))\n      .filter((t): t is Spell => Boolean(t));\n  }\n\n  static serializableProps = [\n    'raceId',\n    'classId',\n    'baseAbility',\n    'bonusAbilityType',\n    'spellbookIds',\n  ];\n\n  static stringify(c: Character): string {\n    return JSON.stringify({\n      id: c.id,\n      name: c.name,\n      spellbook: Array.from(c.spellbook).map((s) => s.id),\n      ...pick(c, Character.serializableProps),\n    });\n  }\n\n  static parse(s: string): Character {\n    const json = JSON.parse(s);\n    const character = new Character(json.name, json);\n\n    return character;\n  }\n}\n\nexport const [useCurrentCharacter, CurrentCharacterContext] = createContextNoNullCheck<Character>();\n","import Fuse from 'fuse.js';\nimport { observable, IObservableArray, autorun } from 'mobx';\nimport { set, entries } from 'idb-keyval';\n\nimport { createContextNoNullCheck } from '../utils/react';\n\nimport { Entity } from './types';\nimport DMStore from './dm';\nimport { collections, Collection, CollectionEntityType } from './collection';\nimport Character from './character';\n\nexport class Store {\n  dm: DMStore;\n\n  collections: typeof collections; // for components\n\n  characters: IObservableArray<Character>;\n\n  constructor() {\n    this.dm = new DMStore();\n\n    this.collections = collections;\n\n    this.characters = observable.array([], { deep: false });\n  }\n\n  async init(): Promise<void> {\n    await this.restore();\n    this.persist();\n  }\n\n  quickSearch(\n    key: string,\n    limitEach = 20\n  ): Array<[CollectionEntityType, Fuse.FuseResult<Entity>[]]> {\n    return ([collections.spell, collections.feat] as Array<Collection<Entity>>).map((c) => [\n      c.type,\n      c.fuse.search(key, { limit: limitEach }),\n    ]);\n  }\n\n  persist(): void {\n    autorun(() => {\n      this.characters.forEach((c) => {\n        set(`character:${c.id}`, Character.stringify(c));\n      });\n\n      set('dm:characters', JSON.stringify(this.dm.characters));\n    });\n  }\n\n  async restore(): Promise<void> {\n    const persisted = await entries();\n\n    persisted.forEach(([k, v]) => {\n      if (typeof k === 'string') {\n        if (k.startsWith('character')) {\n          this.characters.push(Character.parse(v));\n        }\n\n        if (k === 'dm:characters') {\n          this.dm.characters.replace(JSON.parse(v));\n        }\n      }\n    });\n\n    if (this.characters.length < 1) {\n      this.characters.push(new Character('Default'));\n    }\n  }\n}\n\nexport const [useStore, StoreContext] = createContextNoNullCheck<Store>();\n","export const entityTypeTranslates = {\n  race: '种族',\n  class: '职业',\n  spell: '法术',\n  feat: '专长',\n  weapon: '武器',\n};\n","export const translates = {\n  school: '学派',\n  level: '环位',\n  domain: '领域',\n  castingTime: '施法时间',\n  components: '成分',\n  range: '距离',\n  effect: '效果',\n  target: '目标',\n  area: '区域',\n  aiming: '目标, 区域或区域',\n  duration: '持续时间',\n  saving: '豁免',\n  resistance: '法术抗力',\n};\n","import './Spell.scss';\n\nimport { Box, Heading, Badge, Text, Stack, Table, Tbody, Tr, Td } from '@chakra-ui/react';\n\nimport { ENTITY_COLORS } from '../constant';\nimport { Spell as SpellType, SpellMeta as SpellMetaType } from '../store/types';\nimport { translates as spellTranslates } from '../utils/spell';\n\ninterface Props {\n  spell: SpellType;\n  showName?: boolean;\n  showMeta?: boolean;\n  showDescription?: boolean;\n}\n\nexport function SpellMeta({ spell }: Props): JSX.Element {\n  return (\n    <Table size=\"sm\" mt=\"2\">\n      <Tbody>\n        {(Object.keys(spell.meta) as Array<keyof SpellMetaType>).map((k) => (\n          <Tr key={k}>\n            <Td pl=\"0\" color=\"blue.500\" width=\"8em\">\n              {spellTranslates[k]}\n            </Td>\n            <Td>{spell.meta[k]}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n}\n\nexport default function Spell({\n  spell,\n  showName = true,\n  showMeta = true,\n  showDescription = true,\n}: Props): JSX.Element {\n  return (\n    <Box className=\"spell\">\n      {showName ? (\n        <Stack direction=\"row\" align=\"center\">\n          <Badge>{spell.book.toUpperCase()}</Badge>\n          <Heading as=\"h4\" fontSize=\"lg\" color={ENTITY_COLORS.spell}>\n            {spell.name} <small style={{ fontWeight: 'normal' }}>({spell.id})</small>\n          </Heading>\n        </Stack>\n      ) : null}\n\n      {showMeta ? <SpellMeta spell={spell} /> : null}\n\n      {showDescription ? (\n        <Text\n          pt=\"1\"\n          whiteSpace=\"pre-wrap\"\n          dangerouslySetInnerHTML={{ __html: spell.description }}\n          className=\"spell-description\"\n        />\n      ) : null}\n    </Box>\n  );\n}\n","export const featTranslates = {\n  requirement: '先决条件',\n  benefit: '专长效果',\n  normal: '通常状况',\n  special: '特殊说明',\n};\n","import './Feat.scss';\n\nimport { Box, HStack, Badge, Heading, Table, Tbody, Tr, Td, Text } from '@chakra-ui/react';\n\nimport { ENTITY_COLORS } from '../constant';\nimport { Feat as FeatType, FeatMeta as FeatMetaType } from '../store/types';\nimport { featTranslates } from '../utils/feat';\n\ninterface Props {\n  feat: FeatType;\n  showName?: boolean;\n  showBrief?: boolean;\n  showMeta?: boolean;\n  showDescription?: boolean;\n}\n\nfunction FeatMeta({ feat }: { feat: FeatType }) {\n  return (\n    <Table size=\"sm\" mt=\"2\">\n      <Tbody>\n        {(Object.keys(feat.meta) as Array<keyof FeatMetaType>).map((k) => (\n          <Tr key={k}>\n            <Td pl=\"0\" color=\"blue.500\" width=\"8em\">\n              {featTranslates[k]}\n            </Td>\n            <Td>{feat.meta[k]}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n}\n\nexport default function Feat({\n  feat,\n  showName = true,\n  showBrief = true,\n  showMeta = true,\n  showDescription = true,\n}: Props): JSX.Element {\n  return (\n    <Box className=\"feat\">\n      {showName ? (\n        <HStack direction=\"row\" align=\"center\">\n          <Badge>{feat.book.toUpperCase()}</Badge>\n          <Heading as=\"h4\" fontSize=\"lg\" color={ENTITY_COLORS.feat}>\n            {feat.name} <small style={{ fontWeight: 'normal' }}>({feat.id})</small>\n          </Heading>\n        </HStack>\n      ) : null}\n\n      {showBrief ? (\n        <Text mt=\"2\" fontStyle=\"italic\">\n          {feat.brief}\n        </Text>\n      ) : null}\n\n      {showMeta ? <FeatMeta feat={feat} /> : null}\n\n      {showDescription && feat.description ? (\n        <Text\n          pt=\"1\"\n          whiteSpace=\"pre-wrap\"\n          dangerouslySetInnerHTML={{ __html: feat.description }}\n          className=\"feat-description\"\n        />\n      ) : null}\n    </Box>\n  );\n}\n","import { useMemo, useState } from 'react';\nimport {\n  Box,\n  InputGroup,\n  Input,\n  InputLeftElement,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Button,\n  Tag,\n  HStack,\n} from '@chakra-ui/react';\nimport { Search2Icon, ChevronDownIcon } from '@chakra-ui/icons';\n\nimport { ENTITY_COLORS } from '../constant';\nimport { useStore } from '../store';\nimport { CollectionEntityType } from '../store/collection';\nimport { Entity, Spell as SpellType, Feat as FeatType } from '../store/types';\nimport { useIsSmallerScreen } from '../utils/react';\nimport { entityTypeTranslates } from '../utils/entity';\nimport Spell from './Spell';\nimport Feat from './Feat';\n\nfunction QuickSearchResultItem({ item, type }: { item: Entity; type: CollectionEntityType }) {\n  let el = null;\n\n  switch (type) {\n    case 'spell':\n      el = <Spell spell={item as SpellType} />;\n      break;\n    case 'feat':\n      el = <Feat feat={item as FeatType} />;\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <Box\n      mb=\"2\"\n      border=\"1px\"\n      borderColor=\"gray.200\"\n      p=\"2\"\n      borderRadius=\"md\"\n      _hover={{\n        borderColor: 'gray.300',\n        boxShadow: 'base',\n      }}\n      transition=\"all .2s ease-in-out\"\n    >\n      {el}\n    </Box>\n  );\n}\n\nexport default function QuickSearch(): JSX.Element {\n  const store = useStore();\n  const [searchKey, setSearchKey] = useState('');\n  const searchResult = useMemo(() => store.quickSearch(searchKey), [searchKey]);\n  const [currentType, setCurrentType] = useState(() => searchResult?.[0]?.[0]);\n  const isSmallerScreen = useIsSmallerScreen();\n  const [resultType, results] = searchResult.find(([t]) => currentType === t) || [];\n\n  return (\n    <>\n      <Box flexGrow={0} flexShrink={0} mb=\"2\">\n        <InputGroup>\n          <InputLeftElement>\n            <Search2Icon color=\"gray.400\" />\n          </InputLeftElement>\n          <Input\n            placeholder=\"Search Anything\"\n            autoFocus\n            value={searchKey}\n            onChange={(e) => {\n              setSearchKey(e.target.value);\n            }}\n          />\n        </InputGroup>\n        {results && results?.length > 0 ? (\n          isSmallerScreen ? (\n            <Menu matchWidth autoSelect={false}>\n              <MenuButton\n                mt=\"2\"\n                as={Button}\n                rightIcon={<ChevronDownIcon />}\n                variant=\"outline\"\n                width=\"100%\"\n                colorScheme=\"blackAlpha\"\n              >\n                {entityTypeTranslates[currentType]}\n              </MenuButton>\n              <MenuList>\n                {searchResult.map(([type, r]) =>\n                  r.length > 0 ? (\n                    <MenuItem\n                      key={type}\n                      onClick={() => {\n                        setCurrentType(type);\n                      }}\n                    >\n                      {entityTypeTranslates[type]}\n                    </MenuItem>\n                  ) : null\n                )}\n              </MenuList>\n            </Menu>\n          ) : (\n            <HStack pt=\"2\">\n              {searchResult.map(([type, r]) =>\n                r.length > 0 ? (\n                  <Tag\n                    key={type}\n                    onClick={() => setCurrentType(type)}\n                    bgColor={ENTITY_COLORS[type]}\n                    color=\"white\"\n                    cursor=\"pointer\"\n                    size=\"lg\"\n                    opacity={type === currentType ? 1 : 0.6}\n                  >\n                    {entityTypeTranslates[type]}({r.length})\n                  </Tag>\n                ) : null\n              )}\n            </HStack>\n          )\n        ) : null}\n      </Box>\n      {results && resultType && results?.length > 0 ? (\n        <Box flexGrow={1} overflowY=\"auto\" key={resultType}>\n          {results.map(({ item }) => (\n            <QuickSearchResultItem key={item.id} type={resultType} item={item} />\n          ))}\n        </Box>\n      ) : null}\n    </>\n  );\n}\n","import {\n  Drawer,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerBody,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nimport QuickSearch from './QuickSearch';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nexport default function QuickSearchToggler({ children }: Props): JSX.Element {\n  const { isOpen, onClose, onOpen } = useDisclosure();\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Drawer isOpen={isOpen} onClose={onClose} size=\"lg\">\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerHeader>Quick Search</DrawerHeader>\n            <DrawerBody d=\"flex\" flexDir=\"column\">\n              <QuickSearch />\n            </DrawerBody>\n            <DrawerCloseButton />\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  );\n}\n","import { Link, LinkProps } from '@chakra-ui/react';\nimport { Link as RouterLink, LinkProps as RouterLinkProps, useRouteMatch } from 'react-router-dom';\n\ninterface Props\n  extends LinkProps,\n    Pick<RouterLinkProps, 'to' | 'component' | 'innerRef' | 'replace'> {\n  to: string;\n}\n\nexport default function NavLink({ to, ...props }: Props): JSX.Element {\n  const match = useRouteMatch(to);\n\n  return <Link as={RouterLink} color={match ? 'teal.400' : 'black'} to={to} {...props} />;\n}\n","import { Box, Container, Heading, Flex, Spacer, IconButton, HStack } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\nimport { GiAncientSword } from 'react-icons/gi';\n\nimport QuickSearchToggler from './QuickSearchToggler';\nimport NavLink from './NavLink';\n\nexport default function Navbar(): JSX.Element {\n  return (\n    <Box bg=\"white\" borderBottom=\"1px\" borderColor=\"gray.300\" py={3}>\n      <Container>\n        <Flex alignItems=\"center\">\n          <HStack mr=\"8\" color=\"gray.700\">\n            <GiAncientSword size={28} />\n            <Heading as=\"h1\" fontSize=\"large\">\n              PFWB\n            </Heading>\n          </HStack>\n          <HStack>\n            <NavLink to=\"/player\">Player</NavLink>\n            <NavLink to=\"/dm\">DM</NavLink>\n          </HStack>\n          <Spacer />\n          <QuickSearchToggler>\n            <IconButton aria-label=\"Quick Search\" size=\"sm\" icon={<Search2Icon />} />\n          </QuickSearchToggler>\n        </Flex>\n      </Container>\n    </Box>\n  );\n}\n","import { Box, Icon } from '@chakra-ui/react';\nimport {\n  GiFist,\n  GiBullseye,\n  GiShield,\n  GiBrain,\n  GiAerialSignal,\n  GiFlyingFlag,\n} from 'react-icons/gi';\n\nimport { AbilityType } from '../store/types';\n\nconst icons = {\n  str: { icon: GiFist, color: 'orange.500' },\n  dex: { icon: GiBullseye, color: 'green.500' },\n  con: { icon: GiShield, color: 'red.500' },\n  int: { icon: GiBrain, color: 'yellow.500' },\n  wis: { icon: GiAerialSignal, color: 'cyan.500' },\n  cha: { icon: GiFlyingFlag, color: 'pink.500' },\n};\n\nexport default function AbilityIcon({ ability }: { ability: AbilityType }): JSX.Element {\n  const { icon, color } = icons[ability];\n\n  return (\n    <Box bgColor={color} p=\"1\" borderRadius=\"md\">\n      <Icon as={icon} color=\"white\" w={8} h={8} />\n    </Box>\n  );\n}\n","import { HStack, VStack, Spacer, IconButton, Text, ButtonGroup } from '@chakra-ui/react';\nimport { FaPlus, FaMinus } from 'react-icons/fa';\n\nimport { AbilityType } from '../store/types';\nimport {\n  getModifierFromScore,\n  showModifier,\n  MAXIMUM_ABILITY_SCORE,\n  MINIMUM_ABILITY_SCORE,\n} from '../utils/ability';\n\nimport AbilityIcon from './AbilityIcon';\n\ninterface Props {\n  ability: AbilityType;\n  score: number;\n  onChange: (s: number) => void;\n  max?: number;\n  min?: number;\n  isIncreaseDisabled?: boolean;\n  racial?: number;\n}\n\nfunction AbilityNumber({ number, text }: { number: string | number; text: string }) {\n  return (\n    <VStack spacing=\"0\">\n      <Text fontSize=\"large\" textAlign=\"center\" lineHeight=\"1\">\n        {number}\n      </Text>\n      <Text fontSize=\"xs\" color=\"gray.500\" lineHeight=\"1\">\n        {text}\n      </Text>\n    </VStack>\n  );\n}\n\nexport default function AbilityInput({\n  ability,\n  score,\n  onChange,\n  max = MAXIMUM_ABILITY_SCORE,\n  min = MINIMUM_ABILITY_SCORE,\n  racial = 0,\n  isIncreaseDisabled = false,\n}: Props): JSX.Element {\n  return (\n    <HStack w=\"full\">\n      <AbilityIcon ability={ability} />\n      <Text fontSize=\"lg\" fontFamily=\"mono\">\n        {ability.toUpperCase()}\n      </Text>\n      <Spacer />\n      <AbilityNumber number={showModifier(getModifierFromScore(score + racial))} text=\"mod\" />\n      <AbilityNumber number={showModifier(racial)} text=\"racial\" />\n      <AbilityNumber number={score + racial} text=\"score\" />\n\n      <ButtonGroup isAttached>\n        <IconButton\n          aria-label=\"Decrease Ability\"\n          icon={<FaMinus />}\n          onClick={() => onChange(score - 1)}\n          size=\"sm\"\n          isDisabled={score <= min}\n        />\n        <IconButton\n          aria-label=\"Increase Ability\"\n          icon={<FaPlus />}\n          onClick={() => onChange(score + 1)}\n          size=\"sm\"\n          isDisabled={score >= max || isIncreaseDisabled}\n        />\n      </ButtonGroup>\n    </HStack>\n  );\n}\n","import { Button, Menu, MenuButton, MenuItem, MenuList, Icon } from '@chakra-ui/react';\nimport { FaCheck } from 'react-icons/fa';\n\nimport { Collection } from '../store/collection';\n\ninterface Props {\n  collection: Collection;\n  onChange: (v: string) => void;\n  value: string | null;\n  placeholder?: string;\n}\n\nexport default function CollectionEntitySelect({\n  collection,\n  onChange,\n  value,\n  placeholder = 'Select',\n}: Props): JSX.Element {\n  return (\n    <Menu placement=\"bottom-start\">\n      <MenuButton as={Button}>\n        {(value ? collection.getById(value)?.name : '') || placeholder}\n      </MenuButton>\n      <MenuList>\n        {collection.data.map((e) => (\n          <MenuItem\n            key={e.id}\n            onClick={() => {\n              onChange(e.id);\n            }}\n            icon={e.id === value ? <Icon as={FaCheck} /> : undefined}\n          >\n            {e.name}\n          </MenuItem>\n        ))}\n      </MenuList>\n    </Menu>\n  );\n}\n","import { Button, Menu, MenuButton, MenuItem, MenuList, Icon } from '@chakra-ui/react';\nimport { FaCheck } from 'react-icons/fa';\n\ninterface Props<T = string> {\n  options: Array<{ text: string; value: T; key?: string }>;\n  onChange: (v: T) => void;\n  value: T | null;\n  placeholder?: string;\n}\n\nexport default function Select<T>({\n  options,\n  value,\n  onChange,\n  placeholder = 'Select',\n}: Props<T>): JSX.Element {\n  return (\n    <Menu placement=\"bottom-start\">\n      <MenuButton as={Button}>\n        {(value ? options.find(({ value: v }) => v === value)?.text : '') || placeholder}\n      </MenuButton>\n      <MenuList>\n        {options.map((o, i) => (\n          <MenuItem\n            key={o.key ?? i}\n            onClick={() => {\n              onChange(o.value);\n            }}\n            icon={o.value === value ? <Icon as={FaCheck} /> : undefined}\n          >\n            {o.text}\n          </MenuItem>\n        ))}\n      </MenuList>\n    </Menu>\n  );\n}\n","import { isEmpty } from 'lodash-es';\nimport { Observer } from 'mobx-react-lite';\nimport { Button, Box, VStack, Text, HStack, Spacer, Divider } from '@chakra-ui/react';\n\nimport { useStore } from '../../store';\nimport { useCurrentCharacter } from '../../store/character';\nimport {\n  ABILITY_TYPES,\n  getScoreCost,\n  ABILITY_POINTS,\n  abilityTranslates,\n} from '../../utils/ability';\n\nimport AbilityInput from '../AbilityInput';\nimport CollectionEntitySelect from '../CollectionEntitySelect';\nimport Select from '../Select';\n\nexport default function CharacterBasic(): JSX.Element {\n  const store = useStore();\n  const character = useCurrentCharacter();\n\n  return (\n    <Box maxW=\"sm\">\n      <Observer>\n        {() => (\n          <VStack w=\"full\">\n            <HStack w=\"full\" spacing=\"0\">\n              <Text fontSize=\"lg\">种族</Text>\n              <Spacer />\n              <CollectionEntitySelect\n                collection={store.collections.race}\n                value={character.raceId}\n                onChange={(id) => {\n                  character.raceId = id;\n                }}\n              />\n            </HStack>\n            <Divider />\n            {isEmpty(character.race.ability) ? (\n              <>\n                <HStack w=\"full\" spacing=\"0\">\n                  <Text fontSize=\"lg\">能力奖励</Text>\n                  <Spacer />\n                  <Select\n                    options={ABILITY_TYPES.map((t) => ({\n                      text: abilityTranslates[t],\n                      value: t,\n                      key: t,\n                    }))}\n                    value={character.bonusAbilityType}\n                    onChange={(v) => {\n                      character.bonusAbilityType = v;\n                    }}\n                  />\n                </HStack>\n                <Divider />\n              </>\n            ) : null}\n            <HStack w=\"full\" spacing=\"0\">\n              <Text fontSize=\"lg\">职业</Text>\n              <Spacer />\n              <CollectionEntitySelect\n                collection={store.collections.class}\n                value={character.classId}\n                onChange={(id) => {\n                  character.classId = id;\n                }}\n              />\n            </HStack>\n            <Divider />\n          </VStack>\n        )}\n      </Observer>\n      <Observer>\n        {() => {\n          const remainPoints = ABILITY_POINTS - character.abilityCost;\n\n          return (\n            <>\n              <HStack my=\"2\">\n                <Text fontSize=\"lg\">点数: {remainPoints} / 25</Text>\n                <Button size=\"xs\" onClick={() => character.resetBaseAbility()}>\n                  重置\n                </Button>\n              </HStack>\n              <VStack alignItems=\"start\">\n                {ABILITY_TYPES.map((ab) => {\n                  const score = character.baseAbility[ab];\n\n                  return (\n                    <AbilityInput\n                      key={ab}\n                      ability={ab}\n                      score={score}\n                      racial={character.bonusAbility[ab]}\n                      onChange={(v) => {\n                        character.baseAbility[ab] = v;\n                      }}\n                      isIncreaseDisabled={\n                        character.abilityCost >= ABILITY_POINTS ||\n                        getScoreCost(score + 1) - getScoreCost(score) > remainPoints\n                      }\n                    />\n                  );\n                })}\n              </VStack>\n            </>\n          );\n        }}\n      </Observer>\n    </Box>\n  );\n}\n","import { useMemo, useState, MutableRefObject } from 'react';\nimport { Box, InputGroup, Input, InputLeftElement } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\n\nimport { Collection } from '../store/collection';\nimport { Entity } from '../store/types';\n\ninterface Props {\n  collection: Collection;\n  onPick: (entity: Entity) => void;\n  inputRef?: MutableRefObject<HTMLInputElement | null>;\n}\n\nexport default function CollectionEntityPicker({\n  collection,\n  inputRef,\n  onPick,\n}: Props): JSX.Element {\n  const [searchKey, setSearchKey] = useState('');\n  const searchResult = useMemo(() => {\n    return collection?.fuse.search(searchKey) || [];\n  }, [searchKey]);\n\n  return (\n    <Box>\n      <InputGroup>\n        <InputLeftElement>\n          <Search2Icon color=\"gray.400\" />\n        </InputLeftElement>\n        <Input\n          ref={inputRef}\n          placeholder=\"Search\"\n          autoFocus\n          value={searchKey}\n          onChange={(e) => {\n            setSearchKey(e.target.value);\n          }}\n        />\n      </InputGroup>\n      {searchResult.length > 0 ? (\n        <Box borderTop=\"1px\" borderColor=\"gray.100\" mt=\"2\" maxH={300} overflow=\"auto\">\n          {searchResult.map(({ item }) => (\n            <Box\n              key={item.id}\n              onClick={() => onPick(item)}\n              p=\"2\"\n              borderBottom=\"1px\"\n              borderColor=\"gray.200\"\n              cursor=\"pointer\"\n              _hover={{\n                background: 'gray.100',\n              }}\n            >\n              {item.name} ({item.id})\n            </Box>\n          ))}\n        </Box>\n      ) : null}\n    </Box>\n  );\n}\n","import {\n  Button,\n  Flex,\n  Spacer,\n  Divider,\n  SimpleGrid,\n  PopoverTrigger,\n  Popover,\n  PopoverContent,\n  PopoverBody,\n  PopoverArrow,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerBody,\n} from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { useRef, useState } from 'react';\nimport { Observer } from 'mobx-react-lite';\n\nimport CollectionEntityPicker from '../CollectionEntityPicker';\n\nimport { useStore } from '../../store';\nimport { Spell as SpellType } from '../../store/types';\nimport { useCurrentCharacter } from '../../store/character';\nimport { useIsSmallerScreen } from '../../utils/react';\n\nimport Spell from '../Spell';\n\nexport default function CharacterSpellbook(): JSX.Element {\n  const store = useStore();\n  const initialFocusRef = useRef<HTMLInputElement>(null);\n  const character = useCurrentCharacter();\n  const [showSpell, setShowSpell] = useState<SpellType | null>();\n  const isSmallerScreen = useIsSmallerScreen();\n\n  return (\n    <>\n      <Popover initialFocusRef={initialFocusRef} placement=\"bottom-start\">\n        <PopoverTrigger>\n          <Button size=\"sm\">Add Spell</Button>\n        </PopoverTrigger>\n        <PopoverContent>\n          <PopoverBody>\n            <PopoverArrow />\n            <CollectionEntityPicker\n              collection={store.collections.spell}\n              inputRef={initialFocusRef}\n              onPick={(item) => {\n                character.spellbookIds.add(item.id);\n              }}\n            />\n          </PopoverBody>\n        </PopoverContent>\n      </Popover>\n      <Divider my=\"2\" />\n      <Observer>\n        {() => (\n          <SimpleGrid columns={isSmallerScreen ? 1 : 3} spacing=\"2\">\n            {Array.from(character.spellbook).map((spell) => (\n              <Flex\n                key={spell.id}\n                cursor=\"pointer\"\n                transition=\"box-shadow 0.2s ease-in-out\"\n                _hover={{ boxShadow: 'base' }}\n                border=\"1px\"\n                borderColor=\"gray.200\"\n                p=\"2\"\n                borderRadius=\"md\"\n                onClick={() => setShowSpell(spell)}\n                align=\"center\"\n              >\n                <Spell spell={spell} showMeta={false} showDescription={false} />\n                <Spacer />\n                <DeleteIcon\n                  color=\"red.500\"\n                  transition=\"color 0.2s ease-in-out\"\n                  _hover={{ color: 'red.600' }}\n                  onClick={(e) => {\n                    if (confirm('Are you sure?')) {\n                      character.spellbookIds.delete(spell.id);\n                    }\n                    e.stopPropagation();\n                  }}\n                />\n              </Flex>\n            ))}\n          </SimpleGrid>\n        )}\n      </Observer>\n\n      <Drawer\n        isOpen={Boolean(showSpell)}\n        onClose={() => {\n          setShowSpell(null);\n        }}\n        size=\"lg\"\n      >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerBody>{showSpell ? <Spell spell={showSpell} /> : null}</DrawerBody>\n            <DrawerCloseButton />\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport {\n  Box,\n  Container,\n  Button,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Divider,\n} from '@chakra-ui/react';\nimport { ChevronDownIcon } from '@chakra-ui/icons';\nimport { Route, useLocation, Switch, Redirect, useHistory } from 'react-router-dom';\n\nimport { useIsSmallerScreen } from '../utils/react';\nimport { CurrentCharacterContext } from '../store/character';\nimport { useStore } from '../store';\n\nimport NavLink from '../components/NavLink';\nimport CharacterBasic from '../components/Player/CharacterBasic';\nimport CharacterSpellbook from '../components/Player/CharacterSpellbook';\n\nconst SIDEBAR_WIDTH = 140;\n\nconst NAV_LINKS = [\n  { text: '基本', url: '/player/basic' },\n  { text: '法术', url: '/player/spellbook' },\n];\n\nexport default function PlayerPage(): JSX.Element {\n  const store = useStore();\n  const [currentCharacter] = useState(() => store.characters[0]);\n  const showMenuNav = useIsSmallerScreen();\n  const [currentMenuNavItem, setCurrentMenuNavItem] = useState(NAV_LINKS[0]);\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    const navLink = NAV_LINKS.find(({ url }) => url === location.pathname);\n\n    if (navLink) {\n      setCurrentMenuNavItem(navLink);\n    }\n  }, [location]);\n\n  return (\n    <CurrentCharacterContext.Provider value={currentCharacter}>\n      <Container>\n        {showMenuNav ? (\n          <>\n            <Menu matchWidth autoSelect={false}>\n              <MenuButton\n                as={Button}\n                rightIcon={<ChevronDownIcon />}\n                variant=\"outline\"\n                width=\"100%\"\n                colorScheme=\"blackAlpha\"\n              >\n                {currentMenuNavItem.text}\n              </MenuButton>\n              <MenuList>\n                {NAV_LINKS.map((n) => (\n                  <MenuItem\n                    key={n.url}\n                    onClick={() => {\n                      history.push(n.url);\n                    }}\n                  >\n                    <NavLink to={n.url} fontSize=\"large\">\n                      {n.text}\n                    </NavLink>\n                  </MenuItem>\n                ))}\n              </MenuList>\n            </Menu>\n            <Divider my=\"2\" />\n          </>\n        ) : (\n          <Box pos=\"fixed\" width={SIDEBAR_WIDTH} borderRight=\"1px\" borderColor=\"gray.400\">\n            {NAV_LINKS.map((n) => (\n              <Box key={n.url}>\n                <NavLink to={n.url} fontSize=\"large\">\n                  {n.text}\n                </NavLink>\n              </Box>\n            ))}\n          </Box>\n        )}\n        <Box pl={showMenuNav ? 0 : SIDEBAR_WIDTH + 20}>\n          <Switch>\n            <Route path=\"/player/basic\" component={CharacterBasic} />\n            <Route path=\"/player/spellbook\" component={CharacterSpellbook} />\n\n            <Redirect to=\"/player/basic\" />\n          </Switch>\n        </Box>\n      </Container>\n    </CurrentCharacterContext.Provider>\n  );\n}\n","export function stringToColor(str: string): string {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n  for (let i = 0; i < 3; i++) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += ('00' + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}\n","import { Observer } from 'mobx-react-lite';\nimport {\n  VStack,\n  HStack,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Box,\n  Text,\n  Button,\n  Spacer,\n} from '@chakra-ui/react';\n\nimport { useStore } from '../../store';\nimport { DMCharacter } from '../../store/dm';\nimport { stringToColor } from '../../utils/misc';\n\ninterface Props {\n  character: DMCharacter;\n}\n\nexport default function Character({ character: c }: Props): JSX.Element {\n  const { dm } = useStore();\n\n  return (\n    <Observer>\n      {() => (\n        <VStack\n          border=\"1px\"\n          borderColor=\"gray.200\"\n          borderRadius=\"md\"\n          spacing={0}\n          opacity={parseInt(c.hp) <= 0 ? 0.6 : 1}\n        >\n          <Box borderBottom=\"1px\" borderColor=\"gray.200\" p=\"2\" w=\"100%\">\n            <Text fontSize=\"xx-small\" color=\"gray.400\">\n              姓名\n            </Text>\n            <InputGroup>\n              <Input\n                value={c.name}\n                onChange={(e) => {\n                  c.name = e.target.value;\n                }}\n                variant=\"unstyled\"\n                fontSize=\"lg\"\n                fontWeight=\"bold\"\n              />\n              <InputRightElement w=\"4\" h=\"4\" bgColor={stringToColor(c.name)} top=\"6px\" />\n            </InputGroup>\n          </Box>\n\n          <HStack spacing={0} borderBottom=\"1px\" borderColor=\"gray.200\">\n            <Box p=\"2\" borderRight=\"1px\" borderColor=\"gray.200\">\n              <Text fontSize=\"xx-small\" color=\"gray.400\">\n                先攻加值\n              </Text>\n              <Input\n                value={c.initiative}\n                onChange={(e) => {\n                  c.initiative = e.target.value;\n                }}\n                variant=\"unstyled\"\n                type=\"number\"\n              />\n            </Box>\n            <Box p=\"2\" borderRight=\"1px\" borderColor=\"gray.200\">\n              <Text fontSize=\"xx-small\" color=\"gray.400\">\n                HP\n              </Text>\n              <Input\n                value={c.hp}\n                onChange={(e) => {\n                  c.hp = e.target.value;\n                }}\n                variant=\"unstyled\"\n                type=\"number\"\n              />\n            </Box>\n            <Box p=\"2\">\n              <Text fontSize=\"xx-small\" color=\"gray.400\">\n                Max HP\n              </Text>\n              <Input\n                value={c.maxHP}\n                onChange={(e) => {\n                  c.maxHP = e.target.value;\n                }}\n                variant=\"unstyled\"\n                type=\"number\"\n              />\n            </Box>\n          </HStack>\n          <HStack p=\"2\" justify=\"flex-start\" align=\"center\" w=\"full\">\n            <Text fontSize=\"sm\">\n              先攻: {parseInt(c.initiative) + c.rolledInitiative}({c.initiative} +{' '}\n              {c.rolledInitiative})\n            </Text>\n            <Spacer />\n            <Button size=\"xs\" onClick={() => dm.rollInitiative(c)}>\n              投先攻\n            </Button>\n            <Button size=\"xs\" onClick={() => dm.heal(c)}>\n              恢复\n            </Button>\n            <Button\n              colorScheme=\"red\"\n              size=\"xs\"\n              onClick={() => {\n                if (confirm('确定移除此人物?')) {\n                  dm.removeCharacter(c);\n                }\n              }}\n            >\n              删除\n            </Button>\n          </HStack>\n        </VStack>\n      )}\n    </Observer>\n  );\n}\n","import { Button, ButtonGroup } from '@chakra-ui/react';\n\ninterface Props<T> {\n  options: Array<{ text: string; value: T; key?: string }>;\n  value: T;\n  onChange: (v: T) => void;\n}\n\nexport default function ButtonSwitch<T = string>({\n  options,\n  value,\n  onChange,\n}: Props<T>): JSX.Element {\n  return (\n    <ButtonGroup isAttached>\n      {options.map(({ text, value: v, key }, i) => (\n        <Button\n          key={key ?? i}\n          onClick={() => onChange(v)}\n          colorScheme={value === v ? 'teal' : 'gray'}\n        >\n          {text}\n        </Button>\n      ))}\n    </ButtonGroup>\n  );\n}\n","import { useState } from 'react';\nimport { Observer } from 'mobx-react-lite';\nimport { Button, Container, SimpleGrid, HStack, Spacer } from '@chakra-ui/react';\n\nimport { useStore } from '../store';\nimport { useIsSmallerScreen } from '../utils/react';\n\nimport DMCharacter from '../components/DM/Character';\nimport ButtonSwitch from '../components/ButtonSwitch';\n\nexport default function DMPage(): JSX.Element {\n  const { dm } = useStore();\n  const [order, setOrder] = useState('normal');\n  const isSmallerScreen = useIsSmallerScreen();\n\n  return (\n    <Container>\n      <HStack w=\"full\">\n        <Button\n          onClick={() => {\n            dm.addCharacter('无名氏');\n          }}\n        >\n          添加人物\n        </Button>\n        <Button\n          onClick={() => {\n            dm.addCharacter('敌人');\n          }}\n        >\n          添加敌人\n        </Button>\n        <Spacer />\n        <Button onClick={() => dm.rollAllInitiative()}>全员投先攻</Button>\n        <Button onClick={() => dm.healAll()}>全员恢复</Button>\n        <ButtonSwitch\n          options={[\n            { text: '创建顺序', value: 'normal' },\n            { text: '先攻顺序', value: 'initiative' },\n          ]}\n          value={order}\n          onChange={(v) => setOrder(v)}\n        />\n      </HStack>\n\n      <Observer>\n        {() => (\n          <SimpleGrid py=\"2\" spacing=\"2\" columns={isSmallerScreen ? 1 : 3}>\n            {(order === 'initiative' ? dm.sortedCharacters : dm.characters).map((c) => (\n              <DMCharacter key={c.id} character={c} />\n            ))}\n          </SimpleGrid>\n        )}\n      </Observer>\n    </Container>\n  );\n}\n","import { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { Box } from '@chakra-ui/react';\n\nimport Navbar from './components/Navbar';\nimport PlayerPage from './pages/PlayerPage';\nimport DMPage from './pages/DMPage';\n\nfunction App(): JSX.Element {\n  return (\n    <Router basename={process.env.NODE_ENV === 'development' ? '/' : '/pathfinder-workbench'}>\n      <Box>\n        <Navbar />\n\n        <Box pt=\"4\">\n          <Switch>\n            <Route path=\"/player\" component={PlayerPage} />\n            <Route path=\"/dm\" component={DMPage} />\n\n            <Redirect to=\"/player\" />\n          </Switch>\n        </Box>\n      </Box>\n    </Router>\n  );\n}\n\nexport default App;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react';\nimport { configure } from 'mobx';\n\nimport { CONTAINER_WIDTH } from './constant';\nimport { StoreContext, Store } from './store';\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nconfigure({ enforceActions: 'never' });\n\nconst theme = extendTheme({\n  components: {\n    Container: {\n      baseStyle: {\n        maxW: CONTAINER_WIDTH,\n      },\n    },\n  },\n});\n\nconst store = new Store();\n\nasync function init() {\n  await store.init();\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <ChakraProvider theme={theme}>\n        <StoreContext.Provider value={store}>\n          <App />\n        </StoreContext.Provider>\n      </ChakraProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\ninit();\n\nlet refreshing = false;\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({\n  onUpdate: (registration) => {\n    if (confirm('New version found, update?')) {\n      navigator.serviceWorker.addEventListener('controllerchange', () => {\n        if (refreshing) {\n          return;\n        }\n\n        refreshing = true;\n        window.location.reload();\n      });\n\n      registration.waiting?.postMessage({ type: 'SKIP_WAITING' });\n    }\n  },\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}