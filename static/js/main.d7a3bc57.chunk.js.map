{"version":3,"sources":["store/collection.ts","store/index.ts","utils/react.ts","utils/spell.ts","components/Spell.tsx","components/QuickSearch.tsx","components/QuickSearchToggler.tsx","components/Navbar.tsx","pages/SearchSpellPage.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Collection","type","data","options","fuse","this","Fuse","includeScore","threshold","keys","searchFields","Store","collections","SPELL_DATA","key","limitEach","result","spell","weapon","forEach","c","search","limit","defaults","context","createContext","useContext","Error","createContextNoNullCheck","useStore","StoreContext","translates","school","level","domain","castingTime","components","range","effect","target","area","aiming","duration","saving","resistance","SpellMeta","size","Object","meta","map","k","pl","color","width","spellTranslates","Spell","border","borderColor","p","mb","className","direction","align","book","toUpperCase","as","fontSize","name","style","fontWeight","id","pt","whiteSpace","dangerouslySetInnerHTML","__html","description","QuickSearch","store","useState","searchKey","setSearchKey","searchResult","useMemo","quickSearch","flexGrow","flexShrink","Search2","placeholder","autoFocus","value","onChange","e","overflowY","item","QuickSearchToggler","children","useDisclosure","isOpen","onClose","onOpen","onClick","d","flexDir","Navbar","bg","borderBottom","py","alignItems","aria-label","icon","SearchSpellPage","App","path","component","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","Container","baseStyle","maxW","ReactDOM","render","StrictMode","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7a3bc57.chunk.js","sourcesContent":["import Fuse from 'fuse.js';\n\nimport { EntityTypes } from './types';\n\nexport type CollectionType = 'spell' | 'weapon';\n\nexport interface CollectionOptions {\n  searchFields: Array<string>;\n}\n\nexport class Collection<T = EntityTypes> {\n  type: CollectionType;\n  data: Array<T>;\n\n  fuse: Fuse<T>;\n\n  constructor(type: CollectionType, data: Array<T>, options: CollectionOptions) {\n    this.type = type;\n    this.data = data;\n\n    this.fuse = new Fuse(data, {\n      includeScore: true,\n      threshold: 0.2,\n\n      keys: options.searchFields,\n    });\n  }\n}\n","import Fuse from 'fuse.js';\n\nimport SPELL_DATA from '../data/spells.json';\nimport { createContextNoNullCheck } from '../utils/react';\n\nimport { EntityTypes, Spell } from './types';\nimport { Collection, CollectionType } from './collection';\n\nexport class Store {\n  collections: Array<Collection>;\n\n  constructor() {\n    this.collections = [\n      new Collection<Spell>('spell', SPELL_DATA, {\n        searchFields: ['id', 'name'],\n      }),\n    ];\n  }\n\n  quickSearch(key: string, limitEach = 20): Record<CollectionType, Fuse.FuseResult<EntityTypes>[]> {\n    const result: Record<CollectionType, Fuse.FuseResult<EntityTypes>[]> = {\n      spell: [],\n      weapon: [],\n    };\n\n    this.collections.forEach((c) => {\n      result[c.type] = c.fuse.search(key, { limit: limitEach });\n    });\n\n    return result;\n  }\n}\n\nexport const [useStore, StoreContext] = createContextNoNullCheck<Store>();\n","import { createContext, useContext } from 'react';\n\nexport function createContextNoNullCheck<T>(defaults?: T): [() => T, React.Context<T | undefined>] {\n  const context = createContext<T | undefined>(defaults);\n\n  function use(): T {\n    const c = useContext(context);\n\n    if (typeof c === 'undefined') {\n      throw new Error('useContext must be inside a Provider with a value');\n    }\n\n    return c;\n  }\n\n  return [use, context];\n}\n","export const translates = {\n  school: '学派',\n  level: '环位',\n  domain: '领域',\n  castingTime: '施法时间',\n  components: '成分',\n  range: '距离',\n  effect: '效果',\n  target: '目标',\n  area: '区域',\n  aiming: '目标, 区域或区域',\n  duration: '持续时间',\n  saving: '豁免',\n  resistance: '法术抗力',\n};\n","import './Spell.scss';\n\nimport { Box, Heading, Badge, Text, Stack, Table, Tbody, Tr, Td } from '@chakra-ui/react';\n\nimport { Spell as SpellType, SpellMeta as SpellMetaType } from '../store/types';\nimport { translates as spellTranslates } from '../utils/spell';\n\ninterface Props {\n  spell: SpellType;\n}\n\nexport function SpellMeta({ spell }: Props): JSX.Element {\n  return (\n    <Table size=\"sm\">\n      <Tbody>\n        {(Object.keys(spell.meta) as Array<keyof SpellMetaType>).map((k) => (\n          <Tr key={k}>\n            <Td pl=\"0\" color=\"blue.500\" width=\"8em\">\n              {spellTranslates[k]}\n            </Td>\n            <Td>{spell.meta[k]}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n}\n\nexport default function Spell({ spell }: Props): JSX.Element {\n  return (\n    <Box border=\"1px\" borderColor=\"gray.200\" p=\"2\" mb=\"2\" className=\"spell\">\n      <Stack direction=\"row\" align=\"center\" mb=\"2\">\n        <Badge>{spell.book.toUpperCase()}</Badge>\n        <Heading as=\"h4\" fontSize=\"lg\" color=\"purple.600\">\n          {spell.name} <small style={{ fontWeight: 'normal' }}>({spell.id})</small>\n        </Heading>\n      </Stack>\n\n      <SpellMeta spell={spell} />\n\n      <Text\n        pt=\"1\"\n        whiteSpace=\"pre-wrap\"\n        dangerouslySetInnerHTML={{ __html: spell.description }}\n        className=\"spell-description\"\n      />\n    </Box>\n  );\n}\n","import { useMemo, useState } from 'react';\nimport { Box, InputGroup, Input, InputLeftElement } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\n\nimport { useStore } from '../store';\nimport { Spell as SpellType } from '../store/types';\nimport Spell from './Spell';\n\nexport default function QuickSearch(): JSX.Element {\n  const store = useStore();\n  const [searchKey, setSearchKey] = useState('');\n  const searchResult = useMemo(() => store.quickSearch(searchKey), [searchKey]);\n\n  return (\n    <>\n      <Box flexGrow={0} flexShrink={0} mb=\"2\">\n        <InputGroup>\n          <InputLeftElement>\n            <Search2Icon color=\"gray.400\" />\n          </InputLeftElement>\n          <Input\n            placeholder=\"Search Anything\"\n            autoFocus\n            value={searchKey}\n            onChange={(e) => {\n              setSearchKey(e.target.value);\n            }}\n          />\n        </InputGroup>\n      </Box>\n      <Box flexGrow={1} overflowY=\"auto\">\n        {searchResult.spell.map(({ item }) => (\n          <Spell spell={item as SpellType} key={item.id} />\n        ))}\n      </Box>\n    </>\n  );\n}\n","import {\n  Drawer,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerBody,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nimport QuickSearch from './QuickSearch';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nexport default function QuickSearchToggler({ children }: Props): JSX.Element {\n  const { isOpen, onClose, onOpen } = useDisclosure();\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Drawer isOpen={isOpen} onClose={onClose} size=\"lg\">\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerHeader>Quick Search</DrawerHeader>\n            <DrawerBody d=\"flex\" flexDir=\"column\">\n              <QuickSearch />\n            </DrawerBody>\n            <DrawerCloseButton />\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  );\n}\n","import { Box, Heading, Container, Flex, Spacer, IconButton } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\n\nimport QuickSearchToggler from './QuickSearchToggler';\n\nexport default function Navbar(): JSX.Element {\n  return (\n    <Box bg=\"white\" borderBottom=\"1px\" borderColor=\"gray.300\" py={3}>\n      <Container>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h1\" fontSize=\"initial\">\n            Pathfinder Workbench\n          </Heading>\n          <Spacer />\n          <QuickSearchToggler>\n            <IconButton aria-label=\"Quick Search\" size=\"sm\" icon={<Search2Icon />} />\n          </QuickSearchToggler>\n        </Flex>\n      </Container>\n    </Box>\n  );\n}\n","export default function SearchSpellPage(): JSX.Element {\n  return <div>asdasd</div>;\n}\n","import { Route } from 'wouter';\nimport { Box } from '@chakra-ui/react';\n\nimport Navbar from './components/Navbar';\nimport SearchSpellPage from './pages/SearchSpellPage';\n\nfunction App(): JSX.Element {\n  return (\n    <Box>\n      <Navbar />\n\n      <Route path=\"/spell\" component={SearchSpellPage} />\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react';\n\nimport { StoreContext, Store } from './store';\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nconst theme = extendTheme({\n  components: {\n    Container: {\n      baseStyle: {\n        maxW: '1024px',\n      },\n    },\n  },\n});\n\nconst store = new Store();\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <StoreContext.Provider value={store}>\n        <App />\n      </StoreContext.Provider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}