{"version":3,"sources":["constant.ts","utils/react.ts","store/dm.ts","store/collection.ts","store/character.ts","store/index.ts","utils/entity.ts","utils/spell.ts","components/Spell.tsx","utils/feat.ts","components/Feat.tsx","components/QuickSearch.tsx","components/QuickSearchToggler.tsx","components/NavLink.tsx","components/Navbar.tsx","components/CharacterFeats.tsx","components/CollectionEntityPicker.tsx","components/CharacterSpellbook.tsx","pages/PlayerPage.tsx","utils/misc.ts","components/DM/Character.tsx","pages/DMPage.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["ENTITY_COLORS","spell","feat","weapon","createContextNoNullCheck","defaults","context","createContext","c","useContext","Error","useIsSmallerScreen","useMediaQuery","CONTAINER_WIDTH","DMStore","characters","makeObservable","this","rollAllInitiative","action","sortedCharacters","computed","observable","array","sort","a","b","ac","parseInt","initiative","rolledInitiative","name","push","id","shortid","getNonConflictName","hp","remove","Math","ceil","random","forEach","rollInitiative","existed","filter","startsWith","length","Collection","type","data","options","fuse","Fuse","includeScore","threshold","keys","searchFields","find","s","Character","spellbook","generate","set","Set","deep","JSON","stringify","Array","from","map","spellCollection","json","parse","character","spellId","getById","add","useCurrentCharacter","CurrentCharacterContext","Store","dm","collections","SPELL_DATA","FEAT_DATA","restore","persist","key","limitEach","search","limit","autorun","entries","k","v","replace","useStore","StoreContext","entityTypeTranslates","translates","school","level","domain","castingTime","components","range","effect","target","area","aiming","duration","saving","resistance","SpellMeta","size","mt","Object","meta","pl","color","width","spellTranslates","Spell","showName","showMeta","showDescription","className","direction","align","book","toUpperCase","as","fontSize","style","fontWeight","pt","whiteSpace","dangerouslySetInnerHTML","__html","description","featTranslates","requirement","benefit","normal","special","FeatMeta","Feat","showBrief","fontStyle","brief","QuickSearchResultItem","item","el","mb","border","borderColor","p","borderRadius","_hover","boxShadow","transition","QuickSearch","store","useState","searchKey","setSearchKey","searchResult","useMemo","quickSearch","currentType","setCurrentType","isSmallerScreen","t","resultType","results","flexGrow","flexShrink","Search2","placeholder","autoFocus","value","onChange","e","matchWidth","autoSelect","Button","rightIcon","ChevronDown","variant","colorScheme","onClick","r","bgColor","cursor","opacity","overflowY","QuickSearchToggler","children","useDisclosure","isOpen","onClose","onOpen","d","flexDir","NavLink","to","props","match","useRouteMatch","RouterLink","Navbar","bg","borderBottom","py","alignItems","mr","aria-label","icon","CharacterFeats","CollectionEntityPicker","collectionEntityType","inputRef","onPick","collection","ref","borderTop","maxH","overflow","background","CharacterSpellbook","initialFocusRef","useRef","showSpell","setShowSpell","placement","my","columns","spacing","Delete","confirm","delete","stopPropagation","Boolean","NAV_LINKS","text","url","GiSpellBook","GiDiploma","PlayerPage","currentCharacter","showMenuNav","currentMenuNavItem","setCurrentMenuNavItem","location","useLocation","history","useHistory","useEffect","navLink","pathname","Provider","n","pos","borderRight","SIDEBAR_WIDTH","path","component","stringToColor","str","hash","i","charCodeAt","toString","substr","w","h","top","justify","removeCharacter","DMPage","battleView","setBattleView","addCharacter","App","basename","isLocalhost","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configure","enforceActions","theme","extendTheme","Container","baseStyle","maxW","init","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"0y07GAEaA,EAAgB,CAC3BC,MAAO,aACPC,KAAM,UACNC,OAAQ,c,0DCAH,SAASC,EAA4BC,GAC1C,IAAMC,EAAUC,wBAA6BF,GAY7C,MAAO,CAVP,WACE,IAAMG,EAAIC,qBAAWH,GAErB,GAAiB,qBAANE,EACT,MAAM,IAAIE,MAAM,qDAGlB,OAAOF,GAGIF,GAGR,SAASK,IACd,OAAOC,YAAc,eAAD,OAAgBC,KAAhB,QAA0C,G,6BCX3CC,E,WAGnB,aAAe,yBAFfC,gBAEc,EACZC,YAAeC,KAAM,CACnBC,kBAAmBC,IACnBC,iBAAkBC,MAGpBJ,KAAKF,WAAaO,IAAWC,MAAM,I,kDAGrC,WACE,OAAO,YAAIN,KAAKF,YAAYS,MAAK,SAACC,EAAGC,GACnC,IAAMC,EAAKC,SAASH,EAAEI,YAAcJ,EAAEK,iBAGtC,OAFWF,SAASF,EAAEG,YAAcH,EAAEI,iBAE1BH,O,0BAIhB,SAAaI,GACXd,KAAKF,WAAWiB,KAAK,CACnBC,GAAIC,MACJH,KAAMd,KAAKkB,mBAAmBJ,GAC9BF,WAAY,IACZO,GAAI,IACJN,iBAAkB,M,6BAItB,SAAgBtB,GACdS,KAAKF,WAAWsB,OAAO7B,K,4BAGzB,SAAeA,GACbA,EAAEsB,iBAAmBQ,KAAKC,KAAqB,GAAhBD,KAAKE,Y,+BAGtC,WAA2B,IAAD,OACxBvB,KAAKF,WAAW0B,SAAQ,SAACjC,GAAD,OAAO,EAAKkC,eAAelC,Q,gCAGrD,SAAmBuB,GACjB,IAAMY,EAAU1B,KAAKF,WAAW6B,QAAO,SAACpC,GAAD,OAAOA,EAAEuB,KAAKc,WAAWd,MAEhE,MAAM,GAAN,OAAUA,EAAV,YAAkBY,EAAQG,OAAS,O,cC/C1BC,EAAb,WAME,WAAYC,EAA4BC,EAAgBC,GAA6B,yBALrFF,UAKoF,OAJpFC,UAIoF,OAFpFE,UAEoF,EAClFlC,KAAK+B,KAAOA,EACZ/B,KAAKgC,KAAOA,EAEZhC,KAAKkC,KAAO,IAAIC,IAAKH,EAAM,CACzBI,cAAc,EACdC,UAAW,GAEXC,KAAML,EAAQM,eAdpB,2CAkBE,SAAQvB,GACN,OAAOhB,KAAKgC,KAAKQ,MAAK,SAACC,GAAD,OAAOA,EAAEzB,KAAOA,MAAO,SAnBjD,K,QCHqB0B,E,WAKnB,WAAY5B,EAAcE,GAAc,yBAJxCA,QAIuC,OAHvCF,UAGuC,OAFvC6B,eAEuC,EACrC3C,KAAKc,KAAOA,EACZd,KAAKgB,GAAL,OAAUA,QAAV,IAAUA,IAAMC,IAAQ2B,WACxB5C,KAAK2C,UAAYtC,IAAWwC,IAAI,IAAIC,IAAO,CAAEC,MAAM,I,kDAGrD,SAAiBxD,GACf,OAAOyD,KAAKC,UAAU,CACpBjC,GAAIzB,EAAEyB,GACNF,KAAMvB,EAAEuB,KACR6B,UAAWO,MAAMC,KAAK5D,EAAEoD,WAAWS,KAAI,SAACX,GAAD,OAAOA,EAAEzB,U,mBAIpD,SAAayB,EAAWY,GACtB,IADqE,EAC/DC,EAAON,KAAKO,MAAMd,GAClBe,EAAY,IAAId,EAAUY,EAAKxC,KAAMwC,EAAKtC,IAFqB,cAI/CsC,EAAKX,WAJ0C,IAIrE,2BAAsC,CAAC,IAA5Bc,EAA2B,QAC9BzE,EAAQqE,EAAgBK,QAAQD,GAElCzE,GACFwE,EAAUb,UAAUgB,IAAI3E,IARyC,8BAYrE,OAAOwE,M,OAImDrE,I,mBAAhDyE,E,KAAqBC,E,KC7BtBC,EAAb,WAME,aAAe,yBALfC,QAKc,OAJdC,iBAIc,OAFdlE,gBAEc,EACZE,KAAK+D,GAAK,IAAIlE,EAEdG,KAAKgE,YAAc,CACjB,IAAIlC,EAAkB,QAASmC,EAAY,CACzC1B,aAAc,CAAC,KAAM,UAEvB,IAAIT,EAAiB,OAAQoC,EAAW,CACtC3B,aAAc,CAAC,KAAM,WAIzBvC,KAAKF,WAAaO,IAAWC,MAAM,GAAI,CAAEyC,MAAM,IAlBnD,+EAqBE,sBAAAvC,EAAA,sEACQR,KAAKmE,UADb,OAEEnE,KAAKoE,UAFP,gDArBF,+EA0BE,SACEC,GAE2D,IAD3DC,EAC0D,uDAD9C,GAEZ,OAAOtE,KAAKgE,YAAYZ,KAAI,SAAC7D,GAAD,MAAO,CAACA,EAAEwC,KAAMxC,EAAE2C,KAAKqC,OAAOF,EAAK,CAAEG,MAAOF,UA9B5E,qBAiCE,WAAiB,IAAD,OACdG,aAAQ,WACN,EAAK3E,WAAW0B,SAAQ,SAACjC,GACvBsD,YAAI,aAAD,OAActD,EAAEyB,IAAM0B,EAAUO,UAAU1D,OAG/CsD,YAAI,gBAAiBG,KAAKC,UAAU,EAAKc,GAAGjE,kBAvClD,4DA2CE,iCAAAU,EAAA,sEAC0BkE,cAD1B,cAGYlD,SAAQ,YAAa,IAAD,mBAAVmD,EAAU,KAAPC,EAAO,KACX,kBAAND,IACLA,EAAE/C,WAAW,cACf,EAAK9B,WAAWiB,KAAK2B,EAAUa,MAAMqB,EAAG,EAAKZ,YAAY,KAGjD,kBAANW,GACF,EAAKZ,GAAGjE,WAAW+E,QAAQ7B,KAAKO,MAAMqB,QAKxC5E,KAAKF,WAAW+B,OAAS,GAC3B7B,KAAKF,WAAWiB,KAAK,IAAI2B,EAAU,YAhBvC,gDA3CF,6D,EAgEwCvD,I,mBAA1B2F,E,KAAUC,E,qMC7EXC,GAAuB,CAClChG,MAAO,eACPC,KAAM,eACNC,OAAQ,gB,uCCHG+F,GAAa,CACxBC,OAAQ,eACRC,MAAO,eACPC,OAAQ,eACRC,YAAa,2BACbC,WAAY,eACZC,MAAO,eACPC,OAAQ,eACRC,OAAQ,eACRC,KAAM,eACNC,OAAQ,+CACRC,SAAU,2BACVC,OAAQ,eACRC,WAAY,4B,QCEP,SAASC,GAAT,GAAmD,IAA9B/G,EAA6B,EAA7BA,MAC1B,OACE,eAAC,KAAD,CAAOgH,KAAK,KAAKC,GAAG,IAApB,SACE,eAAC,KAAD,UACIC,OAAO5D,KAAKtD,EAAMmH,MAAqC/C,KAAI,SAACuB,GAAD,OAC3D,gBAAC,KAAD,WACE,eAAC,KAAD,CAAIyB,GAAG,IAAIC,MAAM,WAAWC,MAAM,MAAlC,SACGC,GAAgB5B,KAEnB,eAAC,KAAD,UAAK3F,EAAMmH,KAAKxB,OAJTA,UAYJ,SAAS6B,GAAT,GAKS,IAJtBxH,EAIqB,EAJrBA,MAIqB,IAHrByH,gBAGqB,aAFrBC,gBAEqB,aADrBC,uBACqB,SACrB,OACE,gBAAC,IAAD,CAAKC,UAAU,QAAf,UACGH,EACC,gBAAC,IAAD,CAAOI,UAAU,MAAMC,MAAM,SAA7B,UACE,eAAC,KAAD,UAAQ9H,EAAM+H,KAAKC,gBACnB,gBAAC,IAAD,CAASC,GAAG,KAAKC,SAAS,KAAKb,MAAOtH,EAAcC,MAApD,UACGA,EAAM8B,KADT,IACe,yBAAOqG,MAAO,CAAEC,WAAY,UAA5B,cAA0CpI,EAAMgC,GAAhD,aAGf,KAEH0F,EAAW,eAACX,GAAD,CAAW/G,MAAOA,IAAY,KAEzC2H,EACC,eAAC,KAAD,CACEU,GAAG,IACHC,WAAW,WACXC,wBAAyB,CAAEC,OAAQxI,EAAMyI,aACzCb,UAAU,sBAEV,Q,WC1DGc,GAAiB,CAC5BC,YAAa,2BACbC,QAAS,2BACTC,OAAQ,2BACRC,QAAS,4BCYX,SAASC,GAAT,GAAiD,IAA7B9I,EAA4B,EAA5BA,KAClB,OACE,eAAC,KAAD,CAAO+G,KAAK,KAAKC,GAAG,IAApB,SACE,eAAC,KAAD,UACIC,OAAO5D,KAAKrD,EAAKkH,MAAoC/C,KAAI,SAACuB,GAAD,OACzD,gBAAC,KAAD,WACE,eAAC,KAAD,CAAIyB,GAAG,IAAIC,MAAM,WAAWC,MAAM,MAAlC,SACGoB,GAAe/C,KAElB,eAAC,KAAD,UAAK1F,EAAKkH,KAAKxB,OAJRA,UAYJ,SAASqD,GAAT,GAMS,IALtB/I,EAKqB,EALrBA,KAKqB,IAJrBwH,gBAIqB,aAHrBwB,iBAGqB,aAFrBvB,gBAEqB,aADrBC,uBACqB,SACrB,OACE,gBAAC,IAAD,CAAKC,UAAU,OAAf,UACGH,EACC,gBAAC,IAAD,CAAQI,UAAU,MAAMC,MAAM,SAA9B,UACE,eAAC,KAAD,UAAQ7H,EAAK8H,KAAKC,gBAClB,gBAAC,IAAD,CAASC,GAAG,KAAKC,SAAS,KAAKb,MAAOtH,EAAcE,KAApD,UACGA,EAAK6B,KADR,IACc,yBAAOqG,MAAO,CAAEC,WAAY,UAA5B,cAA0CnI,EAAK+B,GAA/C,aAGd,KAEHiH,EACC,eAAC,KAAD,CAAMhC,GAAG,IAAIiC,UAAU,SAAvB,SACGjJ,EAAKkJ,QAEN,KAEHzB,EAAW,eAACqB,GAAD,CAAU9I,KAAMA,IAAW,KAEtC0H,GAAmB1H,EAAKwI,YACvB,eAAC,KAAD,CACEJ,GAAG,IACHC,WAAW,WACXC,wBAAyB,CAAEC,OAAQvI,EAAKwI,aACxCb,UAAU,qBAEV,QCzCV,SAASwB,GAAT,GAA8F,IAA7DC,EAA4D,EAA5DA,KAC3BC,EAAK,KAET,OAH2F,EAAtDvG,MAInC,IAAK,QACHuG,EAAK,eAAC,GAAD,CAAOtJ,MAAOqJ,IACnB,MACF,IAAK,OACHC,EAAK,eAAC,GAAD,CAAMrJ,KAAMoJ,IAMrB,OACE,eAAC,IAAD,CACEE,GAAG,IACHC,OAAO,MACPC,YAAY,WACZC,EAAE,IACFC,aAAa,KACbC,OAAQ,CACNH,YAAa,WACbI,UAAW,QAEbC,WAAW,sBAVb,SAYGR,IAKQ,SAASS,KACtB,IAAMC,EAAQlE,IADmC,EAEfmE,mBAAS,IAFM,mBAE1CC,EAF0C,KAE/BC,EAF+B,KAG3CC,EAAeC,mBAAQ,kBAAML,EAAMM,YAAYJ,KAAY,CAACA,IAHjB,EAIXD,oBAAS,+BAAMG,QAAN,IAAMA,GAAN,UAAMA,EAAe,UAArB,aAAM,EAAoB,MAJxB,mBAI1CG,EAJ0C,KAI7BC,EAJ6B,KAK3CC,EAAkB/J,IALyB,EAMnB0J,EAAa5G,MAAK,gBAAEkH,EAAF,2BAASH,IAAgBG,MAAM,GAN9B,mBAM1CC,EAN0C,KAM9BC,EAN8B,KAQjD,OACE,uCACE,gBAAC,IAAD,CAAKC,SAAU,EAAGC,WAAY,EAAGvB,GAAG,IAApC,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,UACE,eAACwB,EAAA,EAAD,CAAa1D,MAAM,eAErB,eAAC,KAAD,CACE2D,YAAY,kBACZC,WAAS,EACTC,MAAOhB,EACPiB,SAAU,SAACC,GACTjB,EAAaiB,EAAE3E,OAAOyE,aAI3BN,IAAkB,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAAS/H,QAAS,EAC5B4H,EACE,gBAAC,KAAD,CAAMY,YAAU,EAACC,YAAY,EAA7B,UACE,eAAC,KAAD,CACErE,GAAG,IACHgB,GAAIsD,KACJC,UAAW,eAACC,GAAA,EAAD,IACXC,QAAQ,UACRpE,MAAM,OACNqE,YAAY,aANd,SAQG3F,GAAqBuE,KAExB,eAAC,KAAD,UACGH,EAAahG,KAAI,mCAAErB,EAAF,iBACdF,OAAS,EACT,eAAC,KAAD,CAEE+I,QAAS,WACPpB,EAAezH,IAHnB,SAMGiD,GAAqBjD,IALjBA,GAOL,aAKV,eAAC,IAAD,CAAQsF,GAAG,IAAX,SACG+B,EAAahG,KAAI,mCAAErB,EAAF,KAAQ8I,EAAR,YAChBA,EAAEhJ,OAAS,EACT,gBAAC,KAAD,CAEE+I,QAAS,kBAAMpB,EAAezH,IAC9B+I,QAAS/L,EAAcgD,GACvBsE,MAAM,QACN0E,OAAO,UACP/E,KAAK,KACLgF,QAASjJ,IAASwH,EAAc,EAAI,GAPtC,UASGvE,GAAqBjD,GATxB,IASgC8I,EAAEhJ,OATlC,MACOE,GAUL,UAIR,QAEL6H,GAAWD,IAAqB,OAAPC,QAAO,IAAPA,OAAA,EAAAA,EAAS/H,QAAS,EAC1C,eAAC,IAAD,CAAKgI,SAAU,EAAGoB,UAAU,OAA5B,SACGrB,EAAQxG,KAAI,gBAAGiF,EAAH,EAAGA,KAAH,OACX,eAACD,GAAD,CAAqCrG,KAAM4H,EAAYtB,KAAMA,GAAjCA,EAAKrH,QAFG2I,GAKtC,QCxHK,SAASuB,GAAT,GAA+D,IAAjCC,EAAgC,EAAhCA,SAAgC,EACvCC,cAA5BC,EADmE,EACnEA,OAAQC,EAD2D,EAC3DA,QAASC,EADkD,EAClDA,OAEzB,OACE,uCACE,uBAAMX,QAASW,EAAf,SAAwBJ,IAExB,eAAC,IAAD,CAAQE,OAAQA,EAAQC,QAASA,EAAStF,KAAK,KAA/C,SACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,2BACA,eAAC,IAAD,CAAYwF,EAAE,OAAOC,QAAQ,SAA7B,SACE,eAAC1C,GAAD,MAEF,eAAC,IAAD,c,iCCrBG,SAAS2C,GAAT,GAAwD,IAArCC,EAAoC,EAApCA,GAAOC,EAA6B,uBAC9DC,EAAQC,YAAcH,GAE5B,OAAO,eAAC,KAAD,cAAM1E,GAAI8E,IAAY1F,MAAOwF,EAAQ,WAAa,QAASF,GAAIA,GAAQC,ICLjE,SAASI,KACtB,OACE,eAAC,IAAD,CAAKC,GAAG,QAAQC,aAAa,MAAMzD,YAAY,WAAW0D,GAAI,EAA9D,SACE,eAAC,IAAD,UACE,gBAAC,IAAD,CAAMC,WAAW,SAAjB,UACE,gBAAC,IAAD,CAAQC,GAAG,IAAIhG,MAAM,WAArB,UACE,eAAC,IAAD,CAAgBL,KAAM,KACtB,eAAC,IAAD,CAASiB,GAAG,KAAKC,SAAS,QAA1B,qBAIF,gBAAC,IAAD,WACE,eAACwE,GAAD,CAASC,GAAG,UAAZ,oBACA,eAACD,GAAD,CAASC,GAAG,MAAZ,mBAEF,eAAC,IAAD,IACA,eAACT,GAAD,UACE,eAAC,IAAD,CAAYoB,aAAW,eAAetG,KAAK,KAAKuG,KAAM,eAACxC,EAAA,EAAD,e,cCtBnD,SAASyC,KACtB,OAAO,qD,2CCWM,SAASC,GAAT,GAIS,IAHtBC,EAGqB,EAHrBA,qBACAC,EAEqB,EAFrBA,SACAC,EACqB,EADrBA,OAEM5D,EAAQlE,IADO,EAEamE,mBAAS,IAFtB,mBAEdC,EAFc,KAEHC,EAFG,KAGfC,EAAeC,mBAAQ,WAC3B,IAAMwD,EAAa7D,EAAMhF,YAAYxB,MAAK,SAACjD,GAAD,OAAOA,EAAEwC,OAAS2K,KAE5D,OAAiB,OAAVG,QAAU,IAAVA,OAAA,EAAAA,EAAY3K,KAAKqC,OAAO2E,KAAc,KAC5C,CAACA,IAEJ,OACE,gBAAC,IAAD,WACE,gBAAC,KAAD,WACE,eAAC,KAAD,UACE,eAACa,EAAA,EAAD,CAAa1D,MAAM,eAErB,eAAC,KAAD,CACEyG,IAAKH,EACL3C,YAAY,SACZC,WAAS,EACTC,MAAOhB,EACPiB,SAAU,SAACC,GACTjB,EAAaiB,EAAE3E,OAAOyE,aAI3Bd,EAAavH,OAAS,EACrB,eAAC,IAAD,CAAKkL,UAAU,MAAMtE,YAAY,WAAWxC,GAAG,IAAI+G,KAAM,IAAKC,SAAS,OAAvE,SACG7D,EAAahG,KAAI,gBAAGiF,EAAH,EAAGA,KAAH,OAChB,gBAAC,IAAD,CAEEuC,QAAS,kBAAMgC,EAAOvE,IACtBK,EAAE,IACFwD,aAAa,MACbzD,YAAY,WACZsC,OAAO,UACPnC,OAAQ,CACNsE,WAAY,YARhB,UAWG7E,EAAKvH,KAXR,KAWgBuH,EAAKrH,GAXrB,MACOqH,EAAKrH,SAcd,QCjCK,SAASmM,KACtB,IAAMC,EAAkBC,iBAAyB,MAC3C7J,EAAYI,IAFsC,EAGtBqF,qBAHsB,mBAGjDqE,EAHiD,KAGtCC,EAHsC,KAIlD9D,EAAkB/J,IAExB,OACE,uCACE,gBAAC,KAAD,CAAS0N,gBAAiBA,EAAiBI,UAAU,eAArD,UACE,eAAC,KAAD,UACE,eAAC,KAAD,CAAQxH,KAAK,KAAb,yBAEF,eAAC,KAAD,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,IACA,eAACyG,GAAD,CACEC,qBAAqB,QACrBC,SAAUS,EACVR,OAAQ,SAACvE,GACP7E,EAAUb,UAAUgB,IAAI0E,cAMlC,eAAC,KAAD,CAASoF,GAAG,MACZ,eAAC,KAAD,UACG,kBACC,eAAC,KAAD,CAAYC,QAASjE,EAAkB,EAAI,EAAGkE,QAAQ,IAAtD,SACGzK,MAAMC,KAAKK,EAAUb,WAAWS,KAAI,SAACpE,GAAD,OACnC,gBAAC,IAAD,CAEE+L,OAAO,UACPjC,WAAW,8BACXF,OAAQ,CAAEC,UAAW,QACrBL,OAAO,MACPC,YAAY,WACZC,EAAE,IACFC,aAAa,KACbiC,QAAS,kBAAM2C,EAAavO,IAC5B8H,MAAM,SAVR,UAYE,eAAC,GAAD,CAAO9H,MAAOA,EAAO0H,UAAU,EAAOC,iBAAiB,IACvD,eAAC,IAAD,IACA,eAACiH,GAAA,EAAD,CACEvH,MAAM,UACNyC,WAAW,yBACXF,OAAQ,CAAEvC,MAAO,WACjBuE,QAAS,SAACR,GACJyD,QAAQ,kBACVrK,EAAUb,UAAUmL,OAAO9O,GAE7BoL,EAAE2D,uBArBD/O,EAAMgC,YA8BrB,eAAC,IAAD,CACEqK,OAAQ2C,QAAQV,GAChBhC,QAAS,WACPiC,EAAa,OAEfvH,KAAK,KALP,SAOE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,UAAasH,EAAY,eAAC,GAAD,CAAOtO,MAAOsO,IAAgB,OACvD,eAAC,IAAD,cC5EZ,IAEMW,GAAY,CAChB,CAAEC,KAAM,YAAaC,IAAK,oBAAqB5B,KAAM6B,KACrD,CAAEF,KAAM,QAASC,IAAK,gBAAiB5B,KAAM8B,MAGhC,SAASC,KACtB,IAAMtF,EAAQlE,IADkC,EAErBmE,oBAAS,kBAAMD,EAAMlJ,WAAW,MAApDyO,EAFyC,oBAG1CC,EAAc9O,IAH4B,EAIIuJ,mBAASgF,GAAU,IAJvB,mBAIzCQ,EAJyC,KAIrBC,EAJqB,KAK1CC,EAAWC,cACXC,EAAUC,cAUhB,OARAC,qBAAU,WACR,IAAMC,EAAUf,GAAUzL,MAAK,qBAAG2L,MAAkBQ,EAASM,YAEzDD,GACFN,EAAsBM,KAEvB,CAACL,IAGF,eAAC9K,EAAwBqL,SAAzB,CAAkChF,MAAOqE,EAAzC,SACE,gBAAC,IAAD,WACGC,EACC,uCACE,gBAAC,KAAD,CAAMnE,YAAU,EAACC,YAAY,EAA7B,UACE,eAAC,KAAD,CACErD,GAAIsD,KACJC,UAAW,eAACC,GAAA,EAAD,IACXC,QAAQ,UACRpE,MAAM,OACNqE,YAAY,aALd,SAOG8D,EAAmBP,OAEtB,eAAC,KAAD,UACGD,GAAU7K,KAAI,SAAC+L,GAAD,OACb,eAAC,KAAD,CAEEvE,QAAS,WACPiE,EAAQ9N,KAAKoO,EAAEhB,MAHnB,SAME,eAACzC,GAAD,CAASC,GAAIwD,EAAEhB,IAAKjH,SAAS,QAA7B,SACGiI,EAAEjB,QANAiB,EAAEhB,aAYf,eAAC,KAAD,CAASV,GAAG,SAGd,eAAC,IAAD,CAAK2B,IAAI,QAAQ9I,MAxDL,IAwD2B+I,YAAY,MAAM5G,YAAY,WAArE,SACGwF,GAAU7K,KAAI,SAAC+L,GAAD,OACb,eAAC,IAAD,UACE,eAACzD,GAAD,CAASC,GAAIwD,EAAEhB,IAAKjH,SAAS,QAA7B,SACGiI,EAAEjB,QAFGiB,EAAEhB,UAQlB,eAAC,IAAD,CAAK/H,GAAIoI,EAAc,EAAIc,IAA3B,SACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOC,KAAK,oBAAoBC,UAAWrC,KAC3C,eAAC,IAAD,CAAOoC,KAAK,gBAAgBC,UAAWhD,KAEvC,eAAC,IAAD,CAAUb,GAAG,gCC9FlB,SAAS8D,GAAcC,GAE5B,IADA,IAAIC,EAAO,EACFC,EAAI,EAAGA,EAAIF,EAAI7N,OAAQ+N,IAC9BD,EAAOD,EAAIG,WAAWD,KAAOD,GAAQ,GAAKA,GAI5C,IADA,IAAItJ,EAAQ,IACHuJ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1BvJ,IAAU,MADKsJ,GAAa,EAAJC,EAAU,KACXE,SAAS,KAAKC,QAAQ,GAG/C,OAAO1J,ECSM,SAAS3D,GAAT,GAA0D,IAA1BnD,EAAyB,EAApCiE,UAC1BO,EAAOe,IAAPf,GAER,OACE,eAAC,KAAD,UACG,kBACC,gBAAC,IAAD,CACEyE,OAAO,MACPC,YAAY,WACZE,aAAa,KACbgF,QAAS,EACT3C,QAASrK,SAASpB,EAAE4B,KAAO,EAAI,GAAM,EALvC,UAOE,gBAAC,IAAD,CAAK+K,aAAa,MAAMzD,YAAY,WAAWC,EAAE,IAAIsH,EAAE,OAAvD,UACE,eAAC,KAAD,CAAM9I,SAAS,WAAWb,MAAM,WAAhC,0BAGA,gBAAC,KAAD,WACE,eAAC,KAAD,CACE6D,MAAO3K,EAAEuB,KACTqJ,SAAU,SAACC,GACT7K,EAAEuB,KAAOsJ,EAAE3E,OAAOyE,OAEpBQ,QAAQ,WACRxD,SAAS,KACTE,WAAW,SAEb,eAAC,KAAD,CAAmB4I,EAAE,IAAIC,EAAE,IAAInF,QAAS2E,GAAclQ,EAAEuB,MAAOoP,IAAI,cAIvE,gBAAC,IAAD,CAAQvC,QAAS,EAAGzB,aAAa,MAAMzD,YAAY,WAAnD,UACE,gBAAC,IAAD,CAAKC,EAAE,IAAI2G,YAAY,MAAM5G,YAAY,WAAzC,UACE,eAAC,KAAD,CAAMvB,SAAS,WAAWb,MAAM,WAAhC,sCAGA,eAAC,KAAD,CACE6D,MAAO3K,EAAEqB,WACTuJ,SAAU,SAACC,GACT7K,EAAEqB,WAAawJ,EAAE3E,OAAOyE,OAE1BQ,QAAQ,WACR3I,KAAK,cAGT,gBAAC,IAAD,CAAK2G,EAAE,IAAP,UACE,eAAC,KAAD,CAAMxB,SAAS,WAAWb,MAAM,WAAhC,gBAGA,eAAC,KAAD,CACE6D,MAAO3K,EAAE4B,GACTgJ,SAAU,SAACC,GACT7K,EAAE4B,GAAKiJ,EAAE3E,OAAOyE,OAElBQ,QAAQ,WACR3I,KAAK,iBAIX,gBAAC,IAAD,CAAQ2G,EAAE,IAAIyH,QAAQ,aAAarJ,MAAM,SAASkJ,EAAE,OAApD,UACE,gBAAC,KAAD,CAAM9I,SAAS,KAAf,2BACOvG,SAASpB,EAAEqB,YAAcrB,EAAEsB,iBADlC,IACqDtB,EAAEqB,WADvD,KACqE,IAClErB,EAAEsB,iBAFL,OAIA,eAAC,IAAD,IACA,eAAC,KAAD,CAAQmF,KAAK,KAAK4E,QAAS,kBAAM7G,EAAGtC,eAAelC,IAAnD,gCAGA,eAAC,KAAD,CACEoL,YAAY,MACZ3E,KAAK,KACL4E,QAAS,WACHiD,QAAQ,gDACV9J,EAAGqM,gBAAgB7Q,IALzB,mCChFG,SAAS8Q,KAAuB,IACrCtM,EAAOe,IAAPf,GADoC,EAERkF,oBAAS,GAFD,mBAErCqH,EAFqC,KAEzBC,EAFyB,KAGtC9G,EAAkB/J,IAExB,OACE,gBAAC,IAAD,WACE,gBAAC,IAAD,CAAQsQ,EAAE,OAAV,UACE,eAAC,KAAD,CACEpF,QAAS,WACP7G,EAAGyM,aAAa,uBAFpB,sCAOA,eAAC,KAAD,CACE5F,QAAS,WACP7G,EAAGyM,aAAa,iBAFpB,sCAOA,eAAC,IAAD,IACA,eAAC,KAAD,CAAQ5F,QAAS,kBAAM7G,EAAG9D,qBAA1B,4CACA,eAAC,KAAD,CAAQ0K,YAAY,OAAOC,QAAS,kBAAM2F,GAAeD,IAAzD,SACGA,EAAa,2BAAS,gCAI3B,eAAC,KAAD,UACG,kBACC,eAAC,KAAD,CAAYnE,GAAG,IAAIwB,QAAQ,IAAID,QAASjE,EAAkB,EAAI,EAA9D,UACI6G,EAAavM,EAAG5D,iBAAmB4D,EAAGjE,YAAYsD,KAAI,SAAC7D,GAAD,OACtD,eAAC,GAAD,CAAwBiE,UAAWjE,GAAjBA,EAAEyB,eChBnByP,OAnBf,WACE,OACE,eAAC,IAAD,CAAQC,SAAyD,wBAAjE,SACE,gBAAC,IAAD,WACE,eAAC1E,GAAD,IAEA,eAAC,IAAD,CAAK3E,GAAG,IAAR,SACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOkI,KAAK,UAAUC,UAAWlB,KACjC,eAAC,IAAD,CAAOiB,KAAK,MAAMC,UAAWa,KAE7B,eAAC,IAAD,CAAU1E,GAAG,uBCNnBgF,GAAc3C,QACW,cAA7B4C,OAAOjC,SAASkC,UAEe,UAA7BD,OAAOjC,SAASkC,UAEhBD,OAAOjC,SAASkC,SAAShF,MAAM,2DA0CnC,SAASiF,GAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCjGjE,IAYeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCGdO,YAAU,CAAEC,eAAgB,UAE5B,IAAMC,GAAQC,YAAY,CACxBvN,WAAY,CACVwN,UAAW,CACTC,UAAW,CACTC,KzBlBuB,UyBwBzBhK,GAAQ,IAAIlF,E,8CAElB,sBAAAtD,EAAA,sEACQwI,GAAMiK,OADd,OAGEC,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAgBR,MAAOA,GAAvB,SACE,eAAC7N,EAAamK,SAAd,CAAuBhF,MAAOlB,GAA9B,SACE,eAAC,GAAD,UAINqK,SAASC,eAAe,SAX5B,4C,2DAeAL,GFhBO,SAAkBjC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsC,IAAIC,wBAAwB5C,OAAOjC,SAAS8E,MACpDC,SAAW9C,OAAOjC,SAAS+E,OAIvC,OAGF9C,OAAO+C,iBAAiB,QAAQ,WAC9B,IAAM5C,EAAK,UAAMyC,wBAAN,sBAEP7C,KAgEV,SAAiCI,EAAeC,GAE9C4C,MAAM7C,EAAO,CACX8C,QAAS,CAAE,iBAAkB,YAE5BzC,MAAK,SAAC0C,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjD,UAAUC,cAAciD,MAAM/C,MAAK,SAACC,GAClCA,EAAa+C,aAAahD,MAAK,WAC7BR,OAAOjC,SAAS0F,eAKpBvD,GAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVyC,CAAwBvD,EAAOC,GAI/BC,UAAUC,cAAciD,MAAM/C,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,GAAgBC,EAAOC,OEP/BuD,GAKArC,O","file":"static/js/main.942c60be.chunk.js","sourcesContent":["export const CONTAINER_WIDTH = 1024;\n\nexport const ENTITY_COLORS = {\n  spell: 'purple.600',\n  feat: 'red.600',\n  weapon: 'orange.600',\n};\n","import { createContext, useContext } from 'react';\nimport { useMediaQuery } from '@chakra-ui/react';\n\nimport { CONTAINER_WIDTH } from '../constant';\n\nexport function createContextNoNullCheck<T>(defaults?: T): [() => T, React.Context<T | undefined>] {\n  const context = createContext<T | undefined>(defaults);\n\n  function use(): T {\n    const c = useContext(context);\n\n    if (typeof c === 'undefined') {\n      throw new Error('useContext must be inside a Provider with a value');\n    }\n\n    return c;\n  }\n\n  return [use, context];\n}\n\nexport function useIsSmallerScreen(): boolean {\n  return useMediaQuery(`(max-width: ${CONTAINER_WIDTH - 1}px)`)[0];\n}\n","import { observable, IObservableArray, makeObservable, action, computed } from 'mobx';\nimport shortid from 'shortid';\n\nexport interface DMCharacter {\n  id: string;\n  name: string;\n  initiative: string;\n  hp: string;\n  rolledInitiative: number;\n}\n\nexport default class DMStore {\n  characters: IObservableArray<DMCharacter>;\n\n  constructor() {\n    makeObservable(this, {\n      rollAllInitiative: action,\n      sortedCharacters: computed,\n    });\n\n    this.characters = observable.array([]);\n  }\n\n  get sortedCharacters(): Array<DMCharacter> {\n    return [...this.characters].sort((a, b) => {\n      const ac = parseInt(a.initiative) + a.rolledInitiative;\n      const bc = parseInt(b.initiative) + b.rolledInitiative;\n\n      return bc - ac;\n    });\n  }\n\n  addCharacter(name: string): void {\n    this.characters.push({\n      id: shortid(),\n      name: this.getNonConflictName(name),\n      initiative: '0',\n      hp: '1',\n      rolledInitiative: 0,\n    });\n  }\n\n  removeCharacter(c: DMCharacter): void {\n    this.characters.remove(c);\n  }\n\n  rollInitiative(c: DMCharacter): void {\n    c.rolledInitiative = Math.ceil(Math.random() * 20);\n  }\n\n  rollAllInitiative(): void {\n    this.characters.forEach((c) => this.rollInitiative(c));\n  }\n\n  getNonConflictName(name: string): string {\n    const existed = this.characters.filter((c) => c.name.startsWith(name));\n\n    return `${name} ${existed.length + 1}`;\n  }\n}\n","import Fuse from 'fuse.js';\n\nimport { Entity } from './types';\n\nexport type CollectionEntityType = 'spell' | 'feat' | 'weapon';\n\nexport interface CollectionOptions {\n  searchFields: Array<string>;\n}\n\nexport class Collection<T extends Entity = Entity> {\n  type: CollectionEntityType;\n  data: Array<T>;\n\n  fuse: Fuse<T>;\n\n  constructor(type: CollectionEntityType, data: Array<T>, options: CollectionOptions) {\n    this.type = type;\n    this.data = data;\n\n    this.fuse = new Fuse(data, {\n      includeScore: true,\n      threshold: 0.2,\n\n      keys: options.searchFields,\n    });\n  }\n\n  getById(id: string): T | null {\n    return this.data.find((s) => s.id === id) || null;\n  }\n}\n","import { observable, ObservableSet } from 'mobx';\nimport shortid from 'shortid';\n\nimport { createContextNoNullCheck } from '../utils/react';\nimport { Collection } from './collection';\nimport { Spell } from './types';\n\nexport default class Character {\n  id: string;\n  name: string;\n  spellbook: ObservableSet<Spell>;\n\n  constructor(name: string, id?: string) {\n    this.name = name;\n    this.id = id ?? shortid.generate();\n    this.spellbook = observable.set(new Set(), { deep: false });\n  }\n\n  static stringify(c: Character): string {\n    return JSON.stringify({\n      id: c.id,\n      name: c.name,\n      spellbook: Array.from(c.spellbook).map((s) => s.id),\n    });\n  }\n\n  static parse(s: string, spellCollection: Collection<Spell>): Character {\n    const json = JSON.parse(s);\n    const character = new Character(json.name, json.id);\n\n    for (const spellId of json.spellbook) {\n      const spell = spellCollection.getById(spellId);\n\n      if (spell) {\n        character.spellbook.add(spell);\n      }\n    }\n\n    return character;\n  }\n}\n\nexport const [useCurrentCharacter, CurrentCharacterContext] = createContextNoNullCheck<Character>();\n","import Fuse from 'fuse.js';\nimport { observable, IObservableArray, autorun } from 'mobx';\nimport { set, entries } from 'idb-keyval';\n\nimport SPELL_DATA from '../data/spells.json';\nimport FEAT_DATA from '../data/feats.json';\nimport { createContextNoNullCheck } from '../utils/react';\n\nimport { Entity, Spell, Feat } from './types';\nimport DMStore from './dm';\nimport { Collection, CollectionEntityType } from './collection';\nimport Character from './character';\n\nexport class Store {\n  dm: DMStore;\n  collections: Array<Collection>;\n\n  characters: IObservableArray<Character>;\n\n  constructor() {\n    this.dm = new DMStore();\n\n    this.collections = [\n      new Collection<Spell>('spell', SPELL_DATA, {\n        searchFields: ['id', 'name'],\n      }),\n      new Collection<Feat>('feat', FEAT_DATA, {\n        searchFields: ['id', 'name'],\n      }),\n    ];\n\n    this.characters = observable.array([], { deep: false });\n  }\n\n  async init(): Promise<void> {\n    await this.restore();\n    this.persist();\n  }\n\n  quickSearch(\n    key: string,\n    limitEach = 20\n  ): Array<[CollectionEntityType, Fuse.FuseResult<Entity>[]]> {\n    return this.collections.map((c) => [c.type, c.fuse.search(key, { limit: limitEach })]);\n  }\n\n  persist(): void {\n    autorun(() => {\n      this.characters.forEach((c) => {\n        set(`character:${c.id}`, Character.stringify(c));\n      });\n\n      set('dm:characters', JSON.stringify(this.dm.characters));\n    });\n  }\n\n  async restore(): Promise<void> {\n    const persisted = await entries();\n\n    persisted.forEach(([k, v]) => {\n      if (typeof k === 'string') {\n        if (k.startsWith('character')) {\n          this.characters.push(Character.parse(v, this.collections[0] as Collection<Spell>));\n        }\n\n        if (k === 'dm:characters') {\n          this.dm.characters.replace(JSON.parse(v));\n        }\n      }\n    });\n\n    if (this.characters.length < 1) {\n      this.characters.push(new Character('Default'));\n    }\n  }\n}\n\nexport const [useStore, StoreContext] = createContextNoNullCheck<Store>();\n","export const entityTypeTranslates = {\n  spell: '法术',\n  feat: '专长',\n  weapon: '武器',\n};\n","export const translates = {\n  school: '学派',\n  level: '环位',\n  domain: '领域',\n  castingTime: '施法时间',\n  components: '成分',\n  range: '距离',\n  effect: '效果',\n  target: '目标',\n  area: '区域',\n  aiming: '目标, 区域或区域',\n  duration: '持续时间',\n  saving: '豁免',\n  resistance: '法术抗力',\n};\n","import './Spell.scss';\n\nimport { Box, Heading, Badge, Text, Stack, Table, Tbody, Tr, Td } from '@chakra-ui/react';\n\nimport { ENTITY_COLORS } from '../constant';\nimport { Spell as SpellType, SpellMeta as SpellMetaType } from '../store/types';\nimport { translates as spellTranslates } from '../utils/spell';\n\ninterface Props {\n  spell: SpellType;\n  showName?: boolean;\n  showMeta?: boolean;\n  showDescription?: boolean;\n}\n\nexport function SpellMeta({ spell }: Props): JSX.Element {\n  return (\n    <Table size=\"sm\" mt=\"2\">\n      <Tbody>\n        {(Object.keys(spell.meta) as Array<keyof SpellMetaType>).map((k) => (\n          <Tr key={k}>\n            <Td pl=\"0\" color=\"blue.500\" width=\"8em\">\n              {spellTranslates[k]}\n            </Td>\n            <Td>{spell.meta[k]}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n}\n\nexport default function Spell({\n  spell,\n  showName = true,\n  showMeta = true,\n  showDescription = true,\n}: Props): JSX.Element {\n  return (\n    <Box className=\"spell\">\n      {showName ? (\n        <Stack direction=\"row\" align=\"center\">\n          <Badge>{spell.book.toUpperCase()}</Badge>\n          <Heading as=\"h4\" fontSize=\"lg\" color={ENTITY_COLORS.spell}>\n            {spell.name} <small style={{ fontWeight: 'normal' }}>({spell.id})</small>\n          </Heading>\n        </Stack>\n      ) : null}\n\n      {showMeta ? <SpellMeta spell={spell} /> : null}\n\n      {showDescription ? (\n        <Text\n          pt=\"1\"\n          whiteSpace=\"pre-wrap\"\n          dangerouslySetInnerHTML={{ __html: spell.description }}\n          className=\"spell-description\"\n        />\n      ) : null}\n    </Box>\n  );\n}\n","export const featTranslates = {\n  requirement: '先决条件',\n  benefit: '专长效果',\n  normal: '通常状况',\n  special: '特殊说明',\n};\n","import './Feat.scss';\n\nimport { Box, HStack, Badge, Heading, Table, Tbody, Tr, Td, Text } from '@chakra-ui/react';\n\nimport { ENTITY_COLORS } from '../constant';\nimport { Feat as FeatType, FeatMeta as FeatMetaType } from '../store/types';\nimport { featTranslates } from '../utils/feat';\n\ninterface Props {\n  feat: FeatType;\n  showName?: boolean;\n  showBrief?: boolean;\n  showMeta?: boolean;\n  showDescription?: boolean;\n}\n\nfunction FeatMeta({ feat }: { feat: FeatType }) {\n  return (\n    <Table size=\"sm\" mt=\"2\">\n      <Tbody>\n        {(Object.keys(feat.meta) as Array<keyof FeatMetaType>).map((k) => (\n          <Tr key={k}>\n            <Td pl=\"0\" color=\"blue.500\" width=\"8em\">\n              {featTranslates[k]}\n            </Td>\n            <Td>{feat.meta[k]}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n}\n\nexport default function Feat({\n  feat,\n  showName = true,\n  showBrief = true,\n  showMeta = true,\n  showDescription = true,\n}: Props): JSX.Element {\n  return (\n    <Box className=\"feat\">\n      {showName ? (\n        <HStack direction=\"row\" align=\"center\">\n          <Badge>{feat.book.toUpperCase()}</Badge>\n          <Heading as=\"h4\" fontSize=\"lg\" color={ENTITY_COLORS.feat}>\n            {feat.name} <small style={{ fontWeight: 'normal' }}>({feat.id})</small>\n          </Heading>\n        </HStack>\n      ) : null}\n\n      {showBrief ? (\n        <Text mt=\"2\" fontStyle=\"italic\">\n          {feat.brief}\n        </Text>\n      ) : null}\n\n      {showMeta ? <FeatMeta feat={feat} /> : null}\n\n      {showDescription && feat.description ? (\n        <Text\n          pt=\"1\"\n          whiteSpace=\"pre-wrap\"\n          dangerouslySetInnerHTML={{ __html: feat.description }}\n          className=\"feat-description\"\n        />\n      ) : null}\n    </Box>\n  );\n}\n","import { useMemo, useState } from 'react';\nimport {\n  Box,\n  InputGroup,\n  Input,\n  InputLeftElement,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Button,\n  Tag,\n  HStack,\n} from '@chakra-ui/react';\nimport { Search2Icon, ChevronDownIcon } from '@chakra-ui/icons';\n\nimport { ENTITY_COLORS } from '../constant';\nimport { useStore } from '../store';\nimport { CollectionEntityType } from '../store/collection';\nimport { Entity, Spell as SpellType, Feat as FeatType } from '../store/types';\nimport { useIsSmallerScreen } from '../utils/react';\nimport { entityTypeTranslates } from '../utils/entity';\nimport Spell from './Spell';\nimport Feat from './Feat';\n\nfunction QuickSearchResultItem({ item, type }: { item: Entity; type: CollectionEntityType }) {\n  let el = null;\n\n  switch (type) {\n    case 'spell':\n      el = <Spell spell={item as SpellType} />;\n      break;\n    case 'feat':\n      el = <Feat feat={item as FeatType} />;\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <Box\n      mb=\"2\"\n      border=\"1px\"\n      borderColor=\"gray.200\"\n      p=\"2\"\n      borderRadius=\"md\"\n      _hover={{\n        borderColor: 'gray.300',\n        boxShadow: 'base',\n      }}\n      transition=\"all .2s ease-in-out\"\n    >\n      {el}\n    </Box>\n  );\n}\n\nexport default function QuickSearch(): JSX.Element {\n  const store = useStore();\n  const [searchKey, setSearchKey] = useState('');\n  const searchResult = useMemo(() => store.quickSearch(searchKey), [searchKey]);\n  const [currentType, setCurrentType] = useState(() => searchResult?.[0]?.[0]);\n  const isSmallerScreen = useIsSmallerScreen();\n  const [resultType, results] = searchResult.find(([t]) => currentType === t) || [];\n\n  return (\n    <>\n      <Box flexGrow={0} flexShrink={0} mb=\"2\">\n        <InputGroup>\n          <InputLeftElement>\n            <Search2Icon color=\"gray.400\" />\n          </InputLeftElement>\n          <Input\n            placeholder=\"Search Anything\"\n            autoFocus\n            value={searchKey}\n            onChange={(e) => {\n              setSearchKey(e.target.value);\n            }}\n          />\n        </InputGroup>\n        {results && results?.length > 0 ? (\n          isSmallerScreen ? (\n            <Menu matchWidth autoSelect={false}>\n              <MenuButton\n                mt=\"2\"\n                as={Button}\n                rightIcon={<ChevronDownIcon />}\n                variant=\"outline\"\n                width=\"100%\"\n                colorScheme=\"blackAlpha\"\n              >\n                {entityTypeTranslates[currentType]}\n              </MenuButton>\n              <MenuList>\n                {searchResult.map(([type, r]) =>\n                  r.length > 0 ? (\n                    <MenuItem\n                      key={type}\n                      onClick={() => {\n                        setCurrentType(type);\n                      }}\n                    >\n                      {entityTypeTranslates[type]}\n                    </MenuItem>\n                  ) : null\n                )}\n              </MenuList>\n            </Menu>\n          ) : (\n            <HStack pt=\"2\">\n              {searchResult.map(([type, r]) =>\n                r.length > 0 ? (\n                  <Tag\n                    key={type}\n                    onClick={() => setCurrentType(type)}\n                    bgColor={ENTITY_COLORS[type]}\n                    color=\"white\"\n                    cursor=\"pointer\"\n                    size=\"lg\"\n                    opacity={type === currentType ? 1 : 0.6}\n                  >\n                    {entityTypeTranslates[type]}({r.length})\n                  </Tag>\n                ) : null\n              )}\n            </HStack>\n          )\n        ) : null}\n      </Box>\n      {results && resultType && results?.length > 0 ? (\n        <Box flexGrow={1} overflowY=\"auto\" key={resultType}>\n          {results.map(({ item }) => (\n            <QuickSearchResultItem key={item.id} type={resultType} item={item} />\n          ))}\n        </Box>\n      ) : null}\n    </>\n  );\n}\n","import {\n  Drawer,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerBody,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nimport QuickSearch from './QuickSearch';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nexport default function QuickSearchToggler({ children }: Props): JSX.Element {\n  const { isOpen, onClose, onOpen } = useDisclosure();\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Drawer isOpen={isOpen} onClose={onClose} size=\"lg\">\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerHeader>Quick Search</DrawerHeader>\n            <DrawerBody d=\"flex\" flexDir=\"column\">\n              <QuickSearch />\n            </DrawerBody>\n            <DrawerCloseButton />\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  );\n}\n","import { Link, LinkProps } from '@chakra-ui/react';\nimport { Link as RouterLink, LinkProps as RouterLinkProps, useRouteMatch } from 'react-router-dom';\n\ninterface Props\n  extends LinkProps,\n    Pick<RouterLinkProps, 'to' | 'component' | 'innerRef' | 'replace'> {\n  to: string;\n}\n\nexport default function NavLink({ to, ...props }: Props): JSX.Element {\n  const match = useRouteMatch(to);\n\n  return <Link as={RouterLink} color={match ? 'teal.400' : 'black'} to={to} {...props} />;\n}\n","import { Box, Container, Heading, Flex, Spacer, IconButton, HStack } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\nimport { GiAncientSword } from 'react-icons/gi';\n\nimport QuickSearchToggler from './QuickSearchToggler';\nimport NavLink from './NavLink';\n\nexport default function Navbar(): JSX.Element {\n  return (\n    <Box bg=\"white\" borderBottom=\"1px\" borderColor=\"gray.300\" py={3}>\n      <Container>\n        <Flex alignItems=\"center\">\n          <HStack mr=\"8\" color=\"gray.700\">\n            <GiAncientSword size={28} />\n            <Heading as=\"h1\" fontSize=\"large\">\n              PFWB\n            </Heading>\n          </HStack>\n          <HStack>\n            <NavLink to=\"/player\">Player</NavLink>\n            <NavLink to=\"/dm\">DM</NavLink>\n          </HStack>\n          <Spacer />\n          <QuickSearchToggler>\n            <IconButton aria-label=\"Quick Search\" size=\"sm\" icon={<Search2Icon />} />\n          </QuickSearchToggler>\n        </Flex>\n      </Container>\n    </Box>\n  );\n}\n","import * as React from 'react';\n\nexport default function CharacterFeats(): JSX.Element {\n  return <div>Feats coming soon</div>;\n}\n","import { useMemo, useState, MutableRefObject } from 'react';\nimport { Box, InputGroup, Input, InputLeftElement } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\n\nimport { useStore } from '../store';\nimport { CollectionEntityType } from '../store/collection';\nimport { Entity } from '../store/types';\n\ninterface Props {\n  collectionEntityType: CollectionEntityType;\n  onPick: (entity: Entity) => void;\n  inputRef?: MutableRefObject<HTMLInputElement | null>;\n}\n\nexport default function CollectionEntityPicker({\n  collectionEntityType,\n  inputRef,\n  onPick,\n}: Props): JSX.Element {\n  const store = useStore();\n  const [searchKey, setSearchKey] = useState('');\n  const searchResult = useMemo(() => {\n    const collection = store.collections.find((c) => c.type === collectionEntityType);\n\n    return collection?.fuse.search(searchKey) || [];\n  }, [searchKey]);\n\n  return (\n    <Box>\n      <InputGroup>\n        <InputLeftElement>\n          <Search2Icon color=\"gray.400\" />\n        </InputLeftElement>\n        <Input\n          ref={inputRef}\n          placeholder=\"Search\"\n          autoFocus\n          value={searchKey}\n          onChange={(e) => {\n            setSearchKey(e.target.value);\n          }}\n        />\n      </InputGroup>\n      {searchResult.length > 0 ? (\n        <Box borderTop=\"1px\" borderColor=\"gray.100\" mt=\"2\" maxH={300} overflow=\"auto\">\n          {searchResult.map(({ item }) => (\n            <Box\n              key={item.id}\n              onClick={() => onPick(item)}\n              p=\"2\"\n              borderBottom=\"1px\"\n              borderColor=\"gray.200\"\n              cursor=\"pointer\"\n              _hover={{\n                background: 'gray.100',\n              }}\n            >\n              {item.name} ({item.id})\n            </Box>\n          ))}\n        </Box>\n      ) : null}\n    </Box>\n  );\n}\n","import {\n  Button,\n  Flex,\n  Spacer,\n  Divider,\n  SimpleGrid,\n  PopoverTrigger,\n  Popover,\n  PopoverContent,\n  PopoverBody,\n  PopoverArrow,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerBody,\n} from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { useRef, useState } from 'react';\nimport { Observer } from 'mobx-react-lite';\n\nimport CollectionEntityPicker from './CollectionEntityPicker';\n\nimport { Spell as SpellType } from '../store/types';\nimport { useCurrentCharacter } from '../store/character';\nimport { useIsSmallerScreen } from '../utils/react';\nimport Spell from './Spell';\n\nexport default function CharacterSpellbook(): JSX.Element {\n  const initialFocusRef = useRef<HTMLInputElement>(null);\n  const character = useCurrentCharacter();\n  const [showSpell, setShowSpell] = useState<SpellType | null>();\n  const isSmallerScreen = useIsSmallerScreen();\n\n  return (\n    <>\n      <Popover initialFocusRef={initialFocusRef} placement=\"bottom-start\">\n        <PopoverTrigger>\n          <Button size=\"sm\">Add Spell</Button>\n        </PopoverTrigger>\n        <PopoverContent>\n          <PopoverBody>\n            <PopoverArrow />\n            <CollectionEntityPicker\n              collectionEntityType=\"spell\"\n              inputRef={initialFocusRef}\n              onPick={(item) => {\n                character.spellbook.add(item as SpellType);\n              }}\n            />\n          </PopoverBody>\n        </PopoverContent>\n      </Popover>\n      <Divider my=\"2\" />\n      <Observer>\n        {() => (\n          <SimpleGrid columns={isSmallerScreen ? 1 : 3} spacing=\"2\">\n            {Array.from(character.spellbook).map((spell) => (\n              <Flex\n                key={spell.id}\n                cursor=\"pointer\"\n                transition=\"box-shadow 0.2s ease-in-out\"\n                _hover={{ boxShadow: 'base' }}\n                border=\"1px\"\n                borderColor=\"gray.200\"\n                p=\"2\"\n                borderRadius=\"md\"\n                onClick={() => setShowSpell(spell)}\n                align=\"center\"\n              >\n                <Spell spell={spell} showMeta={false} showDescription={false} />\n                <Spacer />\n                <DeleteIcon\n                  color=\"red.500\"\n                  transition=\"color 0.2s ease-in-out\"\n                  _hover={{ color: 'red.600' }}\n                  onClick={(e) => {\n                    if (confirm('Are you sure?')) {\n                      character.spellbook.delete(spell);\n                    }\n                    e.stopPropagation();\n                  }}\n                />\n              </Flex>\n            ))}\n          </SimpleGrid>\n        )}\n      </Observer>\n\n      <Drawer\n        isOpen={Boolean(showSpell)}\n        onClose={() => {\n          setShowSpell(null);\n        }}\n        size=\"lg\"\n      >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerBody>{showSpell ? <Spell spell={showSpell} /> : null}</DrawerBody>\n            <DrawerCloseButton />\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport {\n  Box,\n  Container,\n  Button,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Divider,\n} from '@chakra-ui/react';\nimport { ChevronDownIcon } from '@chakra-ui/icons';\nimport { Route, useLocation, Switch, Redirect, useHistory } from 'react-router-dom';\nimport { GiSpellBook, GiDiploma } from 'react-icons/gi';\n\nimport { useIsSmallerScreen } from '../utils/react';\nimport { CurrentCharacterContext } from '../store/character';\nimport { useStore } from '../store';\n\nimport CharacterFeats from '../components/CharacterFeats';\nimport NavLink from '../components/NavLink';\nimport CharacterSpellbook from '../components/CharacterSpellbook';\n\nconst SIDEBAR_WIDTH = 140;\n\nconst NAV_LINKS = [\n  { text: 'Spellbook', url: '/player/spellbook', icon: GiSpellBook },\n  { text: 'Feats', url: '/player/feats', icon: GiDiploma },\n];\n\nexport default function PlayerPage(): JSX.Element {\n  const store = useStore();\n  const [currentCharacter] = useState(() => store.characters[0]);\n  const showMenuNav = useIsSmallerScreen();\n  const [currentMenuNavItem, setCurrentMenuNavItem] = useState(NAV_LINKS[0]);\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    const navLink = NAV_LINKS.find(({ url }) => url === location.pathname);\n\n    if (navLink) {\n      setCurrentMenuNavItem(navLink);\n    }\n  }, [location]);\n\n  return (\n    <CurrentCharacterContext.Provider value={currentCharacter}>\n      <Container>\n        {showMenuNav ? (\n          <>\n            <Menu matchWidth autoSelect={false}>\n              <MenuButton\n                as={Button}\n                rightIcon={<ChevronDownIcon />}\n                variant=\"outline\"\n                width=\"100%\"\n                colorScheme=\"blackAlpha\"\n              >\n                {currentMenuNavItem.text}\n              </MenuButton>\n              <MenuList>\n                {NAV_LINKS.map((n) => (\n                  <MenuItem\n                    key={n.url}\n                    onClick={() => {\n                      history.push(n.url);\n                    }}\n                  >\n                    <NavLink to={n.url} fontSize=\"large\">\n                      {n.text}\n                    </NavLink>\n                  </MenuItem>\n                ))}\n              </MenuList>\n            </Menu>\n            <Divider my=\"2\" />\n          </>\n        ) : (\n          <Box pos=\"fixed\" width={SIDEBAR_WIDTH} borderRight=\"1px\" borderColor=\"gray.400\">\n            {NAV_LINKS.map((n) => (\n              <Box key={n.url}>\n                <NavLink to={n.url} fontSize=\"large\">\n                  {n.text}\n                </NavLink>\n              </Box>\n            ))}\n          </Box>\n        )}\n        <Box pl={showMenuNav ? 0 : SIDEBAR_WIDTH + 20}>\n          <Switch>\n            <Route path=\"/player/spellbook\" component={CharacterSpellbook} />\n            <Route path=\"/player/feats\" component={CharacterFeats} />\n\n            <Redirect to=\"/player/spellbook\" />\n          </Switch>\n        </Box>\n      </Container>\n    </CurrentCharacterContext.Provider>\n  );\n}\n","export function stringToColor(str: string): string {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n  for (let i = 0; i < 3; i++) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += ('00' + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}\n","import { Observer } from 'mobx-react-lite';\nimport {\n  VStack,\n  HStack,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Box,\n  Text,\n  Button,\n  Spacer,\n} from '@chakra-ui/react';\n\nimport { useStore } from '../../store';\nimport { DMCharacter } from '../../store/dm';\nimport { stringToColor } from '../../utils/misc';\n\ninterface Props {\n  character: DMCharacter;\n}\n\nexport default function Character({ character: c }: Props): JSX.Element {\n  const { dm } = useStore();\n\n  return (\n    <Observer>\n      {() => (\n        <VStack\n          border=\"1px\"\n          borderColor=\"gray.200\"\n          borderRadius=\"md\"\n          spacing={0}\n          opacity={parseInt(c.hp) <= 0 ? 0.6 : 1}\n        >\n          <Box borderBottom=\"1px\" borderColor=\"gray.200\" p=\"2\" w=\"100%\">\n            <Text fontSize=\"xx-small\" color=\"gray.400\">\n              姓名\n            </Text>\n            <InputGroup>\n              <Input\n                value={c.name}\n                onChange={(e) => {\n                  c.name = e.target.value;\n                }}\n                variant=\"unstyled\"\n                fontSize=\"lg\"\n                fontWeight=\"bold\"\n              />\n              <InputRightElement w=\"4\" h=\"4\" bgColor={stringToColor(c.name)} top=\"6px\" />\n            </InputGroup>\n          </Box>\n\n          <HStack spacing={0} borderBottom=\"1px\" borderColor=\"gray.200\">\n            <Box p=\"2\" borderRight=\"1px\" borderColor=\"gray.200\">\n              <Text fontSize=\"xx-small\" color=\"gray.400\">\n                先攻加值\n              </Text>\n              <Input\n                value={c.initiative}\n                onChange={(e) => {\n                  c.initiative = e.target.value;\n                }}\n                variant=\"unstyled\"\n                type=\"number\"\n              />\n            </Box>\n            <Box p=\"2\">\n              <Text fontSize=\"xx-small\" color=\"gray.400\">\n                HP\n              </Text>\n              <Input\n                value={c.hp}\n                onChange={(e) => {\n                  c.hp = e.target.value;\n                }}\n                variant=\"unstyled\"\n                type=\"number\"\n              />\n            </Box>\n          </HStack>\n          <HStack p=\"2\" justify=\"flex-start\" align=\"center\" w=\"full\">\n            <Text fontSize=\"sm\">\n              先攻: {parseInt(c.initiative) + c.rolledInitiative}({c.initiative} +{' '}\n              {c.rolledInitiative})\n            </Text>\n            <Spacer />\n            <Button size=\"xs\" onClick={() => dm.rollInitiative(c)}>\n              投先攻\n            </Button>\n            <Button\n              colorScheme=\"red\"\n              size=\"xs\"\n              onClick={() => {\n                if (confirm('确定移除此人物?')) {\n                  dm.removeCharacter(c);\n                }\n              }}\n            >\n              删除\n            </Button>\n          </HStack>\n        </VStack>\n      )}\n    </Observer>\n  );\n}\n","import { useState } from 'react';\nimport { Observer } from 'mobx-react-lite';\nimport { Button, Container, SimpleGrid, HStack, Spacer } from '@chakra-ui/react';\n\nimport { useStore } from '../store';\n\nimport DMCharacter from '../components/DM/Character';\nimport { useIsSmallerScreen } from '../utils/react';\n\nexport default function DMPage(): JSX.Element {\n  const { dm } = useStore();\n  const [battleView, setBattleView] = useState(false);\n  const isSmallerScreen = useIsSmallerScreen();\n\n  return (\n    <Container>\n      <HStack w=\"full\">\n        <Button\n          onClick={() => {\n            dm.addCharacter('无名氏');\n          }}\n        >\n          添加人物\n        </Button>\n        <Button\n          onClick={() => {\n            dm.addCharacter('敌人');\n          }}\n        >\n          添加敌人\n        </Button>\n        <Spacer />\n        <Button onClick={() => dm.rollAllInitiative()}>全员投先攻</Button>\n        <Button colorScheme=\"teal\" onClick={() => setBattleView(!battleView)}>\n          {battleView ? '一般排序' : '先攻排序'}\n        </Button>\n      </HStack>\n\n      <Observer>\n        {() => (\n          <SimpleGrid py=\"2\" spacing=\"2\" columns={isSmallerScreen ? 1 : 3}>\n            {(battleView ? dm.sortedCharacters : dm.characters).map((c) => (\n              <DMCharacter key={c.id} character={c} />\n            ))}\n          </SimpleGrid>\n        )}\n      </Observer>\n    </Container>\n  );\n}\n","import { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { Box } from '@chakra-ui/react';\n\nimport Navbar from './components/Navbar';\nimport PlayerPage from './pages/PlayerPage';\nimport DMPage from './pages/DMPage';\n\nfunction App(): JSX.Element {\n  return (\n    <Router basename={process.env.NODE_ENV === 'development' ? '/' : '/pathfinder-workbench'}>\n      <Box>\n        <Navbar />\n\n        <Box pt=\"4\">\n          <Switch>\n            <Route path=\"/player\" component={PlayerPage} />\n            <Route path=\"/dm\" component={DMPage} />\n\n            <Redirect to=\"/player\" />\n          </Switch>\n        </Box>\n      </Box>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react';\nimport { configure } from 'mobx';\n\nimport { CONTAINER_WIDTH } from './constant';\nimport { StoreContext, Store } from './store';\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nconfigure({ enforceActions: 'never' });\n\nconst theme = extendTheme({\n  components: {\n    Container: {\n      baseStyle: {\n        maxW: CONTAINER_WIDTH,\n      },\n    },\n  },\n});\n\nconst store = new Store();\n\nasync function init() {\n  await store.init();\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <ChakraProvider theme={theme}>\n        <StoreContext.Provider value={store}>\n          <App />\n        </StoreContext.Provider>\n      </ChakraProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\ninit();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}